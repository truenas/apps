{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% if not values.storage.distributed_mode %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.export, **{"mount_path": values.storage.export.mount_path}),
    values=values, perm_opts={"mount_path": "/mnt/minio/export", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
  )) %}
{% endif %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/minio/tmp", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/minio/dir_%s"|format(loop.index0), "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{# Configs #}
{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ values.consts.minio_container_name }}:
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ "%s/private.key" | format(values.consts.certs_dir) }}
      - source: public
        target: {{ "%s/public.crt" | format(values.consts.certs_dir) }}
    {% endif %}
    command:
      - server
      - --console-address
      - {{ ":%d" | format(values.network.console_port) }}
      {% if values.storage.distributed_mode %}
        {% for uri in values.storage.distributed_uris %}
        - {{ uri | tojson }}
        {% endfor %}
      {% else %}
      - --address
      - {{ ":%d" | format(values.network.api_port) }}
      {% endif %}
      {% if values.network.certificate_id %}
      - --certs-dir
      - {{ values.consts.certs_dir }}
      {% endif %}
      {% for arg in values.minio.extra_args %}
      - {{ arg }}
      {% endfor %}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.storage.distributed_mode %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = "mc ready --insecure --cluster-read health" %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    {% set proto = "https" if values.network.certificate_id else "http" %}
    {% set app_env = {
      "MC_HOST_health": "%s://localhost:%d" | format(proto, values.network.api_port),
      "MINIO_ROOT_USER": values.minio.root_user,
      "MINIO_ROOT_PASSWORD": values.minio.root_password,
    } %}
    {% if values.network.certificate_id and values.network.domain %}
      {% do app_env.update({
        "MINIO_SERVER_URL": "https://%s:%d"  (values.network.domain, values.network.api_port),
        "MINIO_BROWSER_REDIRECT_URL": "https://%s:%d"  (values.network.domain, values.network.console_port),
      }) %}
    {% endif %}
    {% if not values.storage.distributed_mode %}
      {% do app_env.update({"MINIO_VOLUMES": values.storage.export.mount_path}) %}
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.minio.additional_envs, values=values) | tojson }}
    {% if not values.storage.distributed_mode %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.console_port, "published": values.network.console_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.api_port, "published": values.network.api_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.console_port, "scheme": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("MinIO") | tojson }}

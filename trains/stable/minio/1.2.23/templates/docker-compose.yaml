{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.minio_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.healthcheck.set_custom_test("mc ready --insecure --cluster-read health") %}

{% set tmp_config = {"type": "temporary", "volume_config": {"volume_name": "tmp"}} %}
{% do c1.add_storage("/tmp", tmp_config) %}
{% do perm_container.add_or_skip_action("tmp", tmp_config, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% set proto = "https" if values.network.certificate_id else "http" %}
{% set envs = namespace(x={
  "MC_HOST_health": "%s://localhost:%d" | format(proto, values.network.api_port),
  "MINIO_ROOT_USER": values.minio.root_user,
  "MINIO_ROOT_PASSWORD": values.minio.root_password,
}) %}

{% set cmd = namespace(x=[
  "server",
  "--console-address",
  ":%d" | format(values.network.console_port),
]) %}

{% if values.storage.distributed_mode %}
  {% do c1.set_network_mode("host") %}

  {% for uri in values.storage.distributed_uris %}
    {% do cmd.x.append(uri) %}
  {% endfor %}
{% else %}
  {% do cmd.x.append("--address") %}
  {% do cmd.x.append(":%d" | format(values.network.api_port)) %}

  {% do envs.x.update({"MINIO_VOLUMES": values.storage.export.mount_path}) %}

  {% do c1.add_storage(values.storage.export.mount_path, values.storage.export) %}
  {% do perm_container.add_or_skip_action("export", values.storage.export, perms_config) %}
{% endif %}

{% if values.network.certificate_id %}
  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, "%s/private.key" | format(values.consts.certs_dir)) %}
  {% do c1.configs.add("public", cert.certificate, "%s/public.crt" | format(values.consts.certs_dir)) %}

  {% do cmd.x.append("--certs-dir") %}
  {% do cmd.x.append(values.consts.certs_dir) %}
  {% if values.network.domain %}
    {% do envs.x.update({"MINIO_SERVER_URL": "https://%s:%d" | format(values.network.domain, values.network.api_port)}) %}
    {% do envs.x.update({"MINIO_BROWSER_REDIRECT_URL": "https://%s:%d" | format(values.network.domain, values.network.console_port)}) %}
  {% endif %}
{% endif %}

{% for arg in values.minio.extra_args %}
  {% do cmd.x.append(arg) %}
{% endfor %}

{% do c1.set_command(cmd.x) %}
{% for key, value in envs.x.items() %}
  {% do c1.environment.add_env(key, value) %}
{% endfor %}
{% do c1.environment.add_user_envs(values.minio.additional_envs) %}

{% do c1.ports.add_port(values.network.console_port, values.network.console_port) %}
{% do c1.ports.add_port(values.network.api_port, values.network.api_port) %}


{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.console_port, "scheme": proto})%}

{{ tpl.render() | tojson }}

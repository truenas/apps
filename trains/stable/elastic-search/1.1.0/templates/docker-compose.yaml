{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/usr/share/elasticsearch/data"}),
  values=values, perm_opts={"mount_path": "/mnt/elastic/data", "mode": "check", "uid": values.consts.user_id, "gid": values.consts.group_id}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/usr/share/elasticsearch/config/certs"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/elastic/dir_%s"|format(loop.index0), "mode": "check", "uid": values.consts.user_id, "gid": values.consts.group_id}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ values.consts.elastic_container_name }}:
    user: {{ "%d:%d" | format(values.consts.user_id, values.consts.group_id) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ values.consts.tls_key_path }}
      - source: public
        target: {{ values.consts.tls_cert_path }}
      - source: public
        target: {{ values.consts.tls_ca_path }}
    {% endif %}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(
      port=values.network.web_port,
      path="/_cluster/health?local=true",
      config={
        "scheme": "https" if values.network.certificate_id else "http",
        "headers": [("Authorization", ix_lib.base.utils.basic_auth_header("elastic", values.elastic.password))]
      }
    ) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    {% set app_env = {
      "ES_HEAP_SIZE": values.elastic.heap_size,
      "ELASTIC_PASSWORD": values.elastic.password,
      "ES_SETTING_HTTP_PORT": values.network.web_port,
      "ES_SETTING_NODE_NAME": values.elastic.node_name,
      "ES_SETTING_DISCOVERY_TYPE": "single-node",
      "ES_SETTING_XPACK_SECURITY_ENABLED": "true",
      "ES_SETTING_XPACK_SECURITY_TRANSPORT_SSL_ENABLED": "false",
    } %}
    {% if values.network.certificate_id and app_env.update({
        "ES_SETTING_XPACK_SECURITY_HTTP_SSL_ENABLED": "true",
        "ES_SETTING_XPACK_SECURITY_HTTP_SSL_KEY": values.consts.tls_key_path,
        "ES_SETTING_XPACK_SECURITY_HTTP_SSL_CERTIFICATE": values.consts.tls_cert_path,
        "ES_SETTING_XPACK_SECURITY_HTTP_SSL_CERTIFICATE__AUTHORITIES": values.consts.tls_ca_path,
    }) %}{% endif %}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.elastic.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "schema": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Elastic Search") | tojson }}

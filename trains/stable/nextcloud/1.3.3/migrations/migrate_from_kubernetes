#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.dns_config import migrate_dns_config
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "nextcloud": {
            "admin_user": config["ncConfig"]["adminUser"],
            "admin_password": config["ncConfig"]["adminPassword"],
            "host": config["ncConfig"].get("host", ""),
            "data_dir_path": config["ncConfig"]["dataDir"],
            "apt_packages": config["ncConfig"].get("commands", []),
            "redis_password": get_value_from_secret(
                k8s_secrets, "redis-creds", "REDIS_PASSWORD"
            ),
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "db_user": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_USER"
            ),
            "php_upload_limit": config["ncConfig"]["maxUploadLimit"],
            "php_memory_limit": config["ncConfig"]["phpMemoryLimit"],
            "max_execution_time": config["ncConfig"]["maxExecutionTime"],
            "op_cache_memory_consumption": config["ncConfig"]["opCacheMemoryConsumption"],
            "cron": {
                "enabled": config["ncConfig"]["cron"]["enabled"],
                **(
                    {"schedule": config["ncConfig"]["cron"]["schedule"]}
                    if config["ncConfig"]["cron"]["enabled"]
                    else {}
                ),
            },
            "additional_envs": config["ncConfig"].get("additionalEnvs", []),
        },
        "network": {
            "web_port": config["ncNetwork"].get("webPort", 9001),
            "certificate_id": config["ncNetwork"].get("certificateID", None),
            "dns_opts": migrate_dns_config(
                config.get("podOptions", {}).get("dnsConfig", {})
            ),
            "nginx": {
                "proxy_timeout": config["ncNetwork"]["nginx"]["proxyTimeouts"],
                "use_different_port": config["ncNetwork"]["nginx"][
                    "useDifferentAccessPort"
                ],
                **(
                    {
                        "external_access_port": config["ncNetwork"]["nginx"][
                            "externalAccessPort"
                        ]
                    }
                    if config["ncNetwork"]["nginx"]["useDifferentAccessPort"]
                    else {}
                ),
            },
        },
        "storage": {
            "is_data_in_the_same_volume": config["ncStorage"].get(
                "isDataInTheSameVolume", False
            ),
            "html": migrate_storage_item(config["ncStorage"]["html"]),
            "data": migrate_storage_item(config["ncStorage"]["data"]),
            "postgres_data": migrate_storage_item(config["ncStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["ncStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

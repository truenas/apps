{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set pg_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set pg_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": "/config"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.media, **{"mount_path": "/media"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/pgvecto/tmp", "mode": "check", "uid": values.consts.pg_run_user, "gid": values.consts.pg_run_group}
)) %}
{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}),
  values=values, perm_opts={"mount_path": "/mnt/postgres/data", "mode": "check", "uid": values.consts.pg_run_user, "gid": values.consts.pg_run_group,}
)) %}
{% for item in pg_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and pg_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}
{% set ha_db_url = ix_lib.base.postgres.pg_url(variant="postgresql",
  host=values.consts.postgres_container_name,
  user=values.home_assistant.db_user,
  password=values.home_assistant.db_password,
  dbname=values.home_assistant.db_name
) %}
configs:
  configuration.default:
    content: |
      {# Configure a default setup of Home Assistant (frontend, api, etc) #}
      default_config:
      {# Text to speech #}
      tts:
        - platform: google_translate
      automation: !include automations.yaml
      script: !include scripts.yaml
      scene: !include scenes.yaml
  empty.default:
    content: "{}"
  recorder.default:
    content: |
      recorder:
        purge_keep_days: 30
        commit_interval: 3
        db_url: {{ ha_db_url }}
  config-script:
    {% set config_path = "/config" %}
    {% set config_file = "%s/configuration.yaml"|format(config_path) %}
    {% set extra_files_to_create = ["automations.yaml", "scripts.yaml", "scenes.yaml"] %}
    {% set default_files = "/default/init" %}
    content: |
      #!/bin/sh
      # Attemp to get read/write access
      if [ ! -f "{{ config_file }}" ]; then
        echo "File [{{ config_file }}] does NOT exist. Creating..."
        cp "{{ default_files }}/configuration.default" "{{ config_file }}"

        {%- for file in extra_files_to_create %}
        if [ ! -f "{{ config_path }}/{{ file }}" ]; then
          echo "File [{{ config_path }}/{{ file }}] does NOT exist. Creating..."
          cp "{{ default_files }}/empty.default" "{{ config_path }}/{{ file }}"
        fi
        {%- endfor %}
      fi

      chmod +rw "{{ config_file }}" || echo "Failed to set permissions on [{{ config_file }}]"
      if ! yq --exit-status '.recorder' < "{{ config_file }}" &> /dev/null; then
        echo "Section [recorder] does NOT exist in [{{ config_file }}]. Appending..."
        cat "{{ default_files }}/recorder.default" >> "{{ config_file }}"
      fi
      echo "Ensure DB URL is up to date [{{ ha_db_url }}] in [{{ config_file }}]"
      yq -i '.recorder.db_url = "{{ ha_db_url }}"' "{{ config_file }}"
      echo "Done"

{# Containers #}
services:
  {{ values.consts.init_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="yq_image") }}
    user: "0:0"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    entrypoint: /default/init/script.sh
    configs:
      - source: config-script
        target: /default/init/script.sh
        mode: 0755
      - source: configuration.default
        target: /default/init/configuration.default
      - source: recorder.default
        target: /default/init/recorder.default
      - source: empty.default
        target: /default/init/empty.default
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.home_assistant_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources, values.home_assistant.devices) | tojson }}
    depends_on:
      {{ values.consts.postgres_container_name }}:
        condition: service_healthy
      {{ values.consts.init_container_name }}:
        condition: service_completed_successfully
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "FOWNER", "DAC_OVERRIDE", "NET_BIND_SERVICE", "NET_RAW"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.wget_test(port=8123, path="/manifest.json") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.home_assistant.additional_envs, values=values) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 8123, "published": values.network.web_port}) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

  {% set resource_without_gpus = ix_lib.base.utils.copy_dict(values.resources) %}
  {% do resource_without_gpus.pop("gpus", None) %}
  {{ values.consts.postgres_container_name }}: {{ ix_lib.base.postgres.pg_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="postgres_image"),
    "volumes": pg_volume_mounts.items,
    "user": values.consts.pg_run_user, "group": values.consts.pg_run_group,
    "db_user": values.home_assistant.db_user, "db_name": values.home_assistant.db_name,
    "db_password": values.home_assistant.db_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      } if perms_dirs.items else {}
    }
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Home Assistant") | tojson }}

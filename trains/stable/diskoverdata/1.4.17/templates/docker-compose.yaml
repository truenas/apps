{% from "diskover_macros/crontab" import crontab %}
{% from "diskover_macros/setup-cron.sh" import setup_cron %}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set es_password = tpl.funcs.secure_string(32) %}

{% set c1 = tpl.add_container(values.consts.diskover_data_container_name, "image") %}
{% set es = tpl.add_container(values.consts.elastic_search_container_name, "elastic_search_image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set es_perm_config = {"uid": values.consts.elastic_run_as_user, "gid": values.consts.elastic_run_as_group, "mode": "check"} %}


{% do es.set_user(values.consts.elastic_run_as_user, values.consts.elastic_run_as_group) %}
{% do es.healthcheck.set_test("curl", {"port": values.consts.elastic_port, "path": "/_cluster/health",
  "headers": [("Authorization", tpl.funcs.basic_auth_header(values.consts.elastic_basic_auth_user, es_password))]}
) %}

{% do es.environment.add_env("ELASTIC_PASSWORD", es_password) %}
{% do es.environment.add_env("http.port", values.consts.elastic_port) %}
{% do es.environment.add_env("discovery.type", "single-node") %}
{% do es.environment.add_env("node.name", "diskoverdata") %}

{% do es.add_storage("/usr/share/elasticsearch/data", values.storage.es_data) %}
{% do perm_container.add_or_skip_action("es_data", values.storage.es_data, es_perm_config) %}

{% do c1.set_user(0, 0) %}
{% do c1.add_caps(["CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID"]) %}
{% do c1.healthcheck.set_test("wget", {"port": values.consts.internal_web_port, "path": "/login.php"}) %}

{# We add this after the diskoverdata's script that configures the crontab. (60 as it executes in order) #}
{% do c1.configs.add("setup_cron.sh", setup_cron(values), "/etc/cont-init.d/60-inject-cron", "0700") %}
{% do c1.configs.add("crontab", crontab(values), values.consts.cron_file_path) %}
{% do c1.depends.add_dependency(values.consts.elastic_search_container_name, "service_healthy") %}

{% do c1.environment.add_env("ES_HOST", values.consts.elastic_search_container_name) %}
{% do c1.environment.add_env("ES_PORT", values.consts.elastic_port) %}
{% do c1.environment.add_env("ES_USER", values.consts.elastic_basic_auth_user) %}
{% do c1.environment.add_env("ES_PASSWORD", es_password) %}
{% do c1.environment.add_env("ES_HTTPS", false) %}
{% do c1.environment.add_user_envs(values.diskover_data.additional_envs) %}

{% do c1.ports.add_port(values.network.web_port, values.consts.internal_web_port) %}

{% do c1.add_storage("/config", values.storage.config) %}
{% do c1.add_storage("/data", values.storage.data) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do es.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port, "path": "/login.php"}) %}
{% do tpl.notes.set_body(values.consts.notes_body) %}

{{ tpl.render() | tojson }}

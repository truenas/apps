#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.dns_config import migrate_dns_config
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_wallets = []
    old_wallets = config["storjConfig"].get("wallets", {})
    if old_wallets.get("zkSync", False):
        new_wallets.append("zksync")
    if old_wallets.get("zkSyncEra", False):
        new_wallets.append("zksync-era")

    new_values = {
        "storj": {
            "additional_envs": config["storjConfig"].get("additionalEnvs", []),
            "stop_grace_period": config["storjConfig"]["gracePeriod"],
            "auth_token": config["storjConfig"]["authToken"],
            "wallet_address": config["storjConfig"]["wallet"],
            "email": config["storjConfig"]["email"],
            "domain_address": config["storjConfig"]["domainAddress"],
            "storage_size_gb": config["storjConfig"]["storageSizeGB"],
            "wallets": new_wallets,
        },
        "run_as": {
            "user": config["storjRunAs"].get("user", 568),
            "group": config["storjRunAs"].get("group", 568),
        },
        "network": {
            "host_network": config["storjNetwork"].get("hostNetwork", False),
            "web_port": config["storjNetwork"].get("webPort", 20909),
            "p2p_port": config["storjNetwork"].get("p2pPort", 28967),
            "dns_opts": migrate_dns_config(config["podOptions"].get("dnsConfig", {})),
        },
        "storage": {
            "identity": migrate_storage_item(config["storjStorage"]["identity"]),
            "data": migrate_storage_item(config["storjStorage"]["data"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["storjStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

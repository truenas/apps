{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.home, **{"mount_path": "/var/jenkins_home"}),
  values=values, perm_opts={"mount_path": "/mnt/jenkins/home", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/jenkins/tmp", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/jenkins/dir_%s"|format(loop.index0), "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
  )) %}
{% endfor %}

{% set random_cert_pass = ix_lib.base.utils.secure_string(32) %}
{% set config = namespace({"opts": [
  "--httpPort=%d"|format(-1 if values.network.certificate_id else values.network.web_port),
], "java_opts": [
  "-Djenkins.model.Jenkins.slaveAgentPortEnforce=true",
  "-Djenkins.model.Jenkins.slaveAgentPort=%d"|format(values.network.agent_port if values.network.enable_agent else -1),
]}) %}

{% if values.network.certificate_id %}
  {% do config.opts.extend([
    "--httpsPort=%d"|format(values.network.web_port),
    "--httpsKeyStore=%s/%s"|format(values.consts.keystore_path, values.consts.keystore_name),
    "--httpsKeyStorePassword=%s"|format(random_cert_pass),
  ])%}
{% endif %}

{% set restricted_opts = ["httpPort", "httpsPort", "httpsKeyStorePassword", "httpsKeyStore"] %}
{% set user_opts = namespace(items=[]) %}
{% for opt in values.jenkins.additional_opts %}
  {% set key = opt.split("=")[0] %}
  {% if key.startswith("--") %}
    {% do ix_lib.base.utils.throw_error("Expected [jenkins.additional_opts] to not start with [--] key [%s]. It is added automatically"|format(key)) %}
  {% endif %}
  {% if key in restricted_opts %}
    {% do ix_lib.base.utils.throw_error("Expected [jenkins.additional_opts] to not contain [%s] key"|format(key)) %}
  {% endif %}

  {% do user_opts.items.append(key) %}
  {% do config.opts.append("--%s"|format(opt)) %}
{% endfor %}

{% if user_opts.items|unique|list|length < user_opts.items|length %}
  {% do ix_lib.base.utils.throw_error("Expected [jenkins.additional_opts] to not contain duplicate keys [%s]"|format(user_opts.items|join(", "))) %}
{% endif %}

{% set restricted_java_opts = ["jenkins.model.Jenkins.slaveAgentPortEnforce", "jenkins.model.Jenkins.slaveAgentPort"] %}
{% set user_java_opts = namespace(items=[]) %}
{% for jopt in values.jenkins.additional_java_opts %}
  {% if jopt.property.startswith("-D") %}
    {% do ix_lib.base.utils.throw_error("Expected [jenkins.additional_java_opts] to not start with [-D] key [%s]. It is added automatically"|format(jopt.property)) %}
  {% endif %}
  {% if jopt.property in restricted_java_opts %}
    {% do ix_lib.base.utils.throw_error("Expected [jenkins.additional_java_opts] to not contain [%s] key"|format(jopt.property)) %}
  {% endif %}

  {% do user_java_opts.items.append(jopt.property) %}
  {% do config.java_opts.append("-D%s=%s"|format(jopt.property, jopt.value)) %}
{% endfor %}

{% if user_java_opts.items|unique|list|length < user_java_opts.items|length %}
  {% do ix_lib.base.utils.throw_error("Expected [jenkins.additional_java_opts] to not contain duplicate keys [%s]"|format(user_java_opts.items|join(", "))) %}
{% endif %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {% if values.network.certificate_id %}
  {{ values.consts.certs_container_name }}:
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 521M
    entrypoint: "/bin/sh"
    healthcheck:
      disable: true
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    configs:
      - source: private
        target: {{ "%s/%s"|format(values.consts.temp_certs_path, values.consts.key_name) }}
      - source: public
        target: {{ "%s/%s"|format(values.consts.temp_certs_path, values.consts.crt_name) }}
    volumes: {{ volume_mounts.items | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    command:
      - "-c"
      - |
        {% set p12 = "%s/ix.p12"|format(values.consts.temp_certs_path) %}
        {% set key = "%s/%s"|format(values.consts.temp_certs_path, values.consts.key_name) %}
        {% set cert = "%s/%s"|format(values.consts.temp_certs_path, values.consts.crt_name) %}
        {% set keystore = "%s/%s"|format(values.consts.keystore_path, values.consts.keystore_name) %}
        mkdir -p {{ values.consts.temp_certs_path }}
        mkdir -p {{ values.consts.keystore_path }}

        if [ -f "{{ p12 }}" ]; then
            echo "Cleaning up old p12 certificate"; rm -f "{{ p12 }}"
        fi

        echo "Generating new p12 from key and cert"
        if [ -f "{{ key }}" ] && [ -f "{{ cert }}" ]; then
            echo "Found key and cert, generating p12 certificate"
            openssl pkcs12 -inkey "{{ key }}" -in "{{ cert }}" \
                -export -out "{{ p12 }}" \
                -password pass:{{ random_cert_pass }} || { echo "Failed to generate p12 certificate"; exit 1; }
            echo "Successfully generated p12 certificate"

            if [ -f "{{ keystore }}" ]; then
                echo "Cleaning up old keystore"; rm -f "{{ keystore }}"
            fi

            echo "Importing certificate into a new java keystore"
            keytool -importkeystore -srckeystore "{{ p12 }}" -srcstoretype pkcs12 \
                -destkeystore "{{ keystore }}" -deststoretype JKS \
                -srcstorepass "{{ random_cert_pass }}" \
                -deststorepass "{{ random_cert_pass }}" || { echo "Failed to import certificate"; exit 1; }
            echo "Certificate imported into keystore"
        else
            echo "Failed to find key and cert, skipping certificate import"; exit 1
        fi
    {% endif %}

  {{ values.consts.jenkins_container_name }}:
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if perms_dirs.items or values.network.certificate_id %}
    depends_on:
      {% if values.network.certificate_id %}
      {{ values.consts.certs_container_name }}:
        condition: service_completed_successfully
      {% endif %}
      {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
      {% endif %}
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(port=values.network.web_port, path="/login", config={"scheme": "https" if values.network.certificate_id else "http"}) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "JENKINS_SLAVE_AGENT_PORT": values.network.agent_port if values.network.enable_agent else -1,
      "JENKINS_JAVA_OPTS": config.java_opts|join(" "),
      "JENKINS_OPTS": config.opts|join(" "),
    }, user=values.jenkins.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "scheme": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Jenkins", body=values.consts.notes_body) | tojson }}

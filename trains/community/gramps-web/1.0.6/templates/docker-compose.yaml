{% set tpl = ix_lib.base.render.Render(values) %}

{% set web = tpl.add_container(values.consts.web_container_name, "image") %}
{% set celery = tpl.add_container(values.consts.celery_container_name, "image") %}
{% set containers = [web, celery] %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set tmp_config = {"type": "temporary", "volume_config": {"volume_name": "tmp-gramps"}} %}

{% set redis_config = {
  "password": values.gramps.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% do web.healthcheck.set_test("tcp", {"port": values.consts.internal_web_port}) %}
{% do celery.healthcheck.set_custom_test("celery -A gramps_webapi.celery inspect ping") %}
{% do celery.set_command([
  "celery", "-A", "gramps_webapi.celery",
  "worker", "--loglevel=INFO", "--concurrency=2"
]) %}

{% for c in containers %}
  {% do c.set_user(values.run_as.user, values.run_as.group) %}

  {% do c.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

  {% do c.environment.add_env("GRAMPSWEB_TREE", "gramps") %}
  {% do c.environment.add_env("GRAMPSWEB_SECRET_KEY", values.gramps.app_key) %}

  {% do c.environment.add_env("GRAMPSHOME", values.consts.data_path) %}
  {% do c.environment.add_env("GRAMPSWEB_MEDIA_BASE_DIR", "%s/media"|format(values.consts.data_path)) %}
  {% do c.environment.add_env("GRAMPSWEB_EXPORT_DIR", "%s/export"|format(values.consts.data_path)) %}
  {% do c.environment.add_env("GRAMPSWEB_REPORT_DIR", "%s/report"|format(values.consts.data_path)) %}
  {% do c.environment.add_env("GRAMPS_DATABASE_PATH", "%s/db"|format(values.consts.data_path)) %}

  {% do c.environment.add_env("GRAMPSWEB_THUMBNAIL_CACHE_CONFIG__CACHE_DIR", "%s/thumbnail_cache"|format(values.consts.data_path)) %}

  {% do c.environment.add_env("GRAMPSWEB_SEARCH_INDEX_DB_URI", "sqlite:///%s/search_index.sqlite"|format(values.consts.data_path)) %}
  {% do c.environment.add_env("GRAMPSWEB_USER_DB_URI", "sqlite:///%s/users.sqlite"|format(values.consts.data_path)) %}

  {% do c.environment.add_env("GRAMPSWEB_CELERY_CONFIG__broker_url", "%s/0"|format(redis.get_url("redis"))) %}
  {% do c.environment.add_env("GRAMPSWEB_CELERY_CONFIG__result_backend", "%s/0"|format(redis.get_url("redis"))) %}
  {% do c.environment.add_env("GRAMPSWEB_RATELIMIT_STORAGE_URI", "%s/1"|format(redis.get_url("redis"))) %}

  {% do c.environment.add_user_envs(values.gramps.additional_envs) %}

  {% do c.add_storage(values.consts.data_path, values.storage.data) %}
  {% do c.add_storage("/.cache", values.storage.cache) %}
  {% do c.add_storage("/tmp", tmp_config) %}

  {% for store in values.storage.additional_storage %}
    {% do c.add_storage(store.mount_path, store) %}
  {% endfor %}
{% endfor %}

{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}
{% do perm_container.add_or_skip_action("cache", values.storage.cache, perms_config) %}
{% do perm_container.add_or_skip_action("tmp-gramps", tmp_config, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% do web.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% for c in containers %}
    {% do c.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endfor %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

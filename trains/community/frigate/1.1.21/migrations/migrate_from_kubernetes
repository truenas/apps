#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


image_map = {
    "image": "image",
    "tensorrtImage": "tensorrt_image",
}


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "frigate": {
            "image_selector": image_map[config["frigateConfig"]["imageSelector"]],
            "mount_usb_bus": config["frigateConfig"].get("mountUSBBus", False),
            "shm_size_mb": config["frigateStorage"]["shm"]["sizeMiB"],
            "additional_envs": config["frigateConfig"].get("additionalEnvs", []),
        },
        "network": {
            "host_network": config["frigateNetwork"].get("hostNetwork", False),
            "enable_no_auth": True,  # Previously there was no toggle for this and was always enabled
            "no_auth_port": config["frigateNetwork"].get("webPort", 20911),
            "web_port": 30059,  # This port was not exposed previously. Its the auth port.
            "enable_rtsp": config["frigateNetwork"].get("enableRtsp", False),
            "rtsp_port": config["frigateNetwork"].get("rtspPort", 30060),
            "enable_webrtc": config["frigateNetwork"].get("enableWebRtc", False),
            "webrtc_port": config["frigateNetwork"].get("webRtcPort", 30061),
        },
        "storage": {
            "config": migrate_storage_item(config["frigateStorage"]["config"]),
            "media": migrate_storage_item(config["frigateStorage"]["media"]),
            "cache": {
                "type": "tmpfs",
                "tmpfs_config": {
                    "size": config["frigateStorage"]["cache"]["sizeGiB"] * 1024
                },
            },
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["frigateStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(
            config["resources"], config["frigateGPU"], values.get("gpu_choices", {})
        ),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

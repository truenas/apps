{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": values.consts.data_dir}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.plots, **{"mount_path": values.consts.plots_dir}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {% if values.chia.service != "harvester" %}
  {{ values.consts.init_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    volumes: {{ volume_mounts.items | tojson }}
    entrypoint: /bin/sh
    command:
      - -c
      - |
        if [ ! -f {{ values.consts.key_file_path }} ]; then
            echo "Generating key file..."
            /chia-blockchain/venv/bin/python3 -c \
                "from chia.util.keychain import generate_mnemonic;print(generate_mnemonic())" > {{ values.consts.key_file_path }}

            if [ ! -f {{ values.consts.key_file_path }} ]; then
                echo "Failed to generate key file"
                exit 1
            fi

            echo "Key file generated successfully"
        fi
  {% endif %}
  {{ values.consts.chia_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.chia.service != "harvester" %}
    depends_on:
      {{ values.consts.init_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("/usr/local/bin/docker-healthcheck.sh") | tojson }}
    {% set plots_dirs = namespace(x=["/plots"]) %}
    {% for store in values.storage.additional_storage if store.is_plot_dir %}
      {% do plots_dirs.x.append(store.mount_path) %}
    {% endfor %}
    environment: {{ ix_lib.base.environment.envs(app=ix_lib.base.utils.merge_dicts({
      "plots_dir": plots_dirs.x | join(":"),
      "keys": "none" if values.chia.service == "harvester" else values.consts.key_file_path
    },
    { "full_node_peer": values.chia.full_node_peer } if values.chia.full_node_peer else {},
    { "service": values.chia.service } if values.chia.service else {},
    {
      "farmer_address": values.chia.farmer_address or ix_lib.base.utils.throw_error("Expected [chia.farmer_address] to be set when service is set to [harvester]"),
      "farmer_port": values.chia.farmer_port or ix_lib.base.utils.throw_error("Expected [chia.farmer_port] to be set when service is set to [harvester]"),
      "ca": values.chia.ca or ix_lib.base.utils.throw_error("Expected [chia.ca] to be set when service is set to [harvester]"),
    } if values.chia.service == "harvester" else {}
    ), user=values.chia.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 8444, "published": values.network.chia_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 8447, "published": values.network.farmer_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Chia") | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.vikunja_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.vikunja.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.vikunja.postgres_image_selector,
  pg_config, perm_container
) %}

{% set redis_config = {
  "password": values.vikunja.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{# FIXME: Currently there is no binaries or a subcommand in the container to perform a healthcheck #}
{% do c1.healthcheck.disable() %}

{% do c1.environment.add_env("VIKUNJA_SERVICE_TIMEZONE", values.TZ) %}
{% do c1.environment.add_env("VIKUNJA_SERVICE_JWTSECRET", values.vikunja.jwt_secret) %}
{% do c1.environment.add_env("VIKUNJA_DATABASE_TYPE", "postgres") %}
{% do c1.environment.add_env("VIKUNJA_DATABASE_PASSWORD", values.vikunja.db_password) %}
{% do c1.environment.add_env("VIKUNJA_DATABASE_USER", values.consts.db_user) %}
{% do c1.environment.add_env("VIKUNJA_DATABASE_HOST", values.consts.postgres_container_name) %}
{% do c1.environment.add_env("VIKUNJA_DATABASE_DATABASE", values.consts.db_name) %}
{% do c1.environment.add_env("VIKUNJA_REDIS_ENABLED", true) %}
{% do c1.environment.add_env("VIKUNJA_KEYVALUE_TYPE", "redis") %}
{% do c1.environment.add_env("VIKUNJA_REDIS_HOST", "%s:6379"|format(values.consts.redis_container_name)) %}
{% do c1.environment.add_env("VIKUNJA_REDIS_PASSWORD", values.vikunja.redis_password) %}
{% do c1.environment.add_env("VIKUNJA_REDIS_DB", 0) %}
{% do c1.environment.add_env("VIKUNJA_SERVICE_INTERFACE", ":%d"|format(values.network.web_port)) %}
{% do c1.environment.add_env("VIKUNJA_FILES_MAXSIZE", "%dMB"|format(values.vikunja.max_file_size)) %}
{% do c1.environment.add_env("VIKUNJA_FILES_BASEPATH", values.consts.data_path) %}
{% do c1.environment.add_env("VIKUNJA_SERVICE_PUBLICURL", "%s/"|format(values.vikunja.url.rstrip("/"))) %}

{% do c1.environment.add_user_envs(values.vikunja.additional_envs) %}
{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}
{% do c1.add_storage(values.consts.data_path, values.storage.data) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}
{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

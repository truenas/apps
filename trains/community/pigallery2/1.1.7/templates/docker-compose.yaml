{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.pigallery_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perm_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}
{% do c1.healthcheck.set_test("wget", {"port": values.network.web_port, "path": "/heartbeat"}) %}

{% do c1.environment.add_env("PORT", values.network.web_port) %}
{% do c1.environment.add_env("PI_DOCKER", true) %}
{% do c1.environment.add_env("NODE_ENV", "production") %}
{% do c1.environment.add_env("Server-port", values.network.web_port) %}
{% do c1.environment.add_env("Server-applicationTitle", values.pigallery.application_title) %}
{% do c1.environment.add_env("Database-type", "sqlite") %}
{% do c1.environment.add_env("Database-sqlite-DBFileName", "sqlite.db") %}
{% do c1.environment.add_env("Database-dbFolder", values.consts.db_path) %}
{% do c1.environment.add_env("Media-folder", values.consts.media_path) %}
{# While its called Media-tempFolder, it is not to be thrown away. It stores the thumbnails and other generated files. #}
{% do c1.environment.add_env("Media-tempFolder", values.consts.thumbnails_path) %}
{% do c1.environment.add_user_envs(values.pigallery.additional_envs) %}

{% do c1.add_storage("/app/data/config", values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perm_config) %}

{% do c1.add_storage(values.consts.db_path, values.storage.db) %}
{% do perm_container.add_or_skip_action(values.consts.db_path, values.storage.db, perm_config) %}

{% do c1.add_storage(values.consts.thumbnails_path, values.storage.thumbnails) %}
{% do perm_container.add_or_skip_action(values.consts.thumbnails_path, values.storage.thumbnails, perm_config) %}

{% do c1.add_storage(values.consts.media_path, values.storage.media) %}
{% do perm_container.add_or_skip_action(values.consts.media_path, values.storage.media, perm_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perm_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}
{% do tpl.notes.set_body(values.consts.notes_body) %}

{{ tpl.render() | tojson }}

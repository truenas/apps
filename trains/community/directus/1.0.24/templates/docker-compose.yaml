{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.directus_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{# Postgres #}
{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.directus.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.directus.postgres_image_selector,
  pg_config, perm_container
) %}

{# Redis #}
{% set redis_config = {
  "password": values.directus.redis_password,
  "volume": tpl.funcs.temp_config("redis_data")
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% do c1.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do c1.healthcheck.set_test("wget", {"port": values.network.web_port.port_number, "path": "/server/ping"}) %}

{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

{% do c1.environment.add_env("ADMIN_EMAIL", values.directus.admin_email) %}
{% do c1.environment.add_env("ADMIN_PASSWORD", values.directus.admin_password) %}
{% do c1.environment.add_env("WEBSOCKETS_ENABLED", values.directus.enable_websocket) %}
{% do c1.environment.add_env("SECRET", values.directus.secret) %}
{% do c1.environment.add_env("DB_CLIENT", "pg") %}
{% do c1.environment.add_env("DB_CONNECTION_STRING", postgres.get_url("postgres")) %}
{% do c1.environment.add_env("CACHE_ENABLED", true) %}
{% do c1.environment.add_env("CACHE_AUTO_PURGE", true) %}
{% do c1.environment.add_env("CACHE_STORE", "redis") %}
{% do c1.environment.add_env("REDIS", redis.get_url("redis")) %}
{% do c1.environment.add_env("PORT", values.network.web_port.port_number) %}
{% do c1.environment.add_user_envs(values.directus.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage("/directus/uploads", values.storage.uploads) %}
{% do perm_container.add_or_skip_action("uploads", values.storage.uploads, perms_config) %}

{% do c1.add_storage("/directus/extensions", values.storage.extensions) %}
{% do perm_container.add_or_skip_action("extensions", values.storage.extensions, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port, {"path": "/admin"}) %}

{{ tpl.render() | tojson }}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set mariadb_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set mariadb_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.gpg, **{"mount_path": values.consts.gpg_path}),
  values=values, perm_opts={"mount_path": "/mnt/passbolt/gpg", "mode": "check", "uid": values.consts.passbolt_run_user, "gid": values.consts.passbolt_run_group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.jwt, **{"mount_path": "/etc/passbolt/jwt"}),
  values=values, perm_opts={"mount_path": "/mnt/passbolt/jwt", "mode": "check", "uid": values.consts.passbolt_run_user, "gid": values.consts.passbolt_run_group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"temporary", "mount_path": "/tmp"},
  values=values, perm_opts={"mount_path": "/mnt/passbolt/tmp", "mode": "check", "uid": values.consts.passbolt_run_user, "gid": values.consts.passbolt_run_group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"temporary", "mount_path": "/var/run"},
  values=values, perm_opts={"mount_path": "/mnt/passbolt/varrun", "mode": "check", "uid": values.consts.passbolt_run_user, "gid": values.consts.passbolt_run_group}
)) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/passbolt/dir_%s"|format(loop.index0), "mode": "check", "uid": values.consts.passbolt_run_user, "gid": values.consts.passbolt_run_group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do mariadb_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/mariadb/tmp", "mode": "check", "uid": values.consts.mariadb_run_user, "gid": values.consts.mariadb_run_group}
)) %}
{% do mariadb_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.mariadb_data, **{"mount_path": "/var/lib/mysql"}),
  values=values, perm_opts={"mount_path": "/mnt/mariadb/data", "mode": "check", "uid": values.consts.mariadb_run_user, "gid": values.consts.mariadb_run_group,}
)) %}
{% for item in mariadb_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and mariadb_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ values.consts.passbolt_container_name }}:
    user: {{ "%d:%d" | format(values.consts.passbolt_run_user, values.consts.passbolt_run_group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    platform: linux/amd64
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: /etc/passbolt/certs/certificate.key
      - source: public
        target: /etc/passbolt/certs/certificate.crt
    {% endif %}
    depends_on:
      {{ values.consts.mariadb_container_name }}:
        condition: service_healthy
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(
      port=values.consts.internal_https_port if values.network.certificate_id else values.consts.internal_http_port,
      config={"scheme": "https"  if values.network.certificate_id else "http"}, path="/healthcheck/status",
    ) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "DATASOURCES_DEFAULT_HOST": values.consts.mariadb_container_name,
      "DATASOURCES_DEFAULT_DATABASE": values.consts.db_name,
      "DATASOURCES_DEFAULT_USERNAME": values.consts.db_user,
      "DATASOURCES_DEFAULT_PASSWORD": values.passbolt.db_password,
      "DATASOURCES_DEFAULT_PORT": 3306,
      "GNUPGHOME": "/var/lib/passbolt/.gnupg",
      "PASSBOLT_GPG_SERVER_KEY_PUBLIC": "%s/serverkey.asc" | format(values.consts.gpg_path),
      "PASSBOLT_GPG_SERVER_KEY_PRIVATE": "%s/serverkey_private.asc" | format(values.consts.gpg_path),
      "APP_FULL_BASE_URL": values.passbolt.app_url,
    }, user=values.passbolt.additional_envs, values=values) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_https_port if values.network.certificate_id else values.consts.internal_http_port, "published": values.network.web_port}) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

  {% set resource_without_gpus = ix_lib.base.utils.copy_dict(values.resources) %}
  {% do resource_without_gpus.pop("gpus", None) %}
  {{ values.consts.mariadb_container_name }}: {{ ix_lib.base.mariadb.mariadb_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="mariadb_image"),
    "volumes": mariadb_volume_mounts.items,
    "user": values.consts.mariadb_run_user, "group": values.consts.mariadb_run_group,
    "db_user": values.consts.db_user, "db_name": values.consts.db_name,
    "db_password": values.passbolt.db_password,
    "db_root_password": values.passbolt.db_root_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      } if perms_dirs.items else {}
    }
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Passbolt", body=values.consts.notes_body) | tojson }}

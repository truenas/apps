#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def map_image_selector(image):
    match image:
        case "j8Image":
            return "j8_image"
        case "j8j9Image":
            return "j8_j9_image"
        case "j8jdkImage":
            return "j8_jdk_image"
        case "j8gceImage":
            return "j8_gce_image"
        case "j11Image":
            return "j11_image"
        case "j11j9Image":
            return "j11_j9_image"
        case "j11jdkImage":
            return "j11_jdk_image"
        case "j17Image":
            return "j17_image"
        case "j17j9Image":
            return "j17_j9_image"
        case "j17jdkImage":
            return "j17_jdk_image"
        case "j17gceImage":
            return "j17_gce_image"
        case "j17alpineImage":
            return "j17_alpine_image"
        case "j19Image":
            return "j19_image"
        case "j21Image":
            return "image"
        case "j21gImage":
            return "j21_g_image"
        case "j21alpineImage":
            return "j21_alpine_image"


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "TZ": config["TZ"],
        "minecraft": {
            "additional_envs": config["mcConfig"].get("additionalEnvs", []),
            "image_selector": map_image_selector(config["mcConfig"]["imageSelector"]),
            "eula": config["mcConfig"]["eula"],
            "version": config["mcConfig"]["version"],
            "type": config["mcConfig"]["type"],
            "motd": config["mcConfig"]["motd"],
            "difficulty": config["mcConfig"]["difficulty"],
            "mode": config["mcConfig"]["mode"],
            "server_name": config["mcConfig"]["serverName"],
            "max_players": config["mcConfig"]["maxPlayers"],
            "max_world_size": config["mcConfig"]["maxWorldSize"],
            "allow_nether": config["mcConfig"]["allowNether"],
            "announce_player_achievements": config["mcConfig"][
                "announcePlayerAchievements"
            ],
            "enable_command_block": config["mcConfig"]["enableCommandBlock"],
            "force_game_mode": config["mcConfig"]["forceGameMode"],
            "generate_structures": config["mcConfig"]["generateStructures"],
            "hardcore": config["mcConfig"]["hardcore"],
            "max_build_height": config["mcConfig"]["maxBuildHeight"],
            "spawn_animals": config["mcConfig"]["spawnAnimals"],
            "spawn_monsters": config["mcConfig"]["spawnMonsters"],
            "spawn_npcs": config["mcConfig"]["spawnNpcs"],
            "spawn_protection": config["mcConfig"]["spawnProtection"],
            "view_distance": config["mcConfig"]["viewDistance"],
            "pvp": config["mcConfig"]["pvp"],
            "level_type": config["mcConfig"]["levelType"],
            "allow_flight": config["mcConfig"]["allowFlight"],
            "online_mode": config["mcConfig"]["onlineMode"],
            "max_tick_time": config["mcConfig"]["maxTickTime"],
            "enable_rcon": config["mcConfig"]["enableRcon"],
            "rcon_password": config["mcConfig"].get("rconPassword", ""),
            "seed": config["mcConfig"]["seed"],
            "ops": config["mcConfig"]["ops"],
            "whitelist": config["mcConfig"]["whitelist"],
        },
        "run_as": {
            "user": config["mcID"].get("user", 568),
            "group": config["mcID"].get("group", 568),
        },
        "network": {
            "host_network": config["mcNetwork"]["hostNetwork"],
            "server_port": config["mcNetwork"]["serverPort"],
            "rcon_port": config["mcNetwork"]["rconPort"],
        },
        "storage": {
            "data": migrate_storage_item(config["mcStorage"]["data"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["mcStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

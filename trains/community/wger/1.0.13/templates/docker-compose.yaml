{% from "macros/nginx.conf" import nginx_config %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% set nginx = tpl.add_container(values.consts.nginx_container_name, "nginx_image") %}
{% set server = tpl.add_container(values.consts.server_container_name, "image") %}
{% set worker = tpl.add_container(values.consts.worker_container_name, "image") %}
{% set beat = tpl.add_container(values.consts.beat_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{# -- Postgres -- #}
{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.wger.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.wger.postgres_image_selector,
  pg_config, perm_container
) %}

{# -- Redis -- #}
{% set redis_config = {
  "password": values.wger.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{# -- NGINX -- #}
{% do nginx.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do nginx.depends.add_dependency(values.consts.server_container_name, "service_healthy") %}
{% do nginx.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "path": "/health"}) %}
{% do nginx.configs.add("nginx.conf", nginx_config(values), "/etc/nginx/conf.d/default.conf") %}
{% do nginx.add_storage("/wger/static", dict(values.storage.static, **{"read_only": True})) %}
{% do nginx.add_storage("/wger/media", dict(values.storage.media, **{"read_only": True})) %}
{% do nginx.add_port(values.network.web_port) %}

{% set envs = {
  "SECRET_KEY": values.wger.secret_key,
  "SIGNING_KEY": values.wger.signing_key,
  "TIME_ZONE": values.TZ,
  "WGER_USE_GUNICORN": "True",
  "DJANGO_DEBUG": "False",
  "USE_CELERY": "True",
  "CELERY_BROKER": "%s/2" | format(redis.get_url("redis")),
  "CELERY_BACKEND": "%s/2" | format(redis.get_url("redis")),
  "CELERY_FLOWER_PASSWORD": tpl.funcs.secure_string(32),
  "DJANGO_DB_ENGINE": "django.db.backends.postgresql",
  "DJANGO_DB_DATABASE": values.consts.db_name,
  "DJANGO_DB_USER": values.consts.db_user,
  "DJANGO_DB_PASSWORD": values.wger.db_password,
  "DJANGO_DB_HOST": values.consts.postgres_container_name,
  "DJANGO_DB_PORT": 5432,
  "DJANGO_PERFORM_MIGRATIONS": "True",
  "DJANGO_CACHE_BACKEND": "django_redis.cache.RedisCache",
  "DJANGO_CACHE_LOCATION": "%s/1" | format(redis.get_url("redis")),
  "DJANGO_CACHE_CLIENT_PASSWORD": values.wger.redis_password,
  "DJANGO_CACHE_TIMEOUT": 1296000,
  "DJANGO_CACHE_CLIENT_CLASS": "django_redis.client.DefaultClient",
  "CSRF_TRUSTED_ORIGINS": values.wger.trusted_origins|join(","),
  "SYNC_EXERCISES_CELERY": "True",
  "SYNC_EXERCISE_IMAGES_CELERY": "True",
  "SYNC_EXERCISE_VIDEOS_CELERY": "True",
  "SYNC_INGREDIENTS_CELERY": "True",
} %}

{% for key, value in envs.items() %}
  {% do server.environment.add_env(key, value) %}
  {% do worker.environment.add_env(key, value) %}
  {% do beat.environment.add_env(key, value) %}
{% endfor %}

{# -- Server -- #}
{% do server.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do server.healthcheck.set_test("wget", {"port": values.consts.internal_server_port}) %}
{% do server.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do server.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do server.add_storage("/home/wger/static", values.storage.static) %}
{% do server.add_storage("/home/wger/media", values.storage.media) %}
{% do server.environment.add_user_envs(values.wger.additional_envs) %}

{# -- Worker -- #}
{% do worker.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do worker.healthcheck.set_custom_test("celery -A wger inspect ping") %}
{% do worker.set_command(["/start-worker"]) %}
{% do worker.depends.add_dependency(values.consts.server_container_name, "service_healthy") %}
{% do worker.add_storage("/home/wger/media", values.storage.media) %}
{% do worker.environment.add_user_envs(values.wger.additional_envs) %}

{# -- Beat -- #}
{% do beat.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do beat.healthcheck.set_custom_test("celery -A wger inspect ping") %}
{% do beat.set_command(["/start-beat"]) %}
{% do beat.depends.add_dependency(values.consts.worker_container_name, "service_healthy") %}
{% do beat.add_storage("/home/wger/beat", values.storage.beat) %}
{% do beat.environment.add_user_envs(values.wger.additional_envs) %}

{% do perm_container.add_or_skip_action("static", values.storage.static, perms_config) %}
{% do perm_container.add_or_skip_action("media", values.storage.media, perms_config) %}
{% do perm_container.add_or_skip_action("beat", values.storage.beat, perms_config) %}
{% for store in values.storage.additional_storage %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do nginx.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do server.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do worker.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do beat.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

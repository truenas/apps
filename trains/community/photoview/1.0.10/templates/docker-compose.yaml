{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.photoview_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.photoview.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, values.photoview.postgres_image_selector, pg_config, perm_container) %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.healthcheck.set_test("curl", {
  "port": values.network.web_port.port_number,
  "path": "/api/graphql", "method": "POST",
  "headers": [("Content-Type", "application/json")],
  "data": {"operationName":"CheckInitialSetup","variables":{},"query":"query CheckInitialSetup { siteInfo { initialSetup }}"}
}) %}
{% do c1.environment.add_env("PHOTOVIEW_LISTEN_IP", "0.0.0.0") %}
{% do c1.environment.add_env("PHOTOVIEW_LISTEN_PORT", values.network.web_port.port_number) %}
{% do c1.environment.add_env("PHOTOVIEW_DATABASE_DRIVER", "postgres") %}
{% do c1.environment.add_env("PHOTOVIEW_POSTGRES_URL", postgres.get_url("postgresql")) %}
{% do c1.environment.add_env("PHOTOVIEW_MEDIA_CACHE", values.consts.media_cache_path) %}
{% do c1.environment.add_user_envs(values.photoview.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage(values.consts.media_cache_path, values.storage.media_cache) %}
{% do perm_container.add_or_skip_action("media-cache", values.storage.media_cache, perms_config) %}

{% if not values.storage.additional_storage %}
  {% do tpl.funcs.fail("Expected at least 1 [Additional Storage] to be set for photos") %}
{% endif %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

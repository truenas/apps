{% from "macros/app_init.sh" import app_init %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.opencloud_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{# Apps Init #}
{% set app_containers = namespace(x=[]) %}
{% set has_additional_config = namespace(x=False) %}
{% for app_name, enabled in values.opencloud.apps.items() %}
  {% set target_path = "%s/web/assets/apps"|format(values.consts.data_path) %}
  {% set app_config = values.consts.app_map[app_name] %}

  {% set app = tpl.add_container(app_config.container_name, app_config.image) %}
  {% do app_containers.x.append(app) %}

  {% do c1.depends.add_dependency(app_config.container_name, "service_completed_successfully") %}

  {% do app.set_user(0, 0) %}
  {% do app.add_caps(["CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}
  {% do app.setup_as_helper() %}
  {% do app.add_storage(values.consts.data_path, values.storage.data) %}
  {% do app.configs.add("%s_entrypoint"|format(app_config.container_name), app_init(tpl, {
    "enabled": enabled,
    "target_path": target_path,
    "app_id": app_config.id,
    "source_path": app_config.source,
    "run_as": {"uid": values.run_as.user, "gid": values.run_as.group},
  }), "/ix-entrypoint.sh", "0755") %}
  {% do app.set_entrypoint(["/ix-entrypoint.sh"]) %}

  {% if app_config.config_url %}
    {% set has_additional_config.x = True %}
    {% do tpl.notes.add_info("The app '%s' requires additional configuration. Please see %s for details."|format(app_name, app_config.config_url)) %}
  {% endif %}
{% endfor %}

{% set body = namespace(x=values.consts.notes_body) %}
{% if has_additional_config.x %}{% set body.x = "%s\n\n%s"|format(body.x, values.consts.app_config_notes_body) %}{% endif %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "path": "/healthz", "scheme": "https"}) %}
{% do c1.configs.add("entrypoint", values.consts.entrypoint_script, "/ix-entrypoint.sh", "0755") %}
{% do c1.set_entrypoint(["/ix-entrypoint.sh"]) %}

{% set extra_services = namespace(x=["notifications"]) %}

{% if values.opencloud.full_text_search.enabled %}
  {% set tika = tpl.deps.tika(values.consts.tika_container_name, "tika_image", {"port": values.consts.tika_port}) %}
  {% do c1.depends.add_dependency(values.consts.tika_container_name, "service_healthy") %}
  {% do c1.environment.add_env("FRONTEND_FULL_TEXT_SEARCH_ENABLED", true) %}
  {% do c1.environment.add_env("SEARCH_EXTRACTOR_TYPE", "tika") %}
  {% do c1.environment.add_env("SEARCH_EXTRACTOR_TIKA_TIKA_URL", tika.get_url()) %}
{% endif %}

{# Networking #}
{% do c1.environment.add_env("PROXY_HTTP_ADDR", ":%d"|format(values.network.web_port.port_number)) %}
{% if values.network.metrics_port.bind_mode %}
  {% do c1.environment.add_env("PROXY_DEBUG_ADDR", ":%d"|format(values.network.metrics_port.port_number)) %}
{% endif %}
{% set url = tpl.funcs.url_to_dict(values.opencloud.app_url, true) %}
{# We use netloc here because it ensures that there is no trailing slash #}
{% set url_path = url.path.rstrip("/") %}
{% if url.scheme != "https" %}{% do tpl.funcs.fail("The app URL must be HTTPS") %}{% endif %}
{% do c1.environment.add_env("OC_URL", "%s://%s%s"|format(url.scheme, url.netloc, url_path)) %}
{% do c1.environment.add_env("OC_INSECURE", values.opencloud.insecure_access) %}

{% if values.network.certificate_id %}
  {% do c1.environment.add_env("PROXY_TRANSPORT_TLS_KEY", values.consts.ssl_key_path) %}
  {% do c1.environment.add_env("PROXY_TRANSPORT_TLS_CERT", values.consts.ssl_cert_path) %}

  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c1.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}
{% endif %}

{# Storage #}
{% do c1.environment.add_env("STORAGE_USERS_DRIVER", "posix") %}
{% do c1.environment.add_env("STORAGE_USERS_ID_CACHE_STORE", "nats-js-kv") %}
{% do c1.environment.add_env("OC_BASE_DATA_PATH", values.consts.data_path) %}
{% do c1.environment.add_env("OC_CONFIG_DIR", values.consts.config_path) %}

{% do c1.environment.add_env("NOTIFICATIONS_SMTP_SENDER", values.opencloud.smtp.sender or "OpenCloud notifications <notifications@cloud.opencloud.test>") %}
{% if values.opencloud.smtp.enabled %}
  {% do c1.environment.add_env("NOTIFICATIONS_SMTP_HOST", values.opencloud.smtp.host) %}
  {% do c1.environment.add_env("NOTIFICATIONS_SMTP_PORT", values.opencloud.smtp.port) %}
  {% do c1.environment.add_env("NOTIFICATIONS_SMTP_INSECURE", values.opencloud.smtp.insecure) %}
  {% do c1.environment.add_env("NOTIFICATIONS_SMTP_ENCRYPTION", values.opencloud.smtp.encryption) %}
  {% if values.opencloud.smtp.username %}
    {% do c1.environment.add_env("NOTIFICATIONS_SMTP_USERNAME", values.opencloud.smtp.username) %}
  {% endif %}
  {% if values.opencloud.smtp.password %}
    {% do c1.environment.add_env("NOTIFICATIONS_SMTP_PASSWORD", values.opencloud.smtp.password) %}
  {% endif %}
{% endif %}

{% do c1.environment.add_env("OC_ADD_RUN_SERVICES", extra_services.x | join(",")) %}
{% do c1.environment.add_env("IDM_ADMIN_PASSWORD", "admin") %}
{% do c1.environment.add_user_envs(values.opencloud.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage(values.consts.config_path, values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perms_config) %}

{% do c1.add_storage(values.consts.data_path, values.storage.data) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% for c in app_containers.x %}
    {% do c.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endfor %}
{% endif %}

{% do tpl.portals.add(values.network.web_port, {"scheme": "https"}) %}
{% do tpl.notes.set_body(body.x) %}

{{ tpl.render() | tojson }}

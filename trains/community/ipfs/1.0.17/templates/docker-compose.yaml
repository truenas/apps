{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": values.consts.data_path}),
  values=values, perm_opts={"mount_path": "/mnt/ipfs/data", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.staging, **{"mount_path": "/export"}),
  values=values, perm_opts={"mount_path": "/mnt/ipfs/staging", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
  perm_opts={"mount_path": "/mnt/ipfs/dir_%s"|format(loop.index0), "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
  )) %}
{% endfor %}

{# Default API Address https://github.com/ipfs/kubo/blob/master/docs/config.md#addressesapi #}
{% set api_addresses = "/ip4/0.0.0.0/tcp/%s"|format(values.network.api_port) %}
{# Default Gateway Address https://github.com/ipfs/kubo/blob/master/docs/config.md#addressesgateway #}
{% set gateway_addresses = "/ip4/0.0.0.0/tcp/%s"|format(values.network.gateway_port) %}
{# Default Swarm Addresses https://github.com/ipfs/kubo/blob/master/docs/config.md#addressesswarm #}
{% set swarm_addresses = [
  "/ip4/0.0.0.0/tcp/%s"|format(values.network.swarm_port),
  "/ip6/::/tcp/%s"|format(values.network.swarm_port),
  "/ip4/0.0.0.0/udp/%s/quic"|format(values.network.swarm_port),
  "/ip4/0.0.0.0/udp/%s/quic-v1"|format(values.network.swarm_port),
  "/ip4/0.0.0.0/udp/%s/quic-v1/webtransport"|format(values.network.swarm_port),
  "/ip6/::/udp/%s/quic"|format(values.network.swarm_port),
  "/ip6/::/udp/%s/quic-v1"|format(values.network.swarm_port),
  "/ip6/::/udp/%s/quic-v1/webtransport"|format(values.network.swarm_port),
] %}
{% set allowed_origins = ["*"] %}
{% set allowed_methods = ["POST", "PUT"] %}
configs:
  init-script:
    content: |
      #!/bin/sh
      set -e

      if [ ! -f {{ values.consts.data_path }}/config ]; then
        # Create the IPFS config file
        echo "Initializing IPFS"
        ipfs init
      fi

      # Configure the Addresses.API
      echo 'Configuring the Addresses.API to {{ api_addresses }}'
      ipfs config Addresses.API {{ api_addresses }}

      # Configure the Addresses.Gateway
      echo 'Configuring the Addresses.Gateway to {{ gateway_addresses }}'
      ipfs config Addresses.Gateway {{ gateway_addresses }}

      # Configure the Addresses.Swarm
      echo 'Configuring the Addresses.Swarm to {{ swarm_addresses | tojson }}'
      ipfs config Addresses.Swarm --json '{{ swarm_addresses | tojson }}'

      # Configure the API.HTTPHeaders.Access-Control-Allow-Origin
      echo 'Configuring the API.HTTPHeaders.Access-Control-Allow-Origin to {{ allowed_origins | tojson }}'
      ipfs config API.HTTPHeaders.Access-Control-Allow-Origin --json '{{ allowed_origins | tojson }}'

      # Configure the API.HTTPHeaders.Access-Control-Allow-Methods
      echo 'Configuring the API.HTTPHeaders.Access-Control-Allow-Methods to {{ allowed_methods | tojson }}'
      ipfs config API.HTTPHeaders.Access-Control-Allow-Methods --json '{{ allowed_methods | tojson }}'

      echo "Finished configuring IPFS"

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ values.consts.init_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512m
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    configs:
      - source: init-script
        target: /init-script
        mode: 0755
    entrypoint: ["/init-script"]
    healthcheck:
      disable: true
    volumes: {{ volume_mounts.items | tojson }}
  {{ values.consts.ipfs_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    depends_on:
      {{ values.consts.init_container_name }}:
        condition: service_completed_successfully
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {# https://github.com/ipfs/kubo/blob/8f638dcbcd875ecff92021e4b62d0af8848022ce/Dockerfile#L116 #}
    {% set test = "ipfs dag stat /ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn" %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.ipfs.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.api_port, "published": values.network.api_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.gateway_port, "published": values.network.gateway_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.swarm_port, "published": values.network.swarm_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.api_port}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("IPFS") | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.invoice_ninja_container_name, "image") %}
{% set worker = tpl.add_container(values.consts.invoice_ninja_worker_container_name, "image") %}
{% set scheduler = tpl.add_container(values.consts.invoice_ninja_scheduler_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": 999, "gid": 999, "mode": "check"} %}
{% set app_url = values.invoice_ninja.app_url.rstrip("/") %}

{% set mariadb_config = {
  "user": values.consts.db_user,
  "root_password": values.invoice_ninja.db_root_password,
  "password": values.invoice_ninja.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.mariadb_data,
} %}
{% set mariadb = tpl.deps.mariadb(
  values.consts.mariadb_container_name, "mariadb_image",
  mariadb_config, perm_container,
) %}

{% set redis_config = {
  "password": values.invoice_ninja.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set containers = [c1, worker, scheduler] %}
{% for c in containers %}
  {% do c.set_user(999, 999) %}
  {% do c.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID", "NET_BIND_SERVICE"]) %}

  {% do c.depends.add_dependency(values.consts.mariadb_container_name, "service_healthy") %}
  {% do c.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

  {% do c.environment.add_env("APP_ENV", "production") %}
  {% do c.environment.add_env("IS_DOCKER", true) %}
  {% do c.environment.add_env("REQUIRE_HTTPS", false) %}
  {% do c.environment.add_env("PHANTOMJS_PDF_GENERATION", false) %}
  {% do c.environment.add_env("PDF_GENERATOR", "snappdf") %}
  {% do c.environment.add_env("FILESYSTEM_DISK", "debian_docker") %}
  {% do c.environment.add_env("SCOUT_DRIVER", none) %}

  {% do c.environment.add_env("CACHE_DRIVER", "redis") %}
  {% do c.environment.add_env("SESSION_DRIVER", "redis") %}
  {% do c.environment.add_env("QUEUE_CONNECTION", "redis") %}
  {% do c.environment.add_env("REDIS_HOST", values.consts.redis_container_name) %}
  {% do c.environment.add_env("REDIS_PASSWORD", values.invoice_ninja.redis_password) %}
  {% do c.environment.add_env("REDIS_PORT", 6379) %}
  {% do c.environment.add_env("REDIS_USERNAME", "default") %}
  {% do c.environment.add_env("REDIS_DB", 0) %}
  {% do c.environment.add_env("REDIS_CACHE_DB", 1) %}

  {% do c.environment.add_env("DB_CONNECTION", "mysql") %}
  {% do c.environment.add_env("DB_HOST", values.consts.mariadb_container_name) %}
  {% do c.environment.add_env("DB_PORT", 3306) %}
  {% do c.environment.add_env("DB_DATABASE", values.consts.db_name) %}
  {% do c.environment.add_env("DB_USERNAME", values.consts.db_user) %}
  {% do c.environment.add_env("DB_PASSWORD", values.invoice_ninja.db_password) %}

  {% do c.environment.add_env("APP_URL", app_url) %}
  {% do c.environment.add_env("APP_KEY", values.invoice_ninja.app_key) %}
  {% do c.environment.add_env("IN_USER_EMAIL", values.invoice_ninja.initial_user_email) %}
  {% do c.environment.add_env("IN_PASSWORD", values.invoice_ninja.initial_user_password) %}

  {% do c.environment.add_user_envs(values.invoice_ninja.additional_envs) %}

  {% do c.add_storage("/app/storage", values.storage.storage) %}
  {% for store in values.storage.additional_storage %}
    {% do c.add_storage(store.mount_path, store) %}
  {% endfor %}
{% endfor %}

{% do c1.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "path": "/health"}) %}
{% do c1.set_command(["--port=%d"|format(values.network.web_port.port_number), "--workers=1", "--log-level=info"]) %}
{% do c1.environment.add_env("LARAVEL_ROLE", "app") %}

{% do worker.set_command(["--verbose", "--sleep=3", "--tries=3", "--max-time=3600"]) %}
{% do worker.depends.add_dependency(values.consts.invoice_ninja_container_name, "service_healthy") %}
{% do worker.healthcheck.set_custom_test("pgrep -f queue:work") %}
{% do worker.environment.add_env("LARAVEL_ROLE", "worker") %}

{% do scheduler.set_command(["--verbose"]) %}
{% do scheduler.depends.add_dependency(values.consts.invoice_ninja_container_name, "service_healthy") %}
{% do scheduler.healthcheck.set_custom_test("pgrep -f schedule:work") %}
{% do scheduler.environment.add_env("LARAVEL_ROLE", "scheduler") %}

{% do c1.add_port(values.network.web_port) %}

{% do perm_container.add_or_skip_action("storage", values.storage.storage, perms_config) %}
{% for store in values.storage.additional_storage %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do worker.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do scheduler.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do mariadb.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

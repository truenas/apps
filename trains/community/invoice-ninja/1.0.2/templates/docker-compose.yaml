{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.invoice_ninja_container_name, "image") %}
{% set worker = tpl.add_container(values.consts.invoice_ninja_worker_container_name, "image") %}
{% set scheduler = tpl.add_container(values.consts.invoice_ninja_scheduler_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set app_url = values.invoice_ninja.app_url.rstrip("/") %}

{% set mariadb_config = {
  "user": values.consts.db_user,
  "root_password": values.invoice_ninja.db_root_password,
  "password": values.invoice_ninja.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.mariadb_data,
} %}
{% set mariadb = tpl.deps.mariadb(
  values.consts.mariadb_container_name, "mariadb_image",
  mariadb_config, perm_container,
) %}

{% set redis_config = {
  "password": values.invoice_ninja.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set envs = [
  ("APP_ENV", "production"),
  ("IS_DOCKER", true),
  ("REQUIRE_HTTPS", false),
  ("PHANTOMJS_PDF_GENERATION", false),
  ("PDF_GENERATOR", "snappdf"),
  ("FILESYSTEM_DISK", "debian_docker"),
  ("SCOUT_DRIVER", none),
  ("SNAPPDF_CHROMIUM_PATH", "/usr/bin/google-chrome-stable"),

  ("CACHE_DRIVER", "redis"),
  ("SESSION_DRIVER", "redis"),
  ("QUEUE_CONNECTION", "redis"),
  ("REDIS_HOST", values.consts.redis_container_name),
  ("REDIS_PASSWORD", values.invoice_ninja.redis_password),
  ("REDIS_PORT", 6379),
  ("REDIS_USERNAME", "default"),
  ("REDIS_DB", 0),
  ("REDIS_CACHE_DB", 1),

  ("DB_CONNECTION", "mysql"),
  ("DB_HOST", values.consts.mariadb_container_name),
  ("DB_PORT", 3306),
  ("DB_DATABASE", values.consts.db_name),
  ("DB_USERNAME", values.consts.db_user),
  ("DB_PASSWORD", values.invoice_ninja.db_password),

  ("APP_URL", app_url),
  ("APP_KEY", values.invoice_ninja.app_key),
  ("IN_USER_EMAIL", values.invoice_ninja.initial_user_email),
  ("IN_PASSWORD", values.invoice_ninja.initial_user_password),
] %}

{% do c1.set_user(0, 0) %}
{% do worker.set_user(0, 0) %}
{% do scheduler.set_user(0, 0) %}

{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID", "NET_BIND_SERVICE"]) %}
{% do worker.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID", "NET_BIND_SERVICE"]) %}
{% do scheduler.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID", "NET_BIND_SERVICE"]) %}

{% do c1.set_command([
  "--admin-port=%d"|format(values.consts.admin_internal_port),
  "--port=%d"|format(values.network.web_port.port_number),
  "--workers=1",
  "--log-level=info",
]) %}
{% do worker.set_command([
  "--verbose",
  "--sleep=3",
  "--tries=3",
  "--max-time=3600",
]) %}
{% do scheduler.set_command([
  "--verbose",
]) %}

{% do c1.configs.add("php.ini", values.consts.php_ini, "/usr/local/etc/php/conf.d/zzz-php.ini") %}
{% do worker.configs.add("php.ini", values.consts.php_ini, "/usr/local/etc/php/conf.d/zzz-php.ini") %}
{% do scheduler.configs.add("php.ini", values.consts.php_ini, "/usr/local/etc/php/conf.d/zzz-php.ini") %}

{% do c1.depends.add_dependency(values.consts.mariadb_container_name, "service_healthy") %}
{% do worker.depends.add_dependency(values.consts.mariadb_container_name, "service_healthy") %}
{% do scheduler.depends.add_dependency(values.consts.mariadb_container_name, "service_healthy") %}

{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do worker.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do scheduler.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

{% do worker.depends.add_dependency(values.consts.invoice_ninja_container_name, "service_healthy") %}
{% do scheduler.depends.add_dependency(values.consts.invoice_ninja_container_name, "service_healthy") %}

{% do c1.healthcheck.set_test("curl", {"port": values.consts.admin_internal_port, "path": "/metrics"}) %}
{% do worker.healthcheck.set_custom_test("pgrep -f queue:work") %}
{% do scheduler.healthcheck.set_custom_test("pgrep -f schedule:work") %}

{% for env in envs %}
  {% do c1.environment.add_env(env[0], env[1]) %}
  {% do worker.environment.add_env(env[0], env[1]) %}
  {% do scheduler.environment.add_env(env[0], env[1]) %}
{% endfor %}

{% do c1.environment.add_env("LARAVEL_ROLE", "app") %}
{% do worker.environment.add_env("LARAVEL_ROLE", "worker") %}
{% do scheduler.environment.add_env("LARAVEL_ROLE", "scheduler") %}

{% do c1.environment.add_user_envs(values.invoice_ninja.additional_envs) %}
{% do worker.environment.add_user_envs(values.invoice_ninja.additional_envs) %}
{% do scheduler.environment.add_user_envs(values.invoice_ninja.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage("/var/www/html/bootstrap/cache", {"type": "anonymous"}) %}
{% do worker.add_storage("/var/www/html/bootstrap/cache", {"type": "anonymous"}) %}
{% do scheduler.add_storage("/var/www/html/bootstrap/cache", {"type": "anonymous"}) %}

{% do c1.add_storage("/var/www/html/storage", values.storage.storage) %}
{% do worker.add_storage("/var/www/html/storage", values.storage.storage) %}
{% do scheduler.add_storage("/var/www/html/storage", values.storage.storage) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do worker.add_storage(store.mount_path, store) %}
  {% do scheduler.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do mariadb.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port.port_number}) %}

{{ tpl.render() | tojson }}

{% import "macros/config.sh" as config_macro %}
{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set pg_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set pg_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/postgres/tmp", "mode": "check", "uid": values.consts.pg_run_as_user, "gid": values.consts.pg_run_as_group}
)) %}
{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}),
  values=values, perm_opts={"mount_path": "/mnt/postgres/data", "mode": "check", "uid": values.consts.pg_run_as_user, "gid": values.consts.pg_run_as_group,}
)) %}
{% for item in pg_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and pg_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": values.consts.config_path}),
  values=values, perm_opts={"mount_path": "/mnt/invidious/config", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/invidious/tmp", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/shared"},
  perm_opts={"mount_path": "/mnt/invidious/shared", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/invidious/dir_%s"|format(loop.index0), "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% set cfg = namespace(x=[
  {"check_tables": true},
  {"database_url": ix_lib.base.postgres.pg_url(
    variant="postgres", host=values.consts.postgres_container_name,
    user=values.consts.db_user, password=values.invidious.db_password,
    dbname=values.consts.db_name
  )},
  {"db.user": values.consts.db_user},
  {"db.password": values.invidious.db_password},
  {"db.dbname": values.consts.db_name},
  {"db.host": values.consts.postgres_container_name},
  {"db.port": 5432},
  {"hmac_key": values.invidious.hmac_secret},
  {"host_binding": "0.0.0.0"},
  {"port": values.network.web_port},
  {"admins": values.invidious.admins},
  {"registration_enabled": values.invidious.registration_enabled},
  {"login_enabled": values.invidious.login_enabled},
  {"captcha_enabled": values.invidious.captcha_enabled},
]) %}

{% if values.invidious.enable_inv_sig_helper %}
  {% do cfg.x.append({"signature_server": "%s:%d" | format(values.consts.sig_helper_container_name, values.consts.internal_sig_helper_port)}) %}
{% endif %}
{% if values.invidious.po_token %}
  {% do cfg.x.append({"po_token": values.invidious.po_token}) %}
{% endif %}
{% if values.invidious.visitor_data %}
  {% do cfg.x.append({"visitor_data": values.invidious.visitor_data}) %}
{% endif %}

configs:
  fetch_db_seed.sh:
    content: {{ config_macro.fetch_db_seed(values=values) | tojson }}
  apply_db_seed.sh:
    content: {{ config_macro.apply_db_seed(values=values) | tojson }}
  config.sh:
    content: {{ config_macro.config(values=values, cfg=cfg.x) | tojson }}

{# Containers #}
services:
{% if values.invidious.enable_inv_sig_helper %}
  {{ values.consts.sig_helper_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="sig_helper_image") }}
    user: {{ "%d:%d" | format(values.consts.inv_sig_helper_run_as_user, values.consts.inv_sig_helper_run_as_group) }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "RUST_LOG": "info",
    }, user=[], values=values) | tojson }}
    init: true
    read_only: true
    command:
      - --tcp
      - {{ "0.0.0.0:%d" | format(values.consts.internal_sig_helper_port) }}
    healthcheck: {{ {"disable": true} | tojson }}
{% endif %}

  {{ values.consts.db_seed_fetch_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="git_image") }}
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    restart: on-failure
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    configs:
      - source: fetch_db_seed.sh
        target: /fetch_db_seed.sh
        mode: 0755
    entrypoint: /fetch_db_seed.sh
    environment: {{ ix_lib.base.environment.envs(app={}, user=[], values=values) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.db_seed_apply_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="postgres_image") }}
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    restart: on-failure
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    depends_on:
      {{ values.consts.postgres_container_name }}:
        condition: service_healthy
      {{ values.consts.db_seed_fetch_container_name }}:
        condition: service_completed_successfully
    configs:
      - source: apply_db_seed.sh
        target: /apply_db_seed.sh
        mode: 0755
    entrypoint: /apply_db_seed.sh
    environment: {{ ix_lib.base.environment.envs(app={
      "POSTGRES_USER": values.consts.db_user,
      "POSTGRES_DB": values.consts.db_name,
      "PGPASSWORD": values.invidious.db_password,
      "PGHOST": values.consts.postgres_container_name,
      "PGPORT": 5432,
    }, user=[], values=values) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.config_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="yq_image") }}
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    restart: on-failure
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    configs:
      - source: config.sh
        target: /setup/config.sh
        mode: 0755
    entrypoint: /setup/config.sh
    depends_on:
      {{ values.consts.db_seed_apply_container_name }}:
        condition: service_completed_successfully
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app={}, user=[], values=values) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.invidious_container_name }}:
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    depends_on:
      {{ values.consts.postgres_container_name }}:
        condition: service_healthy
      {{ values.consts.config_container_name }}:
        condition: service_completed_successfully
    {% if values.invidious.enable_inv_sig_helper %}
      {{ values.consts.sig_helper_container_name }}:
        condition: service_started
    {% endif %}
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.netcat_test(port=values.network.web_port) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "INVIDIOUS_CONFIG_FILE": "%s/config.yaml"|format(values.consts.config_path),
    }, user=values.invidious.additional_envs, values=values) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

  {% set resource_without_gpus = ix_lib.base.utils.copy_dict(values.resources) %}
  {% do resource_without_gpus.pop("gpus", None) %}
  {{ values.consts.postgres_container_name }}: {{ ix_lib.base.postgres.pg_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="postgres_image"),
    "volumes": pg_volume_mounts.items,
    "user": values.consts.pg_run_as_user, "group": values.consts.pg_run_as_group,
    "db_user": values.consts.db_user, "db_name": values.consts.db_name,
    "db_password": values.invidious.db_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      }
    } if perms_dirs.items else {}
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Invidious") | tojson }}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% set state_path = "/var/lib/tailscale" %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.state, **{"mount_path": state_path}),
  values=values, perm_opts={"mount_path": "/mnt/tailscale/state", "mode": "always", "uid": 568, "gid": 568}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"tmpfs", "mount_path": "/var/run/tailscale", "tmpfs_config": {"mode": "0755"} })) %}

{% for store in values.storage.additional_storage %}
  {% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{% if not values.tailscale.userspace %}
  {% set tun_dev = "/dev/net/tun" %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(
    data={"type": "host_path", "mount_path": tun_dev, "host_path_config": {"path": tun_dev, "create_host_path": false} },
  )) %}
{% endif %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ values.consts.tailscale_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if values.tailscale.userspace and perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["NET_ADMIN", "NET_RAW", "SYS_MODULE", "CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("tailscale status") | tojson }}
    {% set args = ix_lib.community.tailscale.util.get_args(values.tailscale) %}
    {% set app_env = {
      "TS_STATE_DIR": state_path,
      "TS_ACCEPT_DNS": values.tailscale.accept_dns,
      "TS_HOSTNAME": values.tailscale.hostname,
      "TS_USERSPACE": values.tailscale.userspace,
      "TS_AUTH_ONCE": values.tailscale.auth_once,
      "TS_AUTHKEY": values.tailscale.auth_key,
      "TS_SOCKET": "/var/run/tailscale/tailscaled.sock",
    } %}
    {% if values.tailscale.hostname and app_env.update({"TS_HOSTNAME": values.tailscale.hostname}) %}{% endif %}
    {% if args and app_env.update({"TS_EXTRA_ARGS": args}) %}{% endif %}
    {% if values.tailscale.tailscaled_args and app_env.update({"TS_TAILSCALED_ARGS": values.tailscale.tailscaled_args|unique|list|join(" ")}) %}{% endif %}
    {% if values.tailscale.advertise_routes and app_env.update({"TS_ADVERTISE_ROUTES": values.tailscale.advertise_routes|unique|list|join(",")}) %}{% endif %}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.tailscale.additional_envs, values=values) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% if values.tailscale.userspace and perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-notes: {{ ix_lib.base.metadata.get_notes("Tailscale") | tojson }}

{#
Don't forget to use double $ for shell variables,
otherwise docker-compose will try to expand them
#}

{% macro process_dir_func() %}
function process_dir() {
  local dir=$$1
  local mode=$$2
  local uid=$$3
  local gid=$$4
  local chmod=$$5
  local is_temporary=$$6

  local fix_owner="false"
  local fix_perms="false"

  if [ ! -d "$$dir" ]; then
    echo "Path [$$dir] does is not a directory, skipping..."
    exit 0
  fi

  if [ "$$is_temporary" = "true" ]; then
    echo "Path [$$dir] is a temporary directory, ensuring it is empty..."
    rm -rf "$$dir/{*,.*}"
  fi

  echo "Current Ownership and Permissions on [$$dir]:"
  echo "chown: $$(stat -c "%u %g" "$$dir")"
  echo "chmod: $$(stat -c "%a" "$$dir")"

  if [ "$$mode" = "always" ]; then
    fix_owner="true"
    fix_perms="true"
  fi

  if [ "$$mode" = "check" ]; then
    if [ $$(stat -c %u "$$dir") -eq $$uid ] && [ $$(stat -c %g "$$dir") -eq $$gid ]; then
      echo "Ownership is correct. Skipping..."
      fix_owner="false"
    else
      echo "Ownership is incorrect. Fixing..."
      fix_owner="true"
    fi

    if [ "$$chmod" = "false" ]; then
      echo "Skipping permissions check, chmod is false"
    elif [ -n "$$chmod" ]; then
      if [ $$(stat -c %a "$$dir") -eq $$chmod ]; then
        echo "Permissions are correct. Skipping..."
        fix_perms="false"
      else
        echo "Permissions are incorrect. Fixing..."
        fix_perms="true"
      fi
    fi
  fi

  if [ "$$fix_owner" = "true" ]; then
    echo "Changing ownership to $$uid:$$gid on: [$$dir]"
    chown -R "$$uid:$$gid" "$$dir"
    echo "Finished changing ownership"
    echo "Ownership after changes:"
    stat -c "%u %g" "$$dir"
  fi

  if [ -n "$$chmod" ] && [ "$$fix_perms" = "true" ]; then
    echo "Changing permissions to $$chmod on: [$$dir]"
    chmod -R "$$chmod" "$$dir"
    echo "Finished changing permissions"
    echo "Permissions after changes:"
    stat -c "%a" "$$dir"
  fi
}
{% endmacro %}

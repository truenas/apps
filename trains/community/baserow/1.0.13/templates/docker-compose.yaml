{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.baserow_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.baserow.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.baserow.postgres_image_selector,
  pg_config, perm_container
) %}

{% set redis_config = {
  "password": values.baserow.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% do c1.set_user(0,0) %}
{% do c1.add_caps(["SETUID", "SETGID", "CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}
{% do c1.healthcheck.set_custom_test("/baserow/backend/docker/docker-entrypoint.sh backend-healthcheck") %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

{% if values.baserow.public_url %}
  {% do c1.environment.add_env("BASEROW_PUBLIC_URL", values.baserow.public_url) %}
{% endif %}

{% do c1.environment.add_env("DATABASE_URL", postgres.get_url("postgres")) %}
{% do c1.environment.add_env("REDIS_URL", redis.get_url("redis")) %}
{% do c1.environment.add_env("SECRET_KEY", values.baserow.secret_key) %}
{% do c1.environment.add_user_envs(values.baserow.additional_envs) %}

{% do c1.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}

{% do c1.add_storage("/baserow/data", values.storage.data) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

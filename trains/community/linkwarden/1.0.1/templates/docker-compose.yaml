{% set tpl = ix_lib.base.render.Render(values) %}

{% set c = tpl.add_container(values.consts.linkwarden_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.linkwarden.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.linkwarden.postgres_image_selector,
  pg_config, perm_container
) %}

{% set meili_config = {"master_key": values.linkwarden.meilisearch_master_key, "volume": values.storage.meili_data} %}
{% set meilisearch = tpl.deps.meilisearch(values.consts.meilisearch_container_name, "meilisearch_image", meili_config, perm_container) %}

{% do c.healthcheck.set_test("curl", {"port": values.network.web_port.port_number}) %}
{% do c.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c.depends.add_dependency(values.consts.meilisearch_container_name, "service_healthy") %}

{% do c.environment.add_env("PORT", values.network.web_port.port_number) %}
{% do c.environment.add_env("DATABASE_URL", postgres.get_url("postgresql")) %}
{% do c.environment.add_env("NEXTAUTH_SECRET", values.linkwarden.nextauth_secret) %}
{% do c.environment.add_env("NEXTAUTH_INTERNAL_URL", "http://localhost:%d/api/v1/auth"|format(values.network.web_port.port_number)) %}
{% do c.environment.add_env("MEILI_MASTER_KEY", values.linkwarden.meilisearch_master_key) %}
{% do c.environment.add_env("MEILI_HOST", meilisearch.get_url()) %}
{% do c.environment.add_user_envs(values.linkwarden.additional_envs) %}

{% do c.add_port(values.network.web_port) %}

{% do c.add_storage("/data/data", values.storage.data) %}

{% for store in values.storage.additional_storage %}
  {% do c.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do meilisearch.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.dockge_container_name, "image") %}
{% do c1.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "KILL", "SETGID", "SETUID", "SETPCAP", "SETFCAP"]) %}
{% do c1.healthcheck.set_custom_test("/app/extra/healthcheck") %}

{% do c1.environment.add_env("NODE_ENV", "production") %}
{% do c1.environment.add_env("DOCKGE_PORT", values.network.web_port) %}
{% do c1.environment.add_env("DOCKGE_DATA_DIR", values.consts.data_path) %}

{% if values.network.certificate_id %}
  {% do c1.environment.add_env("DOCKGE_SSL_KEY", values.consts.ssl_key_path) %}
  {% do c1.environment.add_env("DOCKGE_SSL_CERT", values.consts.ssl_cert_path) %}

  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c1.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}
{% endif %}

{% do c1.environment.add_user_envs(values.dockge.additional_env) %}
{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% do c1.add_docker_socket(read_only=False) %}
{% do c1.add_storage(values.consts.data_path, values.storage.data) %}

{# Note that the DOCKGE_STACKS_DIR (container path) must be the SAME path as the host path #}
{% set stacks_host_path = tpl.funcs.get_host_path(values.storage.stacks) %}
{% set stacks_storage = c1.add_storage(stacks_host_path, values.storage.stacks) %}
{% do c1.environment.add_env("DOCKGE_STACKS_DIR", stacks_host_path) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

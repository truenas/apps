#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "TZ": config.get("TZ", "Etc/UTC"),
        "paperless": {
            "additional_envs": config["paperlessConfig"].get("additionalEnvs", []),
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "redis_password": get_value_from_secret(
                k8s_secrets, "redis-creds", "REDIS_PASSWORD"
            ),
            "secret_key": get_value_from_secret(
                k8s_secrets, "paperless-creds", "PAPERLESS_SECRET_KEY"
            ),
            "admin_user": config["paperlessConfig"]["adminUser"],
            "admin_mail": config["paperlessConfig"]["adminMail"],
            "admin_password": config["paperlessConfig"]["adminPassword"],
            "enable_trash": config["paperlessConfig"]["enableTrash"],
        },
        "network": {
            "web_port": config["paperlessNetwork"].get("webPort", 30070),
        },
        "run_as": {
            "user": config["paperlessID"]["user"],
            "group": config["paperlessID"]["group"],
        },
        "storage": {
            "data": migrate_storage_item(config["paperlessStorage"]["data"]),
            "media": migrate_storage_item(config["paperlessStorage"]["media"]),
            "consume": migrate_storage_item(config["paperlessStorage"]["consume"]),
            "trash": migrate_storage_item(config["paperlessStorage"]["trash"]),
            "postgres_data": migrate_storage_item(config["paperlessStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["paperlessStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.planka_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.planka.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.planka.postgres_image_selector,
  pg_config, perm_container
) %}
{% do c1.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.healthcheck.set_test("wget", {"port": values.network.web_port}) %}

{% do c1.environment.add_env("NODE_ENV", "production") %}
{% do c1.environment.add_env("BASE_URL", values.planka.base_url) %}
{% do c1.environment.add_env("TRUST_PROXY", "1" if values.planka.trust_proxy else "0") %}
{% do c1.environment.add_env("PORT", values.network.web_port) %}
{% do c1.environment.add_env("SECRET_KEY", values.planka.secret_key) %}
{% do c1.environment.add_env("DATABASE_URL", postgres.get_url("postgresql")) %}
{% if values.planka.default_admin_email %}
  {% do c1.environment.add_env("DEFAULT_ADMIN_EMAIL", values.planka.default_admin_email) %}
  {% do c1.environment.add_env("DEFAULT_ADMIN_NAME", values.planka.default_admin_name) %}
  {% do c1.environment.add_env("DEFAULT_ADMIN_USERNAME", values.planka.default_admin_username) %}
  {% do c1.environment.add_env("DEFAULT_ADMIN_PASSWORD", values.planka.default_admin_password) %}
{% endif %}

{% do c1.environment.add_user_envs(values.planka.additional_envs) %}
{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}
{% do c1.add_storage("/app/public/user-avatars", values.storage.avatars) %}
{% do perm_container.add_or_skip_action("user-avatars", values.storage.avatars, perms_config) %}

{% do c1.add_storage("/app/public/project-background-images", values.storage.background_images) %}
{% do perm_container.add_or_skip_action("project-background-images", values.storage.background_images, perms_config) %}

{% do c1.add_storage("/app/private/attachments", values.storage.attachments) %}
{% do perm_container.add_or_skip_action("attachments", values.storage.attachments, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

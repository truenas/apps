#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "planka": {
            "additional_envs": config["plankaConfig"].get("additionalEnvs", []),
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "secret_key": get_value_from_secret(k8s_secrets, "planka", "SECRET_KEY"),
            "default_admin_email": config["plankaConfig"].get("defaultAdminEmail", ""),
            "default_admin_name": config["plankaConfig"].get("defaultAdminName", ""),
            "default_admin_username": config["plankaConfig"].get(
                "defaultAdminUsername", ""
            ),
            "default_admin_password": config["plankaConfig"].get(
                "defaultAdminPassword", ""
            ),
            "base_url": config["plankaConfig"]["baseURL"],
            "trust_proxy": config["plankaConfig"].get("trustProxy", False),
        },
        "network": {
            "web_port": config["plankaNetwork"].get("webPort", 30062),
        },
        "storage": {
            "avatars": migrate_storage_item(config["plankaStorage"]["avatars"]),
            "background_images": migrate_storage_item(
                config["plankaStorage"]["backgroundImages"]
            ),
            "attachments": migrate_storage_item(config["plankaStorage"]["attachments"]),
            "postgres_data": migrate_storage_item(config["plankaStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["plankaStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{% macro setup_js(values) %}
const cfgPath = "{{ values.consts.config_path }}";
const fs = require('fs');

console.log("Starting MeshCentral setup script...");
console.log("Configuration file path: " + cfgPath);

const fileExists = fs.existsSync(cfgPath);
fileExists ? console.log(`File [${cfgPath}] exists, loading...`) : console.log(`File [${cfgPath}] does not exist, creating with defaults...`);
const data = fileExists ? JSON.parse(fs.readFileSync(cfgPath, 'utf8')) : {};

const defaults = [
  [["domains", "", "title"], "TrueNAS MeshCentral"],
  [["domains", "", "newAccounts"], true],
  [["domains", "", "minify"], true],
  [["domains", "", "localSessionRecording"], true],
  [["domains", "", "newAccounts"], true],
];

const globalSettings = [
  [["$schema"], "https://raw.githubusercontent.com/Ylianst/MeshCentral/master/meshcentral-config-schema.json"],
  // Those does not make sense in a container
  [["settings", "selfUpdate"], false],
  [["settings", "cleanNpmCacheOnUpdate"], false],

  [["settings", "postgres"], {}],
  [["settings", "postgres", "user"], "{{ values.consts.db_user }}"],
  [["settings", "postgres", "database"], "{{ values.consts.db_name }}"],
  [["settings", "postgres", "host"], "{{ values.consts.postgres_container_name }}"],
  [["settings", "postgres", "port"], 5432],
  [["settings", "postgres", "password"], "{{ values.meshcentral.db_password }}"],

  [["settings", "cert"], "{{ values.meshcentral.hostname }}"],
  [["settings", "port"], {{ values.network.web_port.port_number }}],
  [["settings", "sessionKey"], "{{ values.meshcentral.session_key }}"],
];

// Apply to all domains (domains.*)
const allDomains = [
  // Disallow admins to update the server from the "My Server" tab
  [["myServer", "Upgrade"], false],
];

function applyValue(keys, value) {
  let obj = data;
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (!obj[key]) obj[key] = {};
    obj = obj[key];
  }

  console.log(`Setting [${keys.map(k => k === "" ? '""' : k).join(".")}] to [${JSON.stringify(value)}]...`);
  obj[keys[keys.length - 1]] = value;
}

if (!fileExists) {
  console.log("Applying default settings...");
  console.log("Those will NOT be applied again on next run. Feel free to update them.");
  for (const [keys, value] of defaults) {
    applyValue(keys, value);
  }
};

console.log("Applying domain settings...");
if (!data["domains"]) data["domains"] = {};
for (const domain of Object.keys(data["domains"])) {
  for (const [keys, value] of allDomains) {
    applyValue(["domains", domain, ...keys], value);
  }
}

console.log("Applying global settings...");
for (const [keys, value] of globalSettings) {
  applyValue(keys, value);
}

fs.writeFileSync(cfgPath, JSON.stringify(data, null, 2));
console.log("Done!\n");
{% endmacro %}

{% macro setup_sh(values) %}
#!/bin/bash

node /ix-setup.js || { echo "Setup script failed!"; exit 1; }
bash /opt/meshcentral/entrypoint.sh || { echo "Entrypoint script failed!"; exit 1; }
{% endmacro %}

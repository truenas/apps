{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.miniflux_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.miniflux.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, values.miniflux.postgres_image_selector, pg_config, perm_container) %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.healthcheck.set_test("wget", {"port": values.network.web_port.port_number, "path": "/healthcheck"}) %}

{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c1.environment.add_env("DATABASE_URL", postgres.get_url("postgres")) %}
{% do c1.environment.add_env("RUN_MIGRATIONS", true) %}
{% do c1.environment.add_env("CREATE_ADMIN", true) %}
{% do c1.environment.add_env("LISTEN_ADDR", ":%d" | format(values.network.web_port.port_number)) %}
{% do c1.environment.add_env("ADMIN_USERNAME", values.miniflux.admin_username) %}
{% do c1.environment.add_env("ADMIN_PASSWORD", values.miniflux.admin_password) %}

{% do c1.environment.add_user_envs(values.miniflux.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "webdav": {
            "auth_type": config["webdavConfig"].get("authType", "none"),
            "username": config["webdavConfig"].get("username", ""),
            "password": config["webdavConfig"].get("password", ""),
            "additional_browser_matches": config["webdavConfig"].get(
                "additionalBrowserMatches", []
            ),
            "additional_envs": config["webdavConfig"].get("additionalEnvs", []),
        },
        "run_as": {
            "user": config["webdavRunAs"].get("user", 666),
            "group": config["webdavRunAs"].get("group", 666),
        },
        "network": {
            "host_network": config["webdavNetwork"].get("hostNetwork", False),
            "enable_http": config["webdavNetwork"].get("http", True),
            "http_port": config["webdavNetwork"].get("httpPort", 30035),
            "enable_https": config["webdavNetwork"].get("https", False),
            "https_port": config["webdavNetwork"].get("httpsPort", 30036),
            "certificate_id": config["webdavNetwork"].get("certificateID", None),
        },
        "storage": {
            "shares": [
                {
                    "enabled": s["enabled"],
                    "name": s["name"],
                    "description": s["description"],
                    "host_path": s["hostPath"],
                    "read_only": s["readOnly"],
                    "fix_permissions": s["fixPermissions"],
                    "max_request_body_size_gb": s["maxRequestBodySizeInGB"],
                }
                for s in config["webdavStorage"]["shares"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{% import "webdav_macros/httpd.conf" as httpd_conf %}
{% import "webdav_macros/webdav_http.conf" as webdav_http %}
{% import "webdav_macros/webdav_https.conf" as webdav_https %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% if not values.network.enable_http and not values.network.enable_https %}
  {% do ix_lib.base.utils.throw_error("Must enable at least one of http or https ports") %}
{% endif %}

{% if values.network.enable_https and not values.network.certificate_id %}
  {% do ix_lib.base.utils.throw_error("Must provide a certificate id if enabling https") %}
{% endif %}

{% set share_names = namespace(x=[]) %}
{% for share in values.storage.shares %}
  {% if not ix_lib.base.utils.match_regex(share.name, "^[a-zA-Z0-9_-]+$") %}
    {% do ix_lib.base.errors.throw_error("Share name must consist only of [Letters(a-z, A-Z), Numbers(0-9), Underscores(_), Dashes(-)], but got [%s]"|format(share.name)) %}
  {% endif %}
  {% do share_names.x.append(share.name) %}
{% endfor %}
{% if share_names.x | length != share_names.x | unique | list | length %}
  {% do ix_lib.base.errors.throw_error("Share names must be unique, but got [%s]"|format(share_names.x | join(", "))) %}
{% endif %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/webdav/tmp", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{# Stores PID file and DavLockDB file #}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "tmpfs", "mount_path": values.consts.pid_base_path, "tmpfs_config": {"mode": "0777", "size": 100} })) %}

{% for share in values.storage.shares %}
  {% set item = {
    "type": "host_path",
    "read_only": share.read_only,
    "auto_permissions": share.fix_permissions,
    "mount_path": "/%s/%s"|format(values.consts.shares_prefix, share.name),
    "host_path_config": {
      "path": share.host_path,
  } } %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=item, values=values,
    perm_opts={"mount_path": "/mnt/webdav/dir_%s"|format(share.name), "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

configs:
  {% if values.network.enable_http %}
  webdav-http-config:
    content: {{ webdav_http.webdav_http(values) | tojson }}
  {% endif %}
  {% if values.network.enable_https %}
  webdav-https-config:
    content: {{ webdav_https.webdav_https(values) | tojson }}
  {% endif %}
  httpd-conf:
    content: {{ httpd_conf.httpd_conf(values) | tojson }}
  {% if values.webdav.auth_type != "none" %}
  htauth:
    content: {{ ix_lib.base.utils.basic_auth(values.webdav.username, values.webdav.password) | tojson }}
  {% endif %}
  {% if values.network.certificate_id %}
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
  {% endif %}

{# Containers #}
services:
  {{ values.consts.webdav_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    configs:
      - source: httpd-conf
        target: {{ values.consts.httpd_conf_path }}
    {% if values.network.enable_http %}
      - source: webdav-http-config
        target: {{ values.consts.webdav_http_config_path }}
    {% endif %}
    {% if values.network.enable_https %}
      - source: webdav-https-config
        target: {{ values.consts.webdav_https_config_path }}
    {% endif %}
    {% if values.webdav.auth_type != "none" %}
      - source: htauth
        target: {{ "%s%s"|format(values.consts.auth_file_base, values.webdav.auth_type) }}
    {% endif %}
    {% if values.network.certificate_id %}
      - source: private
        target: {{ values.consts.ssl_key_path }}
      - source: public
        target: {{ values.consts.ssl_cert_path }}
    {% endif %}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.tcp_test(port=values.network.http_port if values.network.enable_http else values.network.https_port) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.webdav.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      {% if values.network.enable_http %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.http_port, "published": values.network.http_port}) | tojson }}
      {% endif %}
      {% if values.network.enable_https %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.https_port, "published": values.network.https_port}) | tojson }}
      {% endif %}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("WebDAV") | tojson }}

#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "palworld": {
            "additional_envs": config["palworldConfig"].get("additionalEnvs", []),
            "admin_password": config["palworldConfig"]["adminPassword"],
            "server": {
                "name": config["palworldConfig"]["server"]["name"],
                "password": config["palworldConfig"]["server"]["password"],
                "description": config["palworldConfig"]["server"]["description"],
            },
            "backup": {
                "enabled": config["palworldConfig"]["backup"]["enabled"],
                "interval": config["palworldConfig"]["backup"].get("interval", 120),
                "keep": config["palworldConfig"]["backup"].get("keep", 3),
            },
            "game_params": config["palworldConfig"]["gameParams"],
            "game_params_extra": config["palworldConfig"]["gameParamsExtra"],
            "allow_platform": config["palworldConfig"].get("allowPlatform", "Steam"),
            "ini_keys": config["palworldConfig"].get("iniKeys", []),
            "update_public_ip": config["palworldConfig"]["updatePublicIP"],
            "validate": config["palworldConfig"]["validate"],
            "username": config["palworldConfig"].get("username", ""),
            "password": config["palworldConfig"].get("password", ""),
        },
        "network": {
            "host_network": config["palworldNetwork"].get("hostNetwork", False),
            "server_port": config["palworldNetwork"]["serverPort"],
            "rcon_port": config["palworldNetwork"]["rconPort"],
        },
        "run_as": {
            "user": config["palworldID"].get("user", 568),
            "group": config["palworldID"].get("group", 568),
        },
        "storage": {
            "steamcmd": migrate_storage_item(config["palworldStorage"]["steamcmd"]),
            "server": migrate_storage_item(config["palworldStorage"]["server"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["palworldStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

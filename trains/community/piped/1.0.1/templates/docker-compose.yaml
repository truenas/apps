{% set tpl = ix_lib.base.render.Render(values) %}

{% set backend = tpl.add_container(values.consts.backend_container_name, "image") %}
{% set frontend = tpl.add_container(values.consts.frontend_container_name, "frontend_image") %}
{% set bg_helper = tpl.add_container(values.consts.bg_helper_container_name, "bg_helper_image") %}
{% set proxy = tpl.add_container(values.consts.proxy_container_name, "proxy_image") %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{# Postgres #}
{% set pg_config = {"user": values.consts.db_user, "password": values.piped.db_password, "database": values.consts.db_name, "volume": values.storage.postgres_data} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, values.piped.postgres_image_selector, pg_config, perm_container) %}

{# Frontend #}
{% do frontend.set_user(101, 101) %}
{% do frontend.depends.add_dependency(values.consts.backend_container_name, "service_healthy") %}
{% do frontend.healthcheck.set_test("curl", {"port": values.network.frontend_port.port_number, "path": "/robots.txt"}) %}

{% set parsed = tpl.funcs.url_to_dict(values.piped.backend_url, true) %}
{% do frontend.environment.add_env("HTTP_MODE", parsed.scheme) %}
{% do frontend.environment.add_env("BACKEND_HOSTNAME", parsed.netloc) %}
{% do frontend.environment.add_env("HTTP_PORT", values.network.frontend_port.port_number) %}
{% do frontend.environment.add_user_envs(values.piped.additional_envs) %}
{% do frontend.add_port(values.network.frontend_port) %}

{# BG Helper #}
{% do bg_helper.healthcheck.disable() %}

{# Proxy #}
{% do proxy.healthcheck.disable() %}
{% do proxy.environment.add_env("BIND", "0.0.0.0:%d"|format(values.network.proxy_port.port_number)) %}
{% do proxy.add_port(values.network.proxy_port) %}

{# Backend #}
{% do backend.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do backend.healthcheck.set_test("curl", {"port": values.network.backend_port.port_number, "path": "/healthcheck"}) %}

{% do backend.environment.add_env("HIBERNATE__DIALECT", "org.hibernate.dialect.PostgreSQLDialect") %}
{% do backend.environment.add_env("HIBERNATE__CONNECTION__DRIVER_CLASS", "org.postgresql.Driver") %}
{% do backend.environment.add_env("HIBERNATE__CONNECTION__URL", postgres.get_url("jdbc")) %}
{% do backend.environment.add_env("HIBERNATE__CONNECTION__USERNAME", values.consts.db_user) %}
{% do backend.environment.add_env("HIBERNATE__CONNECTION__PASSWORD", values.piped.db_password) %}
{% do backend.environment.add_env("PORT", values.network.backend_port.port_number) %}
{% do backend.environment.add_env("API_URL", values.piped.backend_url) %}
{% do backend.environment.add_env("FRONTEND_URL", values.piped.frontend_url) %}
{% do backend.environment.add_env("PROXY_PART", values.piped.proxy_url) %}
{% do backend.environment.add_env("BG_HELPER_URL", "http://%s:%d"|format(values.consts.bg_helper_container_name, values.consts.bg_helper_port)) %}
{% do backend.environment.add_user_envs(values.piped.additional_envs) %}
{% do backend.add_port(values.network.backend_port) %}

{% for store in values.storage.additional_storage %}
  {% do backend.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.frontend_port) %}

{{ tpl.render() | tojson }}

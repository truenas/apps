#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "terraria": {
            "image_selector": (
                "vanilla_image"
                if config.get("terrariaConfig").get("imageSelector") == "vanillaImage"
                else "image"
            ),
            "world_name": config["terrariaConfig"]["worldName"],
            "world_seed": config["terrariaConfig"].get("worldSeed", ""),
            "world_evil": config["terrariaConfig"]["worldEvil"],
            "world_size": config["terrariaConfig"]["worldSize"],
            "world_difficulty": config["terrariaConfig"]["worldDifficulty"],
            "max_players": config["terrariaConfig"]["maxPlayers"],
            "password": config["terrariaConfig"].get("password", ""),
            "additional_envs": config["terrariaConfig"].get("additionalEnvs", []),
            "secure": config["terrariaConfig"].get("secure", False),
            "force_update": config["terrariaConfig"].get("forceUpdate", False),
            "additional_args": config["terrariaConfig"].get("additionalArgs", []),
        },
        "network": {
            "host_network": config["terrariaNetwork"].get("hostNetwork", False),
            "server_port": config["terrariaNetwork"].get("serverPort", 20910),
        },
        "storage": {
            "world": migrate_storage_item(config["terrariaStorage"]["world"]),
            "plugins": migrate_storage_item(config["terrariaStorage"]["plugins"]),
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

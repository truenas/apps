#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret

ml_image_mapping = {
    "mlImage": "ml_image",
    "mlCudaImage": "ml_cuda_image",
    "mlOpenvinoImage": "ml_openvino_image",
}


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "immich": {
            "additional_envs": config["immichConfig"].get("additionalEnvs", []),
            "enable_ml": config["immichConfig"].get("enableML", False),
            "log_level": config["immichConfig"].get("logLevel", "log"),
            "hugging_face_endpoint": config["immichConfig"].get(
                "huggingFaceEndpoint", ""
            ),
            "ml_image_selector": ml_image_mapping.get(
                config["immichConfig"]["mlImageType"], "ml_image"
            ),
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "redis_password": get_value_from_secret(
                k8s_secrets, "redis-creds", "REDIS_PASSWORD"
            ),
        },
        "network": {
            "web_port": config["immichNetwork"].get("webuiPort", 32400),
        },
        "storage": {
            "library": migrate_storage_item(config["immichStorage"]["library"]),
            "uploads": migrate_storage_item(config["immichStorage"]["uploads"]),
            "thumbs": migrate_storage_item(config["immichStorage"]["thumbs"]),
            "profile": migrate_storage_item(config["immichStorage"]["profile"]),
            "video": migrate_storage_item(config["immichStorage"]["video"]),
            "postgres_data": migrate_storage_item(config["immichStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["immichStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(
            config["resources"], config["immichGPU"], values.get("gpu_choices", {})
        ),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{% from "macros/entrypoint.sh" import entrypoint %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perm_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{% set electrs = tpl.add_container(values.consts.electrs_container_name, "image") %}
{% do electrs.set_user(values.consts.run_as_user, values.consts.run_as_group) %}

{% do electrs.healthcheck.set_test("tcp", {"port": values.network.rpc_port.port_number}) %}

{% for flag in values.electrs.additional_flags %}
  {% for reserved_flag in values.consts.reserved_flags %}
    {% if flag.startswith(reserved_flag) %}
      {% do tpl.funcs.fail("Flag [%s] is reserved and cannot be set." | format(flag)) %}
    {% endif %}
  {% endfor %}
{% endfor %}

{% do electrs.add_extra_host("host.docker.internal", "host-gateway") %}
{% set daemon_ip = "host.docker.internal" if values.electrs.use_installed_bitcoin_app else values.electrs.external_bitcoind_ip %}
{% set commands = namespace(x=[
  "--daemon-p2p-addr=%s:%d" | format(daemon_ip, values.electrs.bitcoind_p2p_port),
  "--daemon-rpc-addr=%s:%d" | format(daemon_ip, values.electrs.bitcoind_rpc_port),
  "--electrum-rpc-addr=0.0.0.0:%d" | format(values.network.rpc_port.port_number),
]) %}

{% for flag in values.electrs.additional_flags %}
  {% do commands.x.append(flag) %}
{% endfor %}

{% do electrs.configs.add("entrypoint.sh", entrypoint(values), "/entrypoint.sh", "0755") %}
{% do electrs.set_entrypoint(["/entrypoint.sh"]) %}
{% do electrs.set_command(commands.x) %}

{% for store in values.storage.additional_storage %}
  {% do electrs.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perm_config) %}
{% endfor %}

{% do electrs.add_storage(values.consts.data_dir_path, values.storage.data) %}
{% do perm_container.add_or_skip_action("electrs_data", values.storage.data, perm_config) %}

{% if not values.network.host_network %}
  {% do electrs.add_port(values.network.rpc_port) %}
{% endif %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do electrs.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{{ tpl.render() | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.kimai_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{% set mariadb_config = {
  "user": values.consts.db_user,
  "root_password": values.kimai.db_root_password,
  "password": values.kimai.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.mariadb_data,
} %}
{% set mariadb = tpl.deps.mariadb(values.consts.mariadb_container_name, "mariadb_image", mariadb_config, perm_container) %}

{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID"]) %}
{% do c1.healthcheck.set_test("curl", {"port": values.consts.internal_web_port}) %}
{% do c1.environment.add_env("APP_ENV", "prod") %}
{% do c1.environment.add_env("TIMEZONE", values.TZ) %}
{% do c1.environment.add_env("APP_SECRET", values.kimai.app_secret) %}
{% do c1.environment.add_env("ADMINMAIL", values.kimai.admin_mail) %}
{% do c1.environment.add_env("ADMINPASS", values.kimai.admin_password) %}
{% do c1.environment.add_env(
  "DATABASE_URL", "mysql://%s:%s@%s:%d/%s?&charset=utf8mb4&ssl=false"|format(
    values.consts.db_user, values.kimai.db_password,
    values.consts.mariadb_container_name, 3306,
    values.consts.db_name
)) %}
{% do c1.environment.add_user_envs(values.kimai.additional_envs) %}

{% do c1.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}

{% do c1.add_storage("/opt/kimai/var/data", values.storage.data) %}
{% do c1.add_storage("/opt/kimai/var/plugins", values.storage.plugins) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do mariadb.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "linkding": {
            "additional_envs": config["linkdingConfig"].get("additionalEnvs", []),
            "image_selector": (
                "plus_image"
                if config["linkdingConfig"]["imageSelector"] == "plusImage"
                else "image"
            ),
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "username": config["linkdingConfig"].get("username", ""),
            "password": config["linkdingConfig"].get("password", ""),
            "disable_background_tasks": config["linkdingConfig"].get(
                "disableBackgroundTasks", False
            ),
            "disable_url_validation": config["linkdingConfig"].get(
                "disableUrlValidation", False
            ),
            "enable_auth_proxy": config["linkdingConfig"].get("enableAuthProxy", False),
            "auth_proxy_username_header": config["linkdingConfig"].get(
                "authProxyUsernameHeader", ""
            ),
            "auth_proxy_logout_url": config["linkdingConfig"].get(
                "authProxyLogoutUrl", ""
            ),
            "csrf_trusted_origins": config["linkdingConfig"].get(
                "csrfTrustedOrigins", []
            ),
        },
        "run_as": {
            "user": config["linkdingRunAs"].get("user", 568),
            "group": config["linkdingRunAs"].get("group", 568),
        },
        "network": {
            "web_port": config["linkdingNetwork"].get("webPort", 32400),
        },
        "storage": {
            "data": migrate_storage_item(config["linkdingStorage"]["data"]),
            "postgres_data": migrate_storage_item(config["linkdingStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["linkdingStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

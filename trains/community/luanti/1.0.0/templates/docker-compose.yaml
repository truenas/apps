{% from "macros/init.sh" import init %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.luanti_container_name, "image") %}
{% set setup = tpl.add_container(values.consts.init_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{% do setup.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do setup.healthcheck.disable() %}
{% do setup.remove_devices() %}
{% do setup.deploy.resources.set_profile("low") %}
{% do setup.restart.set_policy("on-failure", 1) %}
{% do setup.configs.add("init.sh", init(values), "/init.sh", "0755") %}
{% do setup.set_entrypoint(["/bin/sh", "/init.sh"]) %}

{% do c1.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do c1.depends.add_dependency(values.consts.init_container_name, "service_completed_successfully") %}
{% do c1.healthcheck.set_test("netcat", {"port": values.network.game_port.port_number, "udp": true}) %}
{% do c1.set_command([
  "--gameid", values.luanti.map_name,
  "--config", "%s/minetest.conf"|format(values.consts.config_dir),
  "--port", values.network.game_port.port_number,
]) %}

{% do c1.environment.add_user_envs(values.luanti.additional_envs) %}
{% do c1.add_port(values.network.game_port, {"protocol": "udp"}) %}

{% do c1.add_storage(values.consts.data_dir, values.storage.data) %}
{% do setup.add_storage(values.consts.data_dir, values.storage.data) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}

{% do c1.add_storage(values.consts.config_dir, values.storage.config) %}
{% do setup.add_storage(values.consts.config_dir, values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{{ tpl.render() | tojson }}

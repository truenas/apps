#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "briefkasten": {
            "additional_envs": config["briefkastenConfig"].get("additionalEnvs", []),
            "nextauth_url": config["briefkastenConfig"].get("url"),
            "nextauth_secret": get_value_from_secret(
                k8s_secrets, "briefkasten", "NEXTAUTH_SECRET"
            ),
            "postgres_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "smtp": {
                "enabled": config["briefkastenConfig"]["smtp"]["enabled"],
                "server": config["briefkastenConfig"]["smtp"].get("server", ""),
                "from": config["briefkastenConfig"]["smtp"].get("from", ""),
            },
            "github": {
                "enabled": config["briefkastenConfig"]["github"]["enabled"],
                "id": config["briefkastenConfig"]["github"].get("id", ""),
                "secret": config["briefkastenConfig"]["github"].get("secret", ""),
            },
            "google": {
                "enabled": config["briefkastenConfig"]["google"]["enabled"],
                "id": config["briefkastenConfig"]["google"].get("id", ""),
                "secret": config["briefkastenConfig"]["google"].get("secret", ""),
            },
            "keycloak": {
                "enabled": config["briefkastenConfig"]["keycloak"]["enabled"],
                "name": config["briefkastenConfig"]["keycloak"].get("name", ""),
                "id": config["briefkastenConfig"]["keycloak"].get("id", ""),
                "secret": config["briefkastenConfig"]["keycloak"].get("secret", ""),
                "issuer": config["briefkastenConfig"]["keycloak"].get("issuer", ""),
            },
            "authentik": {
                "enabled": config["briefkastenConfig"]["authentik"]["enabled"],
                "name": config["briefkastenConfig"]["authentik"].get("name", ""),
                "id": config["briefkastenConfig"]["authentik"].get("id", ""),
                "secret": config["briefkastenConfig"]["authentik"].get("secret", ""),
                "issuer": config["briefkastenConfig"]["authentik"].get("issuer", ""),
            },
        },
        "network": {
            "web_port": config["briefkastenNetwork"].get("webPort", 32400),
        },
        "storage": {
            "postgres_data": migrate_storage_item(config["briefkastenStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["briefkastenStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

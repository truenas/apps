name: Test App Install

on:
  pull_request: {}

jobs:
  changed-files:
    name: Get changed apps
    runs-on: ubuntu-latest
    outputs:
      changed-apps: ${{ steps.changed-apps.outputs.changed-apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get changed files
        id: changed-files-json
        uses: tj-actions/changed-files@v44
        with:
          json: true
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.2"
      - name: Get changed apps
        id: changed-apps
        env:
          CHANGED_FILES: ${{ steps.changed-files-json.outputs.all_changed_files }}
        run: |
          echo $CHANGED_FILES
          out=$(go run ./tools/get-changed-apps/cmd/main.go)
          echo "changed-apps=${out}" >> $GITHUB_OUTPUT
          echo $out

  test-apps:
    name: Test apps
    needs: changed-files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.changed-files.outputs.changed-apps) }}
    steps:
      - name: Environment Information
        run: |
          echo "====== Docker Info ======"
          docker info
          echo "========================="
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.2"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run app
        shell: bash
        run: |
          for values_file in ix-dev/${{ matrix.app }}/ci/*.yaml; do
            echo "Testing [$values_file]"

            docker run --rm -v ${pwd}:/workspace ghcr.io/truenas/apps_validation:latest \
              /usr/bin/catalog_templating render --path /workspace/ix-dev/${{ matrix.app }} \
              --values /workspace/${values_file}

            PROJECT_NAME="$(openssl rand -hex 12)"
            docker_compose_project="docker compose -p $PROJECT_NAME -f ix-dev/${{ matrix.app }}/templates/rendered/docker-compose.yaml"

            echo "Printing docker compose config (parsed compose)"
            ${docker_compose_project} config

            # Note that this will report failure if a container exits with a zero exit code too.
            # https://github.com/docker/compose/issues/10596
            ${docker_compose_project} up -d --wait --wait-timeout 600
            exit_code=$?

            # Print logs (for debugging)
            ${docker_compose_project} logs

            # Print docker compose processes (for debugging)
            ${docker_compose_project} ps --all

            if [ $exit_code -ne 0 ]; then
              echo "Failed to start container(s)"

              failed=$(${docker_compose_project} ps --status exited --all --format json)
              for container in $(echo $failed | jq -r '.[].ID'); do
                echo "Container [$container] exited. Printing Inspect Data"
                docker container inspect $container | jq
              done

              exit 1
            fi

            ${docker_compose_project} down --remove-orphans --volumes
            ${docker_compose_project} rm --force --stop --volumes

            # Clean up the test directory used by the app
            echo "Cleaning up /mnt/test directory"
            sudo rm -r /mnt/test || echo "Failed to clean up /mnt/test"
          done

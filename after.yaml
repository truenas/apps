name: b2eb26c9d4493ad8aab0592940d982be
services:
  config:
    cap_drop:
      - ALL
    configs:
      - source: config.sh
        target: /setup/config.sh
        mode: 493
    depends_on:
      db_seed_apply:
        condition: service_completed_successfully
        required: true
    deploy:
      resources:
        limits:
          cpus: 1
          memory: "536870912"
    entrypoint:
      - /setup/config.sh
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: mikefarah/yq:4.44.5
    networks:
      default: null
    platform: linux/amd64
    restart: on-failure:1
    security_opt:
      - no-new-privileges
    user: 1000:1000
    volumes:
      - type: bind
        source: /opt/tests/invidious/config
        target: /config
        bind:
          propagation: rprivate
          create_host_path: true
      - type: volume
        source: shared
        target: /shared
        volume: {}
  db_seed_apply:
    cap_drop:
      - ALL
    configs:
      - source: apply_db_seed.sh
        target: /apply_db_seed.sh
        mode: 493
    depends_on:
      db_seed_fetch:
        condition: service_completed_successfully
        required: true
      postgres:
        condition: service_healthy
        required: true
    deploy:
      resources:
        limits:
          cpus: 1
          memory: "536870912"
    entrypoint:
      - /apply_db_seed.sh
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      PGHOST: postgres
      PGPASSWORD: password
      PGPORT: "5432"
      POSTGRES_DB: kemal
      POSTGRES_USER: kemal
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: postgres:15.9
    networks:
      default: null
    platform: linux/amd64
    restart: on-failure:1
    security_opt:
      - no-new-privileges
    user: 1000:1000
    volumes:
      - type: bind
        source: /opt/tests/invidious/config
        target: /config
        bind:
          propagation: rprivate
          create_host_path: true
      - type: volume
        source: shared
        target: /shared
        volume: {}
  db_seed_fetch:
    cap_drop:
      - ALL
    configs:
      - source: fetch_db_seed.sh
        target: /fetch_db_seed.sh
        mode: 493
    depends_on:
      permissions:
        condition: service_completed_successfully
        required: true
    deploy:
      resources:
        limits:
          cpus: 1
          memory: "536870912"
    entrypoint:
      - /fetch_db_seed.sh
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: bitnami/git:latest
    networks:
      default: null
    platform: linux/amd64
    restart: on-failure:1
    security_opt:
      - no-new-privileges
    user: 1000:1000
    volumes:
      - type: bind
        source: /opt/tests/invidious/config
        target: /config
        bind:
          propagation: rprivate
          create_host_path: true
      - type: volume
        source: shared
        target: /shared
        volume: {}
  invidious:
    cap_drop:
      - ALL
    depends_on:
      config:
        condition: service_completed_successfully
        required: true
      permissions:
        condition: service_completed_successfully
        required: true
      postgres:
        condition: service_healthy
        required: true
      signature-helper:
        condition: service_started
        required: true
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "4294967296"
    environment:
      INVIDIOUS_CONFIG_FILE: /config/config.yaml
      NVIDIA_VISIBLE_DEVICES: void
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      test:
        - CMD-SHELL
        - nc -z -w 1 127.0.0.1 8080
      timeout: 5s
      interval: 10s
      retries: 30
      start_period: 10s
    image: quay.io/invidious/invidious:2.20241110.0
    networks:
      default: null
    platform: linux/amd64
    ports:
      - mode: ingress
        host_ip: 0.0.0.0
        target: 8080
        published: "8080"
        protocol: tcp
    restart: unless-stopped
    security_opt:
      - no-new-privileges
    user: 1000:1000
    volumes:
      - type: bind
        source: /opt/tests/invidious/config
        target: /config
        bind:
          propagation: rprivate
          create_host_path: true
  permissions:
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
    cap_drop:
      - ALL
    configs:
      - source: permissions_actions_data
        target: /script/actions.json
        mode: 320
      - source: permissions_run_script
        target: /script/run.py
        mode: 448
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "1073741824"
    entrypoint:
      - python3
      - /script/run.py
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: python:3.13.0-slim-bookworm
    networks:
      default: null
    platform: linux/amd64
    restart: on-failure:1
    security_opt:
      - no-new-privileges
    user: "0:0"
    volumes:
      - type: bind
        source: /opt/tests/invidious/config
        target: /mnt/permission/config
        bind:
          propagation: rprivate
          create_host_path: true
      - type: bind
        source: /opt/tests/invidious/postgres_data
        target: /mnt/permission/postgres_postgres_data
        bind:
          propagation: rprivate
          create_host_path: true
      - type: volume
        source: shared
        target: /mnt/permission/shared
        volume: {}
  postgres:
    cap_drop:
      - ALL
    depends_on:
      permissions:
        condition: service_completed_successfully
        required: true
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "4294967296"
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      POSTGRES_DB: kemal
      POSTGRES_PASSWORD: password
      POSTGRES_PORT: "5432"
      POSTGRES_USER: kemal
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -h 127.0.0.1 -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB
      timeout: 5s
      interval: 10s
      retries: 30
      start_period: 10s
    image: postgres:15.9
    networks:
      default: null
    platform: linux/amd64
    restart: unless-stopped
    security_opt:
      - no-new-privileges
    user: 999:999
    volumes:
      - type: bind
        source: /opt/tests/invidious/postgres_data
        target: /var/lib/postgresql/data
        bind:
          propagation: rprivate
          create_host_path: true
  signature-helper:
    cap_drop:
      - ALL
    command:
      - --tcp
      - 0.0.0.0:12999
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "4294967296"
    environment:
      NVIDIA_VISIBLE_DEVICES: void
      RUST_LOG: info
      TZ: Etc/UTC
      UMASK: "002"
      UMASK_SET: "002"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: quay.io/invidious/inv-sig-helper:latest
    init: true
    networks:
      default: null
    platform: linux/amd64
    read_only: true
    restart: unless-stopped
    security_opt:
      - no-new-privileges
    user: 10001:10001
networks:
  default:
    name: b2eb26c9d4493ad8aab0592940d982be_default
volumes:
  shared:
    name: b2eb26c9d4493ad8aab0592940d982be_shared
configs:
  apply_db_seed.sh:
    name: b2eb26c9d4493ad8aab0592940d982be_apply_db_seed.sh
    content: |
      #!/bin/sh

      touch "/config/config.yaml"
      if [ -f "/config/config.yaml" ]; then
        echo "Found existing config file [/config/config.yaml]."
        echo "Treating it as an existing installation. Skipping step [apply_db_seed]..."

        echo "If you are re-installing, please remove the file and restart the app."
        echo "After it is up and running, you can update the config file to your needs and restart the app."
        exit 0
      fi

      echo "Applying seed..."
      cd /shared/seed/docker
      ./init-invidious-db.sh || { echo "Failed to apply seed"; exit 1; }
      echo "Done!"
  config.sh:
    name: b2eb26c9d4493ad8aab0592940d982be_config.sh
    content: |
      #!/bin/sh
      if [ ! -f "/config/config.yaml" ]; then
        echo "File [/config/config.yaml] does not exist. Copying default config..."
        cp -v "/shared/config.example.yaml" "/config/config.yaml"
      else
        echo "File [/config/config.yaml] exists!"
      fi

      echo "Updating [/config/config.yaml] file..."
      echo ''
      echo "Updating [check_tables] key..."
      yq -i '.check_tables = true' "/config/config.yaml"
      echo "New value for [check_tables]: $$(yq '.check_tables' "/config/config.yaml")"
      echo ''
      echo "Updating [database_url] key..."
      yq -i '.database_url = "postgres://kemal:password@postgres:5432/kemal?sslmode=disable"' "/config/config.yaml"
      echo "New value for [database_url]: $$(yq '.database_url' "/config/config.yaml")"
      echo ''
      echo "Updating [db.user] key..."
      yq -i '.db.user = "kemal"' "/config/config.yaml"
      echo "New value for [db.user]: $$(yq '.db.user' "/config/config.yaml")"
      echo ''
      echo "Updating [db.password] key..."
      yq -i '.db.password = "password"' "/config/config.yaml"
      echo "New value for [db.password]: $$(yq '.db.password' "/config/config.yaml")"
      echo ''
      echo "Updating [db.dbname] key..."
      yq -i '.db.dbname = "kemal"' "/config/config.yaml"
      echo "New value for [db.dbname]: $$(yq '.db.dbname' "/config/config.yaml")"
      echo ''
      echo "Updating [db.host] key..."
      yq -i '.db.host = "postgres"' "/config/config.yaml"
      echo "New value for [db.host]: $$(yq '.db.host' "/config/config.yaml")"
      echo ''
      echo "Updating [db.port] key..."
      yq -i '.db.port = 5432' "/config/config.yaml"
      echo "New value for [db.port]: $$(yq '.db.port' "/config/config.yaml")"
      echo ''
      echo "Updating [hmac_key] key..."
      yq -i '.hmac_key = "secret"' "/config/config.yaml"
      echo "New value for [hmac_key]: $$(yq '.hmac_key' "/config/config.yaml")"
      echo ''
      echo "Updating [host_binding] key..."
      yq -i '.host_binding = "0.0.0.0"' "/config/config.yaml"
      echo "New value for [host_binding]: $$(yq '.host_binding' "/config/config.yaml")"
      echo ''
      echo "Updating [port] key..."
      yq -i '.port = 8080' "/config/config.yaml"
      echo "New value for [port]: $$(yq '.port' "/config/config.yaml")"
      echo ''
      echo "Updating [admins] key..."
      yq -i '.admins = ["admin@example.com", "admin2@example.com"]' "/config/config.yaml"
      echo "New value for [admins]: $$(yq '.admins' "/config/config.yaml")"
      echo ''
      echo "Updating [registration_enabled] key..."
      yq -i '.registration_enabled = true' "/config/config.yaml"
      echo "New value for [registration_enabled]: $$(yq '.registration_enabled' "/config/config.yaml")"
      echo ''
      echo "Updating [login_enabled] key..."
      yq -i '.login_enabled = true' "/config/config.yaml"
      echo "New value for [login_enabled]: $$(yq '.login_enabled' "/config/config.yaml")"
      echo ''
      echo "Updating [captcha_enabled] key..."
      yq -i '.captcha_enabled = true' "/config/config.yaml"
      echo "New value for [captcha_enabled]: $$(yq '.captcha_enabled' "/config/config.yaml")"
      echo ''
      echo "Updating [signature_server] key..."
      yq -i '.signature_server = "signature-helper:12999"' "/config/config.yaml"
      echo "New value for [signature_server]: $$(yq '.signature_server' "/config/config.yaml")"
      echo ''
      echo "Updating [po_token] key..."
      yq -i '.po_token = "token"' "/config/config.yaml"
      echo "New value for [po_token]: $$(yq '.po_token' "/config/config.yaml")"
      echo ''
      echo "Updating [visitor_data] key..."
      yq -i '.visitor_data = "other-token"' "/config/config.yaml"
      echo "New value for [visitor_data]: $$(yq '.visitor_data' "/config/config.yaml")"
      echo "Done!"
  fetch_db_seed.sh:
    name: b2eb26c9d4493ad8aab0592940d982be_fetch_db_seed.sh
    content: |
      #!/bin/sh

      touch "/config/config.yaml"
      if [ -f "/config/config.yaml" ]; then
        echo "Found existing config file [/config/config.yaml]."
        echo "Treating it as an existing installation. Skipping step [fetch_db_seed]..."

        echo "If you are re-installing, please remove the file and restart the app."
        echo "After it is up and running, you can update the config file to your needs and restart the app."
        exit 0
      fi

      mkdir -p /shared/seed
      cd /shared/seed

      echo "Fetching seed..."
      git init || { echo "Failed to initialize git repo"; exit 1; }
      git remote add invidious https://github.com/iv-org/invidious.git || { echo "Failed to add remote"; exit 1; }
      git fetch invidious || { echo "Failed to fetch remote"; exit 1; }
      # Get the following directories: config, docker
      git checkout invidious/master -- config docker || { echo "Failed to checkout"; exit 1; }
      echo "Fetched seed successfully"

      mv -fv config/config.example.yml /shared/config.example.yaml || { echo "Failed to move config"; exit 1; }
      mv -fv config docker || { echo "Failed to move files"; exit 1; }
      echo "Done!"
  permissions_actions_data:
    name: b2eb26c9d4493ad8aab0592940d982be_permissions_actions_data
    content: '[{"mount_path": "/mnt/permission/postgres_postgres_data", "is_temporary": false, "identifier": "postgres_postgres_data", "mode": "check", "uid": 999, "gid": 999, "chmod": null}, {"mount_path": "/mnt/permission/shared", "is_temporary": true, "identifier": "shared", "mode": "check", "uid": 1000, "gid": 1000, "chmod": null}, {"mount_path": "/mnt/permission/config", "is_temporary": false, "identifier": "config", "mode": "check", "uid": 1000, "gid": 1000, "chmod": null}]'
  permissions_run_script:
    name: b2eb26c9d4493ad8aab0592940d982be_permissions_run_script
    content: |
      #!/usr/bin/env python3

      import os
      import json
      import time
      import shutil

      with open("/script/actions.json", "r") as f:
          actions_data = json.load(f)

      if not actions_data:
          # If this script is called, there should be actions data
          raise ValueError("No actions data found")

      def fix_perms(path, chmod):
          print(f"Changing permissions to {chmod} on: [{path}]")
          os.chmod(path, int(chmod, 8))
          print("Permissions after changes:")
          print_chmod_stat()

      def fix_owner(path, uid, gid):
          print(f"Changing ownership to {uid}:{gid} on: [{path}]")
          os.chown(path, uid, gid)
          print("Ownership after changes:")
          print_chown_stat()

      def print_chown_stat():
          curr_stat = os.stat(action["mount_path"])
          print(f"Ownership: [{curr_stat.st_uid}:{curr_stat.st_gid}]")

      def print_chmod_stat():
          curr_stat = os.stat(action["mount_path"])
          print(f"Permissions: [{oct(curr_stat.st_mode)[3:]}]")

      def print_chown_diff(curr_stat, uid, gid):
          print(f"Ownership: wanted [{uid}:{gid}], got [{curr_stat.st_uid}:{curr_stat.st_gid}].")

      def print_chmod_diff(curr_stat, mode):
          print(f"Permissions: wanted [{mode}], got [{oct(curr_stat.st_mode)[3:]}].")

      def perform_action(action):
          start_time = time.time()
          print(f"=== Applying configuration on volume with identifier [{action['identifier']}] ===")

          if not os.path.isdir(action["mount_path"]):
              print(f"Path [{action['mount_path']}] is not a directory, skipping...")
              return

          if action["is_temporary"]:
              print(f"Path [{action['mount_path']}] is a temporary directory, ensuring it is empty...")
              for item in os.listdir(action["mount_path"]):
                  item_path = os.path.join(action["mount_path"], item)

                  # Exclude the safe directory, where we can use to mount files temporarily
                  if os.path.basename(item_path) == "ix-safe":
                      continue
                  if os.path.isdir(item_path):
                      shutil.rmtree(item_path)
                  else:
                      os.remove(item_path)

          if not action["is_temporary"] and os.listdir(action["mount_path"]):
              print(f"Path [{action['mount_path']}] is not empty, skipping...")
              return

          print(f"Current Ownership and Permissions on [{action['mount_path']}]:")
          curr_stat = os.stat(action["mount_path"])
          print_chown_diff(curr_stat, action["uid"], action["gid"])
          print_chmod_diff(curr_stat, action["chmod"])
          print("---")

          if action["mode"] == "always":
              fix_owner(action["mount_path"], action["uid"], action["gid"])
              if not action["chmod"]:
                  print("Skipping permissions check, chmod is falsy")
              else:
                  fix_perms(action["mount_path"], action["chmod"])
              return

          elif action["mode"] == "check":
              if curr_stat.st_uid != action["uid"] or curr_stat.st_gid != action["gid"]:
                  print("Ownership is incorrect. Fixing...")
                  fix_owner(action["mount_path"], action["uid"], action["gid"])
              else:
                  print("Ownership is correct. Skipping...")

              if not action["chmod"]:
                  print("Skipping permissions check, chmod is falsy")
              else:
                  if oct(curr_stat.st_mode)[3:] != action["chmod"]:
                      print("Permissions are incorrect. Fixing...")
                      fix_perms(action["mount_path"], action["chmod"])
                  else:
                      print("Permissions are correct. Skipping...")

          print(f"Time taken: {(time.time() - start_time) * 1000:.2f}ms")
          print(f"=== Finished applying configuration on volume with identifier [{action['identifier']}] ==")
          print()

      if __name__ == "__main__":
          start_time = time.time()
          for action in actions_data:
              perform_action(action)
          print(f"Total time taken: {(time.time() - start_time) * 1000:.2f}ms")
x-notes: |
  # Welcome to TrueNAS SCALE

  Thank you for installing <app_name>!

  ## Documentation

  Documentation for <app_name> can be found at https://www.truenas.com/docs.

  ## Bug reports

  If you find a bug in this app, please file an issue at
  https://ixsystems.atlassian.net or https://github.com/truenas/apps

  ## Feature requests or improvements

  If you find a feature request for this app, please file an issue at
  https://ixsystems.atlassian.net or https://github.com/truenas/apps
x-portals:
  - host: 0.0.0.0
    name: Web UI
    path: /
    port: 8080
    scheme: http


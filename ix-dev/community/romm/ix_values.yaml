images:
  image:
    repository: ghcr.io/rommapp/romm
    tag: 4.1.3
  postgres_17_image:
    repository: postgres
    tag: "17.6"
  redis_image:
    repository: valkey/valkey
    tag: 8.1.3
  postgres_upgrade_image:
    repository: ixsystems/postgres-upgrade
    tag: 1.0.3

consts:
  init_container_name: init
  romm_container_name: romm
  perms_container_name: permissions
  postgres_container_name: postgres
  redis_container_name: redis
  base_path: /romm
  db_user: postgres
  db_name: postgres
  internal_web_port: 8080
  notes_body: |
    Check out the [Quick Start Guide](https://github.com/rommapp/romm/wiki/Quick-Start-Guide)
    and [general documentation](https://github.com/rommapp/romm/wiki) for more information.

  init_script: |
    #!/bin/sh
    set -e

    if [ -f /romm/config/config.yml ]; then
      echo "Config file found, skipping..."
      exit 0
    fi
    echo "No config file found, creating one..."

    cat > /romm/config/config.yml <<EOF
    # This is a generic example of a configuration file
    # Rename this file to `config.yml`, copy it to a `config` folder, and mount that folder as per the docker-compose.example.yml
    # Only uncomment the lines you want to use/modify, or add new ones where needed

    exclude:
      # Exclude platforms to be scanned
      platforms: [] # ['my_excluded_platform_1', 'my_excluded_platform_2']

      # Exclude roms or parts of roms to be scanned
      roms:
        # Single file games section.
        # Will not apply to files that are in sub-folders (multi-disc roms, games with updates, DLC, patches, etc.)
        single_file:
          # Exclude all files with certain extensions to be scanned
          extensions: [] # ['xml', 'txt']

          # Exclude matched file names to be scanned.
          # Supports unix filename pattern matching
          # Can also exclude files by extension
          names: [] # ['info.txt', '._*', '*.nfo']

        # Multi files games section
        # Will apply to files that are in sub-folders (multi-disc roms, games with updates, DLC, patches, etc.)
        multi_file:
          # Exclude matched 'folder' names to be scanned (RomM identifies folders as multi file games)
          names: [] # ['my_multi_file_game', 'DLC']

          # Exclude files within sub-folders.
          parts:
            # Exclude matched file names to be scanned from multi file roms
            # Keep in mind that RomM doesn't scan folders inside multi files games,
            # so there is no need to exclude folders from inside of multi files games.
            names: [] # ['data.xml', '._*'] # Supports unix filename pattern matching

            # Exclude all files with certain extensions to be scanned from multi file roms
            extensions: [] # ['xml', 'txt']

    system:
      # Asociate different platform names to your current file system platform names
      # [your custom platform folder name]: [RomM platform name]
      # In this example if you have a 'gc' folder, RomM will treat it like the 'ngc' folder and if you have a 'psx' folder, RomM will treat it like the 'ps' folder
      platforms: {} # { gc: 'ngc', psx: 'ps' }

      # Asociate one platform to it's main version
      versions: {} # { naomi: 'arcade' }

    # The folder name where your roms are located
    filesystem: {} # { roms_folder: 'roms' } For example if your folder structure is /home/user/library/roms_folder
    EOF
    cat /romm/config/config.yml

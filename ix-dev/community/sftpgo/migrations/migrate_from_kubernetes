#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "sftpgo": {
            "image_selector": (
                "plugins_image"
                if config["sftpgoConfig"]["imageSelector"] == "pluginsImage"
                else "image"
            ),
            "stop_grace_period": config["sftpgoConfig"].get("graceTime", 60),
            "additional_envs": config["sftpgoConfig"].get("additionalEnvs", []),
        },
        "run_as": {
            "user": config["sftpgoRunAs"].get("user", 568),
            "group": config["sftpgoRunAs"].get("group", 568),
        },
        "network": {
            "host_network": config["sftpgoNetwork"].get("hostNetwork", False),
            "web_port": config["sftpgoNetwork"].get("webPort", 20910),
            "certificate_id": config["sftpgoNetwork"].get("certificateId", None),
            "webdavd_services": [
                {
                    "enabled": svc["enabled"],
                    "port": svc["port"],
                }
                for svc in config["sftpgoNetwork"]["webdavdServices"]
            ],
            "sftpd_services": [
                {
                    "enabled": svc["enabled"],
                    "port": svc["port"],
                }
                for svc in config["sftpgoNetwork"]["sftpdServices"]
            ],
            "ftpd_services": [
                {
                    "enabled": svc["enabled"],
                    "port": svc["port"],
                }
                for svc in config["sftpgoNetwork"]["ftpdServices"]
            ],
            "ftpd_passive_port_range": {
                "start": config["sftpgoNetwork"]
                .get("ftpdPassivePortRange", {})
                .get("start", 50000),
                "end": config["sftpgoNetwork"]
                .get("ftpdPassivePortRange", {})
                .get("end", 50001),
            },
        },
        "storage": {
            "config": migrate_storage_item(config["sftpgoStorage"]["config"]),
            "data": migrate_storage_item(config["sftpgoStorage"]["data"]),
            "backups": migrate_storage_item(config["sftpgoStorage"]["backups"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["sftpgoStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{% macro setup_js(values) %}
const cfgPath = "{{ values.consts.config_path }}";
const fs = require('fs');

let data = {};
if (!fs.existsSync(cfgPath)) {
  console.log(`File [${cfgPath}] does not exist, creating with defaults...`);
  data = {
    "domains": {
      "": {
        "title": "TrueNAS MeshCentral",
        "newAccounts": true,
        "minify": true,
        "localSessionRecording": true
      }
    }
  };
} else {
  console.log(`File [${cfgPath}] exists, loading...`);
  data = JSON.parse(fs.readFileSync(cfgPath, 'utf8'));
}

console.log(`Updating [${cfgPath}] file...`);

data["$schema"] = "https://raw.githubusercontent.com/Ylianst/MeshCentral/master/meshcentral-config-schema.json";

if (!data["settings"]) data["settings"] = {};

console.log("Configuring PostgreSQL database connection...");
data["settings"]["postgres"] = {};
data["settings"]["postgres"]["user"] = "{{ values.consts.db_user }}";
data["settings"]["postgres"]["database"] = "{{ values.consts.db_name }}";
data["settings"]["postgres"]["host"] = "{{ values.consts.postgres_container_name }}";
data["settings"]["postgres"]["port"] = 5432;
data["settings"]["postgres"]["password"] = "{{ values.meshcentral.db_password }}";

console.log("Configuring port...");
data["settings"]["port"] = {{ values.network.web_port.port_number }};
console.log("Configuring session key...");
data["settings"]["sessionKey"] = "{{ values.meshcentral.session_key }}";

console.log("Disabling self-update...");
data["settings"]["selfUpdate"] = false;
console.log("Disabling NPM cache cleaning on update...");
data["settings"]["cleanNpmCacheOnUpdate"] = false;

console.log("Disallow admins to update the server from the \"My Server\" tab...");
for (const domain of Object.keys(data["domains"])) {
  const domainData = data["domains"][domain];
  if (!data["domains"][domain]["myServer"]) data["domains"][domain]["myServer"] = {};
  data["domains"][domain]["myServer"]["Upgrade"] = false;
}

fs.writeFileSync(cfgPath, JSON.stringify(data, null, 2));
console.log("Done!\n\n");
{% endmacro %}

{% macro setup_sh(values) %}
#!/bin/bash

node /ix-setup.js || { echo "Setup script failed!"; exit 1; }
bash /opt/meshcentral/entrypoint.sh || { echo "Entrypoint script failed!"; exit 1; }
{% endmacro %}

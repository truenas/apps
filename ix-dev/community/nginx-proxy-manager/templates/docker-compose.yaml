{% set npm_container_name = "npm" %}
{% set npm_image = "jc21/nginx-proxy-manager:2.11.3" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% set data_path = "/data" %}

{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": data_path}), ix_volumes=values.ix_volumes)) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.certs, **{"mount_path": "/etc/letsencrypt"}), ix_volumes=values.ix_volumes)) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ npm_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ npm_image }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% set caps=ix_lib.base.security.get_caps(add=["SETUID", "SETGID", "CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts(drop=["no-new-privileges"]) | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("/bin/check-health") | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "TZ": values.TZ,
      "PUID": values.run_as.user,
      "PGID": values.run_as.group,
      "DISABLE_IPV6": true,
      "DB_SQLITE_FILE": "%s/database.sqlite"|format(data_path),
    }, user=values.npm.additional_envs) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 80, "published": values.network.http_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 81, "published": values.network.web_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 443, "published": values.network.https_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

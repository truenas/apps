{% from "macros/nginx.conf.jinja" import nginx_conf %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% set proto = "https" if values.network.certificate_id else "http" %}
{% set c1 = tpl.add_container(values.consts.logseq_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.healthcheck.set_test("wget", {"port": values.network.web_port, "path": "/health", "scheme": proto}) %}
{% do c1.environment.add_user_envs(values.logseq.additional_envs) %}
{% do c1.configs.add("nginx.conf", nginx_conf(values), "/etc/nginx/conf.d/default.conf") %}
{% if values.network.certificate_id %}
  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c1.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}
{% endif %}

{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% set nginx_cache_config = {"type": "temporary", "volume_config": {"volume_name": "nginx-cache"}} %}
{% set tmp_perms_config = dict(perms_config) %}
{% do c1.add_storage("/var/cache/nginx", nginx_cache_config) %}
{% do perm_container.add_or_skip_action("nginx-cache", nginx_cache_config, tmp_perms_config) %}

{% set nginx_run_config = {"type": "temporary", "volume_config": {"volume_name": "nginx-run"}} %}
{% do c1.add_storage("/var/run", nginx_run_config) %}
{% do perm_container.add_or_skip_action("nginx-run", nginx_run_config, tmp_perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port, "scheme": proto}) %}

{{ tpl.render() | tojson }}

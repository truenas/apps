{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.affine_container_name, "image") %}
{% set migrations = tpl.add_container(values.consts.migrations_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.affine.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.affine.postgres_image_selector,
  pg_config, perm_container
) %}

{% set redis_config = {
  "password": values.affine.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set envs = {
  "AFFINE_SERVER_PORT": values.network.web_port.port_number,
  "REDIS_SERVER_HOST": values.consts.redis_container_name,
  "REDIS_SERVER_PORT": 6379,
  "REDIS_SERVER_PASSWORD": values.affine.redis_password,
  "AFFINE_SERVER_EXTERNAL_URL": values.affine.external_url,
  "DATABASE_URL": postgres.get_url("postgresql"),
} %}

{# Migrations #}
{# {% do migrations.set_user(values.consts.run_as_user, values.consts.run_as_group) %} #}
{% do migrations.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do migrations.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do migrations.restart.set_policy("on-failure", 1) %}
{% do migrations.healthcheck.disable() %}
{% do migrations.deploy.resources.set_profile("low") %}
{% do migrations.remove_devices() %}
{% do migrations.set_command(['/bin/sh', '-c', 'node ./scripts/self-host-predeploy.js']) %}

{% for key, value in envs.items() %}
  {% do migrations.environment.add_env(key, value) %}
{% endfor %}
{% do migrations.environment.add_user_envs(values.affine.additional_envs) %}

{% do migrations.add_storage(values.consts.uploads_path, values.storage.uploads) %}
{% do migrations.add_storage(values.consts.config_path, values.storage.config) %}

{# Application #}
{# {% do c1.set_user(values.consts.run_as_user, values.consts.run_as_group) %} #}
{# {% do c1.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "path": "/api/heartbeat"}) %} #}
{% do c1.healthcheck.disable() %}

{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.migrations_container_name, "service_completed_successfully") %}

{% for key, value in envs.items() %}
  {% do c1.environment.add_env(key, value) %}
{% endfor %}
{% do c1.environment.add_user_envs(values.affine.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage(values.consts.uploads_path, values.storage.uploads) %}
{% do c1.add_storage(values.consts.config_path, values.storage.config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port.port_number}) %}

{{ tpl.render() | tojson }}

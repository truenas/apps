{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.arm_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID",]) %}
{% do c1.healthcheck.set_test("curl", {"host": "$(hostname)", "port": values.consts.internal_web_port}) %}

{% if values.arm.cd_devices %}{% do c1.add_group(24) %}{% endif %}
{% for cd in values.arm.cd_devices %}
  {% do c1.devices.add_device(cd.host_device, cd.container_device) %}
{% endfor %}

{% do c1.environment.add_env("ARM_UID", values.run_as.user) %}
{% do c1.environment.add_env("ARM_GID", values.run_as.group) %}
{% do c1.environment.add_user_envs(values.arm.additional_envs) %}

{% do c1.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}

{% do c1.add_storage("/home/arm", values.storage.home) %}
{% do perm_container.add_or_skip_action("home", values.storage.home, perms_config) %}

{% do c1.add_storage("/home/arm/music", values.storage.music) %}
{% do perm_container.add_or_skip_action("music", values.storage.music, perms_config) %}

{% do c1.add_storage("/home/arm/logs", values.storage.logs) %}
{% do perm_container.add_or_skip_action("logs", values.storage.logs, perms_config) %}

{% do c1.add_storage("/home/arm/media", values.storage.media) %}
{% do perm_container.add_or_skip_action("media", values.storage.media, perms_config) %}

{% do c1.add_storage("/etc/arm/config", values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port, {"port": values.consts.internal_web_port if values.network.host_network else None}) %}

{{ tpl.render() | tojson }}

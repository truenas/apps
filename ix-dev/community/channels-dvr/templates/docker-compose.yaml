{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.plex_container_name, values.plex.image_selector) %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perm_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.set_user(0, 0) %}
{% do c1.healthcheck.set_custom_test("/healthcheck.sh") %}
{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID", "KILL"]) %}

{% if not values.network.host_network %}
  {% do c1.ports.add_port(values.network.web_port, values.consts.internal_web_port) %}
{% endif %}

{% do c1.add_storage("/data", values.storage.data) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perm_config) %}

{% do c1.add_storage("/config", values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perm_config) %}

{% set static_log_options = {"volume_config": {"volume_name": "plex-logs"}} %}
{% set logs_storage = dict(values.storage.logs, **static_log_options) %}
{% do c1.add_storage("/config/Library/Application Support/Plex Media Server/Logs", logs_storage) %}
{% do perm_container.add_or_skip_action("logs", logs_storage, perm_config) %}

{% set static_transcode_options = {"volume_config": {"volume_name": "plex-transcodes"}} %}
{% set transcodes_storage = dict(values.storage.transcode, **static_transcode_options) %}
{% do c1.add_storage("/transcode", transcodes_storage) %}
{% do perm_container.add_or_skip_action("transcode", transcodes_storage, perm_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perm_config) %}
{% endfor %}

{% do c1.environment.add_env("PLEX_UID", values.run_as.user) %}
{% do c1.environment.add_env("PLEX_GID", values.run_as.group) %}
{% do c1.environment.add_env("PLEX_CLAIM", values.plex.claim_token) %}
{% do c1.environment.add_env("ALLOWED_NETWORKS", values.plex.allowed_networks | join(",")) %}
{% do c1.environment.add_user_envs(values.plex.additional_envs) %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.consts.internal_web_port if values.network.host_network else values.network.web_port, "path": "/web"}) %}

{{ tpl.render() | tojson }}

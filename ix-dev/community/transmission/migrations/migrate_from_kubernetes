#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item

TRANSMISSION_KEY = "TRANSMISSION__"


def get_mapped_key(key):
    if key == "TRANSMISSION__WATCH_FORCE_GENERIC":
        return "watch-dir-force-generic"

    return key.replace(TRANSMISSION_KEY, "").replace("_", "-").lower()


def get_mapped_value(value):
    if value.lower() in ["true", "false"]:
        return value.lower()

    return value


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    storage = {
        "config": migrate_storage_item(config["transmissionStorage"]["config"]),
        "enable_incomplete_dir": config["transmissionStorage"].get(
            "enableIncompleteDir", False
        ),
        "downloads_complete": migrate_storage_item(
            config["transmissionStorage"]["downloadsComplete"]
        ),
        "additional_storage": [
            migrate_storage_item(item, include_read_only=True)
            for item in config["transmissionStorage"]["additionalStorages"]
        ],
    }
    storage["downloads_complete"]["mount_path"] = config["transmissionStorage"][
        "downloadsDir"
    ]
    if config["transmissionStorage"].get("enableIncompleteDir", False):
        storage["downloads_incomplete"] = migrate_storage_item(
            config["transmissionStorage"]["downloadsIncomplete"]
        )
        storage["downloads_incomplete"]["mount_path"] = config["transmissionStorage"][
            "incompleteDir"
        ]

    additional_config = []
    additional_env = []
    for item in config["transmissionConfig"].get("additionalEnvs", []):
        if item.get("name", "").startswith(TRANSMISSION_KEY):
            key = get_mapped_key(item["name"])
            additional_config.append(
                {"key": key, "value": get_mapped_value(item["value"])}
            )
        else:
            additional_env.append({"name": item["name"], "value": item["value"]})

    new_values = {
        "transmission": {
            "additional_envs": additional_env,
            "additional_config": additional_config,
        },
        "run_as": {
            "user": config["transmissionRunAs"].get("user", 568),
            "group": config["transmissionRunAs"].get("group", 568),
        },
        "network": {
            "host_network": config["transmissionNetwork"].get("hostNetwork", False),
            "web_port": config["transmissionNetwork"]["webPort"],
            "peer_port": config["transmissionNetwork"]["peerPort"],
        },
        "storage": storage,
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

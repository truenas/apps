{% from "macros/global/perms/container.yaml.jinja" import perms_container %}

{% set perms_container_name = "permissions" %}
{% set unifi_container_name = "unifi" %}
{% set unifi_image = "goofball222/unifi:8.2.93" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% set user_id = 999 %}
{% set group_id = 999 %}
{% set ssl_key_path = "/usr/lib/unifi/cert/privkey.pem" %}
{% set ssl_cert_path = "/usr/lib/unifi/cert/cert.pem" %}

{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/usr/lib/unifi/data"}),
  ix_volumes=values.ix_volumes, perm_opts={"mount_path": "/mnt/unifi/data", "mode": "check", "uid": user_id, "gid": group_id}
)) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/usr/lib/unifi/logs"})) %}
{# Mounted secrets are combined into a java keystore at startup, this makes it writeable #}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/usr/lib/unifi/cert"})) %}

{% for store in values.storage.additional_storage %}
  {% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes,
  perm_opts={"mount_path": "/mnt/unifi/dir_%s"|format(loop.index0), "mode": "check", "uid": user_id, "gid": group_id}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ixCertificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ixCertificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ unifi_container_name }}:
    user: {{ "%d:%d" | format(user_id, group_id) }}
    image: {{ unifi_image }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ ssl_key_path }}
      - source: public
        target: {{ ssl_cert_path }}
    {% endif %}
    {% if perms_dirs.items %}
    depends_on:
      {{ perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("/usr/local/bin/docker-healthcheck.sh") | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "TZ": values.TZ,
      "DB_MONGO_LOCAL": true,
      "RUN_CHOWN": false,
      "RUNAS_UID0": false,
      "UNIFI_HTTP_PORT": values.network.web_http_port,
      "UNIFI_HTTPS_PORT": values.network.web_https_port,
      "PORTAL_HTTP_PORT": values.network.portal_http_port,
      "PORTAL_HTTPS_PORT": values.network.portal_https_port,
    }, user=values.unifi.additional_envs) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_https_port, "published": values.network.web_https_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.portal_https_port, "published": values.network.portal_https_port}) | tojson }}
      {% if values.network.enable_web_http %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_http_port, "published": values.network.web_http_port}) | tojson }}
      {% endif %}
      {% if values.network.enable_portal_http %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.portal_http_port, "published": values.network.portal_http_port}) | tojson }}
      {% endif %}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ perms_container_name }}:
    {{ perms_container(items=perms_dirs.items) | indent(4) }}
    volumes:
      {% for item in perms_mounts.items %}
      - {{ item | tojson }}
      {% endfor %}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

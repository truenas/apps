{% from "macros/global/perms/container.yaml.jinja" import perms_container %}

{% set init_container_name = "init" %}
{% set pg_container_name = "postgres" %}
{% set perms_container_name = "permissions" %}
{% set briefkasten_container_name = "briefkasten" %}

{% set briefkasten_image = "ndom91/briefkasten:latest" %}
{% set pg_image = "postgres:15" %}

{% set pg_user = "briefkasten" %}
{% set pg_database = "briefkasten" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set pg_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the postgres volume mounts #}
{% set pg_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% set run_user = 1001 %}
{% set run_group = 1001 %}
{% set pg_run_user = 999 %}
{% set pg_run_group = 999 %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes,
    perm_opts={"mount_path": "/mnt/briefkasten/dir_%s"|format(loop.index0), "mode": "check", "uid": run_user, "gid": run_group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}),
  ix_volumes=values.ix_volumes, perm_opts={"mount_path": "/mnt/postgres/data", "mode": "check", "uid": pg_run_user, "gid": pg_run_group}
)) %}

{% for item in pg_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and pg_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}
{% set app_env = {
  "DATABASE_URL": ix_lib.base.postgres.pg_url(
    variant="postgres", host=pg_container_name, user=pg_user,
    password=values.briefkasten.postgres_password, dbname=pg_database
  ),
  "NEXTAUTH_SECRET": values.briefkasten.nextauth_secret,
  "NEXTAUTH_URL": values.briefkasten.nextauth_url,
  "PORT": values.network.web_port,
  "NODE_ENV": "production",
  "NEXTAUTH_URL_INTERNAL": "http://127.0.0.1:%d"|format(values.network.web_port),
} %}
{% do app_env.update({
  "SMTP_HOST": values.briefkasten.smtp.server,
  "SMTP_FROM": values.briefkasten.smtp.from,
}) if values.briefkasten.smtp.enabled else {} %}
{% do app_env.update({
  "GITHUB_ID": values.briefkasten.github.id,
  "GITHUB_SECRET": values.briefkasten.github.secret,
} if values.briefkasten.github.enabled else {}) %}
{% do app_env.update({
  "GOOGLE_ID": values.briefkasten.google.id,
  "GOOGLE_SECRET": values.briefkasten.google.secret,
}) if values.briefkasten.google.enabled else {} %}
{% do app_env.update({
  "KEYCLOAK_NAME": values.briefkasten.keycloak.name,
  "KEYCLOAK_ID": values.briefkasten.keycloak.id,
  "KEYCLOAK_SECRET": values.briefkasten.keycloak.secret,
  "KEYCLOAK_ISSUER": values.briefkasten.keycloak.issuer,
}) if values.briefkasten.keycloak.enabled else {} %}
{% do app_env.update({
  "AUTHENTIK_NAME": values.briefkasten.authentik.name,
  "AUTHENTIK_ID": values.briefkasten.authentik.id,
  "AUTHENTIK_SECRET": values.briefkasten.authentik.secret,
  "AUTHENTIK_ISSUER": values.briefkasten.authentik.issuer,
}) if values.briefkasten.authentik.enabled else {} %}

{# Containers #}
services:
  {{ init_container_name }}:
    image: {{ briefkasten_image }}
    user: {{ "%d:%d" | format(run_user, run_group) }}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512m
    depends_on:
      {{ pg_container_name }}:
        condition: service_healthy
    entrypoint:
      - /bin/sh
      - -c
    command:
      - |
        echo "Migrating database"
        pnpm db:push || (echo "DB migration failed..." && exit 1)
        echo "DB migration successful. Application will now start"
        exit 0
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.briefkasten.additional_envs) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {{ briefkasten_container_name }}:
    user: {{ "%d:%d" | format(run_user, run_group) }}
    image: {{ briefkasten_image }}
    restart: unless-stopped
    links:
      - {{ pg_container_name }}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    depends_on:
      {{ pg_container_name }}:
        condition: service_healthy
      {{ init_container_name }}:
        condition: service_completed_successfully
    {% if perms_dirs.items %}
      {{ perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.http_test(port=values.network.web_port, path="/") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.briefkasten.additional_envs) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ perms_container_name }}:
    {{ perms_container(items=perms_dirs.items) | indent(4) }}
    volumes:
      {% for item in perms_mounts.items %}
      - {{ item | tojson }}
      {% endfor %}
  {% endif %}

  {{ pg_container_name }}: {{ ix_lib.base.postgres.pg_container(data={
    "image": pg_image,
    "volumes": pg_volume_mounts.items,
    "user": pg_run_user, "group": pg_run_group,
    "db_user": pg_user, "db_name": pg_database,
    "db_password": values.briefkasten.postgres_password,
    "dns_opt": values.network.dns_opts, "resources": values.resources,
    "depends_on": {
      perms_container_name: {
        "condition": "service_completed_successfully"
      }
    }
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

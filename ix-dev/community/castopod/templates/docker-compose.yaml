{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set mariadb_storage_items = namespace(items=[]) %}
{% set redis_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set web_volume_mounts = namespace(items=[]) %}
{% set mariadb_volume_mounts = namespace(items=[]) %}
{% set redis_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/var/www/castopod/public/media"}), values=values)) %}
{% do web_volume_mounts.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/var/www/html/media"}), values=values).vol_mount) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do mariadb_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/mariadb/tmp", "mode": "check", "uid": values.consts.mariadb_run_user, "gid": values.consts.mariadb_run_group}
)) %}
{% do mariadb_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.mariadb_data, **{"mount_path": "/var/lib/mysql"}),
  values=values, perm_opts={"mount_path": "/mnt/mariadb/data", "mode": "check", "uid": values.consts.mariadb_run_user, "gid": values.consts.mariadb_run_group,}
)) %}
{% for item in mariadb_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and mariadb_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do redis_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/redis/tmp", "mode": "check", "uid": values.consts.redis_run_user, "gid": values.consts.redis_run_group}
)) %}
{% do redis_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/bitnami/redis/data"},
  perm_opts={"mount_path": "/mnt/redis/data", "mode": "check", "uid": values.consts.redis_run_user, "gid": values.consts.redis_run_group}
)) %}
{% for item in redis_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and redis_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ values.consts.castopod_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    platform: linux/amd64
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    depends_on:
      {{ values.consts.mariadb_container_name }}:
        condition: service_healthy
      {{ values.consts.redis_container_name }}:
        condition: service_healthy
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.tcp_test(port=values.consts.internal_api_port) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "CP_ANALYTICS_SALT": values.castopod.analytics_salt,
      "CP_DATABASE_HOSTNAME": values.consts.mariadb_container_name,
      "CP_DATABASE_NAME": values.consts.db_name,
      "CP_DATABASE_USERNAME": values.consts.db_user,
      "CP_DATABASE_PASSWORD": values.castopod.db_password,
      "CP_CACHE_HANDLER": "redis",
      "CP_REDIS_HOST": values.consts.redis_container_name,
      "CP_REDIS_PASSWORD": values.castopod.redis_password,
      "CP_REDIS_PORT": 6379,
      "CP_REDIS_DATABASE": 0,
      "CP_TIMEOUT": values.castopod.web_timeout,
      "CP_MAX_BODY_SIZE": "%dM" | format(values.castopod.web_max_body_size),
      "CP_PHP_MEMORY_LIMIT": "%dM" | format(values.castopod.php_memory_limit),
      "CP_BASEURL": values.castopod.base_url,
      "CP_MEDIAURL": values.castopod.base_url,
      "CP_ENABLE_2FA": values.castopod.enable_2fa,
      "CP_DISABLE_HTTPS": "1" if values.castopod.disable_https_redirect else "0",
    }, user=values.castopod.additional_envs, values=values) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.castopod_web_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="web_image") }}
    restart: unless-stopped
    platform: linux/amd64
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    depends_on:
      {{ values.consts.castopod_container_name }}:
        condition: service_healthy
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(port=values.consts.internal_web_port, path="/health") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "CP_TIMEOUT": values.castopod.web_timeout,
      "CP_APP_HOSTNAME": values.consts.castopod_container_name,
      "CP_MAX_BODY_SIZE": "%dM" | format(values.castopod.web_max_body_size),
    }, user=values.castopod.additional_envs, values=values) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_web_port, "published": values.network.web_port}) | tojson }}
    volumes: {{ web_volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

  {% set resource_without_gpus = ix_lib.base.utils.copy_dict(values.resources) %}
  {% do resource_without_gpus.pop("gpus", None) %}
  {{ values.consts.mariadb_container_name }}: {{ ix_lib.base.mariadb.mariadb_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="mariadb_image"),
    "volumes": mariadb_volume_mounts.items,
    "user": values.consts.mariadb_run_user, "group": values.consts.mariadb_run_group,
    "db_user": values.consts.db_user, "db_name": values.consts.db_name,
    "db_password": values.castopod.db_password,
    "db_root_password": values.castopod.db_root_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      } if perms_dirs.items else {}
    }
  }) | tojson }}

  {{ values.consts.redis_container_name }}: {{ ix_lib.base.redis.redis_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="redis_image"),
    "volumes": redis_volume_mounts.items,
    "user": values.consts.redis_run_user, "group": values.consts.redis_run_group,
    "password": values.castopod.redis_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      }
    }
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([
  {"port": values.network.web_port},
  {
    "name": "Install Portal" if values.get("ix_context", {}).get("is_install", False) else "Admin Portal",
    "port": values.network.web_port,
    "path": "/cp-install" if values.get("ix_context", {}).get("is_install", False) else "/cp-admin"
  },
]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Castopod") | tojson }}

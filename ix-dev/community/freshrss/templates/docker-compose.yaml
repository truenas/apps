{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.fresh_rss_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.fresh_rss.db_user,
  "password": values.fresh_rss.db_password,
  "database": values.fresh_rss.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, "postgres_image", pg_config, perm_container) %}

{% do c1.set_user(0, 0) %}
{% do c1.add_caps(["CHOWN", "SETGID", "SETUID"]) %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.healthcheck.set_test("http", {"port": values.network.web_port, "path": "/i/"}) %}

{% do c1.environment.add_env("FRESHRSS_ENV", "production") %}
{% do c1.environment.add_env("LISTEN", values.network.web_port) %}
{% do c1.environment.add_env("DATA_PATH", values.consts.data_path) %}
{% do c1.environment.add_env("CRON_MIN", values.fresh_rss.cron_min) %}
{% do c1.environment.add_env("FRESHRSS_USER", [
  "--user %s"|format(values.fresh_rss.default_admin_user),
  "--password %s"|format(values.fresh_rss.default_admin_password)
]|join("\n")) %}
{% do c1.environment.add_env("FRESHRSS_INSTALL", [
  "--default-user %s"|format(values.fresh_rss.default_admin_user),
  "--db-type pgsql",
  "--db-base %s"|format(values.fresh_rss.db_name),
  "--db-host %s"|format(values.consts.postgres_container_name),
  "--db-user %s"|format(values.fresh_rss.db_user),
  "--db-password %s"|format(values.fresh_rss.db_password),
]|join("\n")) %}
{% do c1.environment.add_user_envs(values.fresh_rss.additional_envs) %}

{% do c1.add_storage(values.consts.data_path, values.storage.data) %}
{% do c1.add_storage("/var/www/FreshRSS/extensions", values.storage.extensions) %}
{% do c1.add_storage("/.cache", {"type":"anonymous"}) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

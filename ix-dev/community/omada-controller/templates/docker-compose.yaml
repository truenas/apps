{% set omada_container_name = "omada" %}
{% set omada_image = "mbentley/omada-controller:5.13" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% set ssl_path = "/cert" %}
{% set ssl_key_name = "tls.key" %}
{% set ssl_cert_name = "tls.crt" %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/opt/tplink/EAPController/data"}), ix_volumes=values.ix_volumes)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.logs, **{"mount_path": "/opt/tplink/EAPController/logs"}), ix_volumes=values.ix_volumes)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ omada_container_name }}:
    image: {{ omada_image }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ "%s/%s" | format(ssl_path, ssl_key_name) }}
      - source: public
        target: {{ "%s/%s" | format(ssl_path, ssl_cert_name) }}
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("/healthcheck.sh") | tojson }}
    {% set app_env = {
      "TZ": values.TZ,
      "PUID": values.run_as.user,
      "PGID": values.run_as.group,
      "PUSERNAME": "omada",
      "PGROUP": "omada",
      "MANAGE_HTTP_PORT": values.network.manage_http_port,
      "MANAGE_HTTPS_PORT": values.network.manage_https_port,
      "PORTAL_HTTP_PORT": values.network.portal_http_port,
      "PORTAL_HTTPS_PORT": values.network.portal_https_port,
      "PORT_APP_DISCOVERY": values.network.app_discovery_port,
      "PORT_DISCOVERY": values.network.discovery_port,
      "PORT_MANAGER_V1": values.network.manager_v1_port,
      "PORT_MANAGER_V2": values.network.manager_v2_port,
      "PORT_ADOPT_V1": values.network.adopt_v1_port,
      "PORT_UPGRADE_V1": values.network.upgrade_v1_port,
    } %}
    {% if values.network.certificate_id and app_env.update({
      "SSL_CERT_NAME": ssl_cert_name,
      "SSL_KEY_NAME": ssl_key_name,
    }) %}{% endif %}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.omada.additional_envs) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.manage_http_port, "published": values.network.manage_http_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.manage_https_port, "published": values.network.manage_https_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.portal_http_port, "published": values.network.portal_http_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.portal_https_port, "published": values.network.portal_https_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.app_discovery_port, "published": values.network.app_discovery_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.discovery_port, "published": values.network.discovery_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.manager_v1_port, "published": values.network.manager_v1_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.manager_v2_port, "published": values.network.manager_v2_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.adopt_v1_port, "published": values.network.adopt_v1_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.upgrade_v1_port, "published": values.network.upgrade_v1_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

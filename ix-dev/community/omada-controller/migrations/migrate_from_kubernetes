#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "TZ": config["TZ"],
        "omada": {
            "additional_envs": config["omadaConfig"].get("additionalEnvs", []),
        },
        "network": {
            "host_network": config["omadaNetwork"]["hostNetwork"],
            "certificate_id": config["omadaNetwork"].get("certificateID"),
            "manage_http_port": config["omadaNetwork"]["manageHttpPort"],
            "manage_https_port": config["omadaNetwork"]["manageHttpsPort"],
            "portal_http_port": config["omadaNetwork"]["portalHttpPort"],
            "portal_https_port": config["omadaNetwork"]["portalHttpsPort"],
            "app_discovery_port": config["omadaNetwork"]["appDiscoveryPort"],
            "discovery_port": config["omadaNetwork"]["discoveryPort"],
            "manager_v1_port": config["omadaNetwork"]["managerV1Port"],
            "manager_v2_port": config["omadaNetwork"]["managerV2Port"],
            "adopt_v1_port": config["omadaNetwork"]["adoptV1Port"],
            "upgrade_v1_port": config["omadaNetwork"]["upgradeV1Port"],
        },
        "run_as": {
            "user": config["omadaID"]["user"],
            "group": config["omadaID"]["group"],
        },
        "storage": {
            "data": migrate_storage_item(config["omadaStorage"]["data"]),
            "logs": migrate_storage_item(config["omadaStorage"]["logs"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["omadaStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

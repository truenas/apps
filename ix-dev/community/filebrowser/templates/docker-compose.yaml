{% from "macros/global/perms/container.yaml.jinja" import perms_container %}

{% set perms_container_name = "permissions" %}
{% set init_container_name = "init" %}
{% set filebrowser_container_name = "filebrowser" %}
{% set filebrowser_image = "filebrowser/filebrowser:v2.30.0" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% set config_path = "/config" %}
{% set data_path = "/data" %}
{% set ssl_cert_path = "%s/certs/tls.crt" | format(config_path) %}
{% set ssl_key_path = "%s/certs/tls.key" | format(config_path) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": config_path}),
  ix_volumes=values.ix_volumes, perm_opts={"mount_path": "/mnt/filebrowser/config", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% if not values.storage.additional_storage %}
  {% do ix_lib.base.utils.throw_error("Expected atleast 1 [storage.additional_storage] to be set") %}
{% endif %}

{% for store in values.storage.additional_storage %}
  {% set mount_path = "%s/%s"|format(data_path, store.mount_path)|replace("//", "/") %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(store, **{"mount_path": mount_path}), ix_volumes=values.ix_volumes,
  perm_opts={"mount_path": "/mnt/filebrowser/dir_%s"|format(loop.index0), "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ init_container_name }}:
    image: {{ filebrowser_image }}
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512m
    {% if perms_dirs.items %}
    depends_on:
      {{ perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    entrypoint:
      - sh
      - -c
    command:
      - |
        if [ ! -f {{ config_path }}/filebrowser.json ]; then
          echo "Filebrowser config file does not exist. Creating an empty one..."
          echo '{}' > {{ config_path }}/filebrowser.json
        fi
    volumes: {{ volume_mounts.items | tojson }}
  {{ filebrowser_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ filebrowser_image }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ ssl_key_path }}
      - source: public
        target: {{ ssl_cert_path }}
    {% endif %}
    depends_on:
      {{ init_container_name }}:
        condition: service_completed_successfully
    {% if perms_dirs.items %}
      {{ perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    command:
      - --config
      - "{{ config_path }}/filebrowser.json"
      - --database
      - "{{ config_path }}/filebrowser.db"
      - --port
      - "{{ values.network.web_port }}"
      - --address
      - "0.0.0.0"
      - --root
      - "{{ data_path }}"
      {% if values.network.certificate_id %}
      - --cert
      - "{{ ssl_cert_path }}"
      - --key
      - "{{ ssl_key_path }}"
      {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(
      port=values.network.web_port, path="/health",
      config={"scheme": "https" if values.network.certificate_id else "http"}
    ) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.filebrowser.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}
  {% if perms_dirs.items %}
  {{ perms_container_name }}:
    {{ perms_container(items=perms_dirs.items) | indent(4) }}
    volumes:
      {% for item in perms_mounts.items %}
      - {{ item | tojson }}
      {% endfor %}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

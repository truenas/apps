{% from "macros/script.sh" import script %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% if not values.storage.additional_storage %}
  {% do tpl.funcs.fail("Expected at least 1 [storage.additional_storage] to be set") %}
{% endif %}

{% set proto = "https" if values.network.certificate_id else "http" %}
{% set c1 = tpl.add_container(values.consts.filebrowser_container_name, "image") %}
{% set init = tpl.add_container(values.consts.init_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do init.set_user(values.run_as.user, values.run_as.group) %}
{% do init.deploy.resources.set_profile("low") %}
{% do init.remove_devices() %}
{% do init.restart.set_policy("on-failure", 1) %}
{% do init.set_network_mode("none") %}
{% do init.healthcheck.disable() %}
{% do init.configs.add("script.sh", script(values), "/script.sh", "0755") %}
{% do init.set_entrypoint(["/script.sh"]) %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.depends.add_dependency(values.consts.init_container_name, "service_completed_successfully") %}
{% set cmd = namespace(x=[
  "--config", "%s/filebrowser.json"|format(values.consts.config_path),
  "--database", "%s/filebrowser.db"|format(values.consts.config_path),
  "--port", "%s"|format(values.network.web_port),
  "--address", "0.0.0.0",
  "--root", values.consts.data_path,
]) %}

{% if values.network.certificate_id %}
  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c1.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}

  {% do cmd.x.extend(["--cert", values.consts.ssl_cert_path]) %}
  {% do cmd.x.extend(["--key", values.consts.ssl_key_path]) %}
{% endif %}

{% do c1.set_command(cmd.x) %}

{% do c1.healthcheck.set_test("curl", {"port": values.network.web_port, "path": "/health", "scheme": proto}) %}
{% do c1.environment.add_user_envs(values.filebrowser.additional_envs) %}

{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% do c1.add_storage(values.consts.config_path, values.storage.config) %}
{% do init.add_storage(values.consts.config_path, values.storage.config) %}
{% do perm_container.add_or_skip_action(values.consts.config_path, values.storage.config, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% set mount_path = "%s/%s"|format(values.consts.data_path, store.mount_path) %}
  {% set mount_path = mount_path.replace("//", "/") %}
  {% do c1.add_storage(mount_path, store) %}
  {% do perm_container.add_or_skip_action(mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do init.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port, "scheme": proto}) %}

{{ tpl.render() | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.versitygw_container_name, "image") %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}
{% do c1.healthcheck.set_test("wget", {
  "port": values.network.api_port,
  "path": "/healthz",
}) %}

{% if not values.network.host_network %}
  {% do c1.ports.add_port(values.network.api_port, values.network.api_port) %}
  {% if values.network.admin_port %}
    {% do c1.ports.add_port(values.network.admin_port, values.network.admin_port) %}
  {% endif %}
{% endif %}

{% do c1.add_storage(values.consts.buckets_path, values.storage.buckets) %}
{% do perm_container.add_or_skip_action("buckets", values.storage.buckets, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% set envs = namespace(x={
  "ROOT_ACCESS_KEY_ID": values.versitygw.root_user_access_key,
  "ROOT_SECRET_ACCESS_KEY": values.versitygw.root_user_secret_access_key,
}) %}

{% for key, value in envs.x.items() %}
  {% do c1.environment.add_env(key, value) %}
{% endfor %}

{# TODO: could add additional env vars here #}

{% set cmd = namespace(x=[
  "--port",
  ":%d" | format(values.network.api_port),
  "--health", "/healthz",
]) %}

{% if values.network.certificate_id %}
  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("public", cert.certificate, value.consts.ssl_cert_path) %}
  {% do c1.configs.add("private", cert.privatekey, value.consts.ssl_key_path) %}

  {% do cmd.x.append("--cert") %}
  {% do cmd.x.append(value.consts.ssl_cert_path) %}
  {% do cmd.x.append("--key") %}
  {% do cmd.x.append(value.consts.ssl_key_path) %}
{% endif %}

{% if values.network.admin_port %}
  {% do cmd.x.append("--admin-port") %}
  {% do cmd.x.append(":%d" | format(values.network.admin_port)) %}

  {% if values.network.admin_certificate_id %}
    {% set cert = values.ix_certificates[values.network.admin_certificate_id] %}
    {% do c1.configs.add("public", cert.certificate, values.consts.admin_ssl_cert_path) %}
    {% do c1.configs.add("private", cert.privatekey, values.consts.admin_ssl_key_path) %}

    {% do cmd.x.append("--admin-cert") %}
    {% do cmd.x.append(values.consts.admin_ssl_cert_path) %}
    {% do cmd.x.append("--admin-key") %}
    {% do cmd.x.append(values.consts.admin_ssl_key_path) %}
  {% endif %}
{% endif %}

{# Set up extra global options before the POSIX options #}
{% for arg in values.versitygw.additional_global_flags %}
  {% do cmd.x.append(arg) %}
{% endfor %}

{% do cmd.x.append("posix") %}
{% do cmd.x.append(values.consts.buckets_path) %}

{% for arg in values.versitygw.additional_posix_flags %}
  {% do cmd.x.append(arg) %}
{% endfor %}

{% do c1.set_command(cmd.x) %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{{ tpl.render() | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.notifiarr_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set proto = "https" if values.network.certificate_id else "http" %}
{% do c1.set_user(values.run_as.user, values.run_as.group) %}

{% if values.notifiarr.monitor_disks %}{% do c1.set_privileged(true) %}{% endif %}

{% do c1.set_hostname(values.notifiarr.hostname) %}
{% do c1.healthcheck.set_custom_test(["CMD", "/notifiarr", "--curl", "http://localhost:%d"|format(values.network.web_port.port_number)]) %}

{% do c1.environment.add_env("DN_MODE", "production") %}
{% do c1.environment.add_env("DN_AUTO_UPDATE", false) %}
{% do c1.environment.add_env("DN_BIND_ADDR", "0.0.0.0:%d"|format(values.network.web_port.port_number)) %}
{% do c1.environment.add_env("DN_API_KEY", values.notifiarr.api_key) %}
{% if values.network.certificate_id %}
  {% do c1.environment.add_env("DN_SSL_KEY_FILE", values.consts.ssl_key_path) %}
  {% do c1.environment.add_env("DN_SSL_CERT_FILE", values.consts.ssl_cert_path) %}

  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c1.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}
{% endif %}

{% do c1.environment.add_user_envs(values.notifiarr.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage("/config", values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perms_config) %}

{% if values.notifiarr.mount_utmp %}
  {% do c1.add_storage("/var/run/utmp", {"type": "host_path", "host_path_config": {"path": "/var/run/utmp", "read_only": true}}) %}
{% endif %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port, {"scheme": proto}) %}

{{ tpl.render() | tojson }}

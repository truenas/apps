{% set tpl = ix_lib.base.render.Render(values) %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.hoppscotch.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.hoppscotch.postgres_image_selector,
  pg_config, perm_container
) %}

{% set envs = namespace(x={
  "JWT_SECRET": "TODO-jwt-secret",
  "TOKEN_SALT_COMPLEXITY": 10,
  "MAGIC_LINK_TOKEN_VALIDITY": 3,
  "REFRESH_TOKEN_VALIDITY": 604800000,
  "ACCESS_TOKEN_VALIDITY": 86400000,
  "SESSION_SECRET": "TODO-session-secret",

  "DATABASE_URL": postgres.get_url("postgres"),
  "DATA_ENCRYPTION_KEY": values.hoppscotch.data_encryption_key,
  "MAILER_SMTP_ENABLE": false,
  "REDIRECT_URL": "http://hoppscotch-failed-redirect.example.com",
  "RATE_LIMIT_TTL": values.hoppscotch.rate_limit.ttl,
  "RATE_LIMIT_MAX": values.hoppscotch.rate_limit.max,
}) %}

{% set auth_providers = [] %}
{% if values.hoppscotch.oauth.email.enabled %}
  {% do auth_providers.append("EMAIL") %}
  {% do envs.x.update({
    "MAILER_SMTP_ENABLE": true,
    "MAILER_USE_CUSTOM_CONFIGS": true,
    "MAILER_ADDRESS_FROM": values.hoppscotch.oauth.email.address_from,
    "MAILER_SMTP_SECURE": values.hoppscotch.oauth.email.secure,
    "MAILER_SMTP_HOST": values.hoppscotch.oauth.email.host,
    "MAILER_SMTP_PORT": values.hoppscotch.oauth.email.port,
    "MAILER_SMTP_USER": values.hoppscotch.oauth.email.user,
    "MAILER_SMTP_PASSWORD": values.hoppscotch.oauth.email.password,
    "MAILER_TLS_REJECT_UNAUTHORIZED": values.hoppscotch.oauth.email.tls_reject_unauthorized,
  }) %}
{% endif %}
{% do envs.x.update({
  "VITE_ALLOWED_AUTH_PROVIDERS": ", ".join(auth_providers),
}) %}

{% do envs.x.update({
  "WHITELISTED_ORIGINS": ",".join([
    values.hoppscotch.domains.backend,
    values.hoppscotch.domains.frontend,
    values.hoppscotch.domains.admin,
    values.hoppscotch.domains.app_bundle,
  ]),
  "VITE_BASE_URL": values.hoppscotch.domains.frontend,
  "VITE_ADMIN_URL": values.hoppscotch.domains.admin,
  "VITE_BACKEND_GQL_URL": values.hoppscotch.domains.backend + "/graphql",
  "VITE_BACKEND_WS_URL": "ws:" + values.hoppscotch.domains.backend.partition(":")[2] + "/graphql",
  "VITE_BACKEND_API_URL": values.hoppscotch.domains.backend + "/v1",
}) %}

{% set internal_web_port = 443 %}

{% set c_migrate = tpl.add_container(values.consts.migrate_container_name, "hoppscotch_backend") %}
{% do c_migrate.healthcheck.disable() %}
{% do c_migrate.restart.set_policy("on-failure", 1) %}
{% do c_migrate.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c_migrate.set_command(["sh", "-c", "pnpx prisma migrate deploy"]) %}

{% set c_backend = tpl.add_container(values.consts.backend_container_name, "hoppscotch_backend") %}
{% do c_backend.healthcheck.set_test("tcp", {"port": values.network.backend_web_port.port_number}) %}
{% do c_backend.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c_backend.depends.add_dependency(values.consts.migrate_container_name, "service_completed_successfully") %}
{% do c_backend.add_storage(values.consts.backend_node_volume_path, values.consts.backend_node_volume) %}
{% do c_backend.add_port(values.network.backend_web_port, {"container_port": internal_web_port}) %}

{% set c_frontend = tpl.add_container(values.consts.frontend_container_name, "hoppscotch_frontend") %}
{% do c_frontend.healthcheck.set_test("tcp", {"port": values.network.frontend_web_port.port_number}) %}
{% do c_frontend.depends.add_dependency(values.consts.backend_container_name, "service_started") %}
{% do c_frontend.add_port(values.network.frontend_web_port, {"container_port": internal_web_port}) %}
{% do c_frontend.add_port(values.network.app_bundle_port, {"container_port": 3200}) %}

{% set c_admin = tpl.add_container(values.consts.admin_container_name, "hoppscotch_admin") %}
{% do c_admin.healthcheck.set_test("tcp", {"port": values.network.admin_web_port.port_number}) %}
{% do c_admin.depends.add_dependency(values.consts.backend_container_name, "service_started") %}
{% do c_admin.add_port(values.network.admin_web_port, {"container_port": internal_web_port}) %}

{% for key, value in envs.x.items() %}
  {% do c_migrate.environment.add_env(key, value) %}
  {% do c_backend.environment.add_env(key, value) %}
  {% do c_frontend.environment.add_env(key, value) %}
  {% do c_admin.environment.add_env(key, value) %}
{% endfor %}
{% do c_migrate.environment.add_user_envs(values.hoppscotch.additional_envs) %}
{% do c_backend.environment.add_user_envs(values.hoppscotch.additional_envs) %}
{% do c_frontend.environment.add_user_envs(values.hoppscotch.additional_envs) %}
{% do c_admin.environment.add_user_envs(values.hoppscotch.additional_envs) %}

{% for store in values.storage.additional_storage %}
  {% do c_backend %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_migrate.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_backend.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_frontend.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_admin.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.admin_web_port) %}

{{ tpl.render() | tojson }}

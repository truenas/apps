{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set pg_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set pg_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% if not values.gitea.root_url.startswith("http") %}
  {% do ix_lib.base.utils.throw_error("Expected [gitea.root_url] to have the following format [http(s)://(sub).domain.tld(:port)] or [http://IP_ADDRESS:port], got [%s]" | format(values.gitea.root_url)) %}
{% endif %}

{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/postgres/tmp", "mode": "check", "uid": values.consts.pg_run_as_user, "gid": values.consts.pg_run_as_group}
)) %}
{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}),
  values=values, perm_opts={"mount_path": "/mnt/postgres/data", "mode": "check", "uid": values.consts.pg_run_as_user, "gid": values.consts.pg_run_as_group,}
)) %}
{% for item in pg_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and pg_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": "/etc/gitea"}),
  values=values, perm_opts={"mount_path": "/mnt/gitea/config", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/var/lib/gitea"}),
  values=values, perm_opts={"mount_path": "/mnt/gitea/data", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
)) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp/gitea"},
  perm_opts={"mount_path": "/mnt/gitea/tmp-gitea", "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "chmod": "700"}
)) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/gitea/dir_%s"|format(loop.index0), "mode": "check", "uid": values.consts.run_as_user, "gid": values.consts.run_as_group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ values.consts.gitea_container_name }}:
    user: {{ "%d:%d" | format(values.consts.run_as_user, values.consts.run_as_group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ values.consts.key_file_path }}
      - source: public
        target: {{ values.consts.cert_file_path }}
    {% endif %}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    depends_on:
      {{ values.consts.postgres_container_name }}:
        condition: service_healthy
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(port=values.network.web_port, path="/api/healthz",
      config={"scheme": "https" if values.network.certificate_id else "http"})
    %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app=ix_lib.base.utils.merge_dicts({
      "GITEA__database__DB_TYPE": "postgres",
      "GITEA__database__PASSWD": values.gitea.db_password,
      "GITEA__database__HOST": values.consts.postgres_container_name,
      "GITEA__database__NAME": values.consts.db_name,
      "GITEA__database__USER": values.consts.db_user,
      "GITEA__server__HTTP_PORT": values.network.web_port,
      "GITEA__server__SSH_PORT": values.network.external_ssh_port | default(values.network.ssh_port),
      "GITEA__server__SSH_LISTEN_PORT": values.network.ssh_port,
      "GITEA__server__ROOT_URL": values.gitea.root_url,
      "GITEA__server__PROTOCOL": "https" if values.network.certificate_id else "http",
    },
    {
      "GITEA__server__CERT_FILE": values.consts.cert_file_path,
      "GITEA__server__KEY_FILE": values.consts.key_file_path,
    } if values.network.certificate_id else {},
    ), user=values.gitea.additional_envs, values=values) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.ssh_port, "published": values.network.ssh_port}) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

  {% set resource_without_gpus = ix_lib.base.utils.copy_dict(values.resources) %}
  {% do resource_without_gpus.pop("gpus", None) %}
  {{ values.consts.postgres_container_name }}: {{ ix_lib.base.postgres.pg_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="postgres_image"),
    "volumes": pg_volume_mounts.items,
    "user": values.consts.pg_run_as_user, "group": values.consts.pg_run_as_group,
    "db_user": values.consts.db_user, "db_name": values.consts.db_name,
    "db_password": values.gitea.db_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      }
    } if perms_dirs.items else {}
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "scheme": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Gitea") | tojson }}

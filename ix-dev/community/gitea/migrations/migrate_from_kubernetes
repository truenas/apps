#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "gitea": {
            "additional_envs": config["giteaConfig"].get("additionalEnvs", []),
            "root_url": config["giteaNetwork"]["rootURL"],
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
        },
        "network": {
            "web_port": config["giteaNetwork"]["webPort"],
            "ssh_port": config["giteaNetwork"]["sshPort"],
            "external_ssh_port": config["giteaNetwork"].get("externalSshPort", None),
            "certificate_id": config["giteaNetwork"]["certificateID"],
        },
        "storage": {
            "config": migrate_storage_item(config["giteaStorage"]["config"]),
            "data": migrate_storage_item(config["giteaStorage"]["data"]),
            "postgres_data": migrate_storage_item(config["giteaStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["giteaStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

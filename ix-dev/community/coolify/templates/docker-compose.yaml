{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.coolify_container_name, "image") %}
{% set realtime = tpl.add_container(values.consts.realtime_container_name, "realtime_image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perm_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{# Postgres #}
{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.coolify.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, values.coolify.postgres_image_selector, pg_config, perm_container) %}

{# Redis #}
{% set redis_config = {
  "password": values.coolify.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{# Application #}
{% do c1.add_caps(["CHOWN", "DAC_OVERRIDE","FOWNER", "SETGID", "SETUID"]) %}
{% do c1.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do c1.healthcheck.set_test("curl", {"port": values.consts.internal_web_port, "path": "/api/health"}) %}
{% do c1.add_extra_host("host.docker.internal", "host-gateway") %}

{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.realtime_container_name, "service_healthy") %}

{% do c1.environment.add_env("APP_ENV", "production") %}
{% do c1.environment.add_env("APP_NAME", values.coolify.app_name) %}
{% do c1.environment.add_env("APP_KEY", values.coolify.app_key) %}
{% do c1.environment.add_env("PHP_MEMORY_LIMIT", "%dM"|format(values.coolify.php.memory_limit_mb)) %}
{% do c1.environment.add_env("PHP_FPM_PM_CONTROL", "dynamic") %}
{% do c1.environment.add_env("PHP_FPM_PM_START_SERVERS", values.coolify.php.pm_start_servers) %}
{% do c1.environment.add_env("PHP_FPM_PM_MIN_SPARE_SERVERS", values.coolify.php.pm_min_spare_servers) %}
{% do c1.environment.add_env("PHP_FPM_PM_MAX_SPARE_SERVERS", values.coolify.php.pm_max_spare_servers) %}
{% do c1.environment.add_env("PUSHER_APP_ID", values.coolify.pusher_app_id) %}
{% do c1.environment.add_env("PUSHER_APP_KEY", values.coolify.pusher_app_key) %}
{% do c1.environment.add_env("PUSHER_APP_SECRET", values.coolify.pusher_app_secret) %}
{% do c1.environment.add_env("PUSHER_BACKEND_HOST", values.consts.realtime_container_name) %}
{% do c1.environment.add_env("PUSHER_BACKEND_PORT", values.consts.internal_realtime_backend_port) %}
{% do c1.environment.add_env("PUSHER_SCHEME", "http") %}
{% do c1.environment.add_env("DB_HOST", values.consts.postgres_container_name) %}
{% do c1.environment.add_env("DB_PORT", 5432) %}
{% do c1.environment.add_env("DB_DATABASE", values.consts.db_name) %}
{% do c1.environment.add_env("DB_USERNAME", values.consts.db_user) %}
{% do c1.environment.add_env("DB_PASSWORD", values.coolify.db_password) %}
{% do c1.environment.add_env("REDIS_HOST", values.consts.redis_container_name) %}
{% do c1.environment.add_env("REDIS_PORT", 6379) %}
{% do c1.environment.add_env("REDIS_PASSWORD", values.coolify.redis_password) %}
{% do c1.environment.add_env("REDIS_DB", 0) %}
{% do c1.environment.add_user_envs(values.coolify.additional_envs) %}

{% do c1.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}

{% do c1.add_storage("/var/www/html/storage/app/ssh", values.storage.ssh_keys) %}
{% do c1.add_storage("/var/www/html/storage/app/applications", values.storage.applications) %}
{% do c1.add_storage("/var/www.html/storage/app/databases", values.storage.databases) %}
{% do c1.add_storage("/var/www/html/storage/app/services", values.storage.services) %}
{% do c1.add_storage("/var/www/html/storage/app/backups", values.storage.backups) %}
{% do c1.add_storage("/var/www/html/storage/app/webhooks-during-maintenance", values.storage.webhooks_maintenance) %}
{% do c1.add_storage("/run", tpl.funcs.temp_config("run")) %}

{# Realtime #}
{% do realtime.set_user(values.consts.run_as_user, values.consts.run_as_group) %}
{% do realtime.healthcheck.set_test("wget", {"port": values.consts.internal_realtime_backend_port, "path": "/ready"}) %}
{% do realtime.add_extra_host("host.docker.internal", "host-gateway") %}

{% do realtime.environment.add_env("APP_NAME", values.coolify.app_name) %}
{% do realtime.environment.add_env("SOKETI_DEFAULT_APP_ID", values.coolify.pusher_app_id) %}
{% do realtime.environment.add_env("SOKETI_DEFAULT_APP_KEY", values.coolify.pusher_app_key) %}
{% do realtime.environment.add_env("SOKETI_DEFAULT_APP_SECRET", values.coolify.pusher_app_secret) %}
{% do realtime.environment.add_user_envs(values.coolify.additional_envs) %}

{% do realtime.add_port(values.network.realtime_backend_port, {"container_port": values.consts.internal_realtime_backend_port}) %}
{% do realtime.add_port(values.network.realtime_websocket_port, {"container_port": values.consts.internal_realtime_websocket_port}) %}

{% do realtime.add_storage("/var/www/html/storage/app/ssh", values.storage.ssh_keys) %}

{% do perm_container.add_or_skip_action("ssh-keys", values.storage.ssh_keys, perm_config) %}
{% do perm_container.add_or_skip_action("applications", values.storage.applications, perm_config) %}
{% do perm_container.add_or_skip_action("databases", values.storage.databases, perm_config) %}
{% do perm_container.add_or_skip_action("services", values.storage.services, perm_config) %}
{% do perm_container.add_or_skip_action("backups", values.storage.backups, perm_config) %}
{% do perm_container.add_or_skip_action("webhooks-maintenance", values.storage.webhooks_maintenance, perm_config) %}
{% do perm_container.add_or_skip_action("run", tpl.funcs.temp_config("run"), perm_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do realtime.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perm_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do realtime.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}
{% do tpl.notes.set_body(values.consts.notes_body) %}

{{ tpl.render() | tojson }}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.world, **{"mount_path": values.consts.world_path}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.plugins, **{"mount_path": "/plugins"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% set sizes = {"small": 1, "medium": 2, "large": 3} %}
{% set difficulty = {"normal": 0, "expert": 1, "master": 2, "journey": 3} %}
{% set reserved = ["-port", "-world", "-maxplayers", "-password", "-secure", "-forceupdate", "-worldevil", "-difficulty", "-autocreate", "-seed"] %}

{#
  'worldevil', 'dificulty' and 'autocreate' flags are only used
  when a world is generated. According to docs server will
  ignore them if a world exists, so we can safely pass
  them all the time and let application handle it.
  Also 'autocreate' must come before other flags.
#}

{# Containers #}
services:
  {{ values.consts.terraria_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    tty: true
    stdin_open: true
    command:
      - -autocreate
      - "{{ sizes[values.terraria.world_size] }}"
      - -worldevil
      - "{{ values.terraria.world_evil }}"
      - -difficulty
      - "{{ difficulty[values.terraria.world_difficulty] }}"
      {% if values.terraria.world_seed %}
      - -seed
      - "{{ ix_lib.base.utils.escape_dollar(values.terraria.world_seed) }}"
      {% endif %}
      - -port
      - "{{ values.network.server_port }}"
      - -world
      - "{{ "%s/%s.wld" | format(values.consts.world_path, values.terraria.world_name) }}"
      - -maxplayers
      - "{{ values.terraria.max_players }}"
      {% if values.terraria.password %}
      - -password
      - "{{ ix_lib.base.utils.escape_dollar(values.terraria.password) }}"
      {% endif %}
      {% if values.terraria.secure %}
      - -secure
      {% endif %}
      {% if values.terraria.force_update %}
      - -forceupdate
      {% endif %}
      {% for item in values.terraria.additional_args %}
        {% if item.key in reserved %}
          {% do ix_lib.base.utils.throw_error("Argument [%s] is automatically handled by the app, please use the corresponding field." | format(item.key)) %}
        {% endif %}
      - "{{ item.key }}"
      {% if item.value %}
      - "{{ ix_lib.base.utils.escape_dollar(item.value|string) }}"
      {% endif %}
      {% endfor %}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.tcp_test(port=values.network.server_port) %}
    {% set hc = ix_lib.base.healthchecks.check_health(test) if values.ci else {"disable": true} %}
    healthcheck: {{ hc | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.terraria.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.server_port, "published": values.network.server_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Terraria") | tojson }}

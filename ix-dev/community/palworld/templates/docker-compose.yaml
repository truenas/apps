{% set init_container_name = "init" %}
{% set palworld_container_name = "palworld" %}
{% set palworld_image = "ich777/steamcmd:palworld" %}

{% set reserved_keys = [
  "RCONEnabled", "RCONPort", "PublicPort", "AdminPassword",
  "ServerName","ServerDescription","ServerPassword",
] %}
{% for i in reserved_keys %}
  {% for item in values.palworld.ini_keys %}
    {% if item.key == i %}
      {% do ix_lib.base.utils.throw_error("Ini Key [%s] is a reserved key"|format(i)) %}
    {% endif %}
  {% endfor %}
{% endfor %}

{% for i in values.palworld.game_params %}
  {% if i.startswith("port=") %}
    {% do ix_lib.base.utils.throw_error("Parameter [port=] is automatically adjusted from the Server Port field") %}
  {% endif %}
{% endfor %}
{% do values.palworld.game_params.insert(0, "port=%d"|format(values.network.server_port)) %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% set steamcmd_path = "/serverdata/steamcmd" %}
{% set server_path = "/serverdata/serverfiles" %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.steamcmd, **{"mount_path": steamcmd_path}), ix_volumes=values.ix_volumes)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.server, **{"mount_path": server_path}), ix_volumes=values.ix_volumes)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ palworld_container_name }}:
    image: {{ palworld_image }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    depends_on:
      {{ init_container_name }}:
        condition: service_completed_successfully
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID", "SYS_RESOURCE", "KILL", "NET_BIND_SERVICE"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck:
      disable: true
    environment: {{ ix_lib.base.environment.envs(app={
      "UID": values.run_as.user,
      "GID": values.run_as.group,
      "STEAMCMD_DIR": steamcmd_path,
      "SERVER_DIR": server_path,
      "SRV_ADMIN_PWD": values.palworld.admin_password,
      "GAME_PARAMS": values.palworld.game_params | join(" "),
      "GAME_PARAMS_EXTRA": values.palworld.game_params_extra | join(" "),
      "UPDATE_PUBLIC_IP": values.palworld.update_public_ip,
      "VALIDATE": values.palworld.validate,
      "USERNAME": values.palworld.username,
      "PASSWORD": values.palworld.password,
      "BACKUP": values.palworld.backup.enabled |default(false),
      "BACKUP_INTERVAL": values.palworld.backup.interval|default(120),
      "BACKUPS_TO_KEEP": values.palworld.backup.keep|default(3),
    }, user=values.palworld.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.server_port, "published": values.network.server_port, "protocol": "udp"}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.rcon_port, "published": values.network.rcon_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

  {{ init_container_name }}:
    image: {{ palworld_image }}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512m
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    volumes: {{ volume_mounts.items | tojson }}
    entrypoint:
      - bash
      - -c
    {% set cfg = "%s/Pal/Saved/Config/LinuxServer" | format(server_path) %}
    {% set cfg_file = "%s/PalWorldSettings.ini" | format(cfg) %}
    command:
      - |
        if [ ! -d {{ cfg }} ]; then
          echo "Config directory not found, creating..."
          mkdir -p {{ cfg }}
        fi
        if [ ! -f {{ cfg_file }} ]; then
          echo "Config file not found, fetching..."
          # -- Fetch the config file if it doesn't exist, just like the container does
          wget -qO {{ cfg_file }} https://github.com/ich777/docker-steamcmd-server/raw/palworld/config/PalWorldSettings.ini
        fi
        set_ini_value() {
          local key="$${1}"
          local value="$${2}"
          local quote="$${3:-false}"
          local print="$${4:-true}"
          # -- Escape special characters for sed
          escaped_value=$$(printf '%s\n' "$$value" | sed 's/[&/\]/\\&/g')
          if [ "$$quote" = true ]; then
            escaped_value="\"$${escaped_value}\""
          fi

          echo "Setting $${key}..."
          sed -i "s|\($${key}=\)[^,]*|\1$${escaped_value}|g" "{{ cfg_file }}"
          if [ "$$print" = true ]; then
            echo "Set to $$(grep -Po "(?<=$${key}=)[^,]*" "{{ cfg_file }}")"
          fi
        }

        set_ini_value "RCONEnabled" True
        set_ini_value "RCONPort" {{ values.network.rcon_port }}
        set_ini_value "PublicPort" {{ values.network.server_port }}
        set_ini_value "ServerName" "{{ values.palworld.server.name }}" true
        set_ini_value "ServerDescription" "{{ values.palworld.server.description }}" true
        set_ini_value "ServerPassword" '{{ values.palworld.server.password }}' true false
        set_ini_value "AdminPassword" '{{ values.palworld.admin_password }}' true false

        {% for item in values.palworld.ini_keys %}
          {% set key = item.key %}
          {% set value = item.value|string %}

          {% if ix_lib.base.utils.is_number(value) %}
            echo "Value of [{{ key }}] is a number, setting without quotes"
            set_ini_value "{{ key }}" {{ value }}
          {% elif ix_lib.base.utils.is_boolean(value) %}
            echo "Value of [{{ key }}] is a boolean, setting without quotes"
            set_ini_value "{{ key }}" {{ ix_lib.base.utils.camel_case(value) }}
          {% else %}
            echo "Value of [{{ key }}] is a string, setting with quotes"
            set_ini_value "{{ key }}" "{{ value }}" true
          {% endif %}
        {% endfor %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

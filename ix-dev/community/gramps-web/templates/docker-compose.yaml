{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.gramps-web_container_name, "image") %}
{% set c2 = tpl.add_container(values.consts.gramps-web_celery_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set redis_config = {
  "password": values.gramps-web.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis_container = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set tmp_config = {"type": "temporary", "volume_config": {"volume_name": "tmp-gramps"}} %}

{# Celery runs as a separate container with the same settings, except a different startup command #}
{% set gramps_instances = [c1, c2] %}

{% for instance in gramps_instances %}
  {% do instance.set_user(values.run_as.user, values.run_as.group) %}

  {% do instance.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

  {% do instance.environment.add_env("GRAMPSWEB_TREE", "Gramps Web") %}
  {% do instance.environment.add_env("GRAMPSHOME", "/data") %}
  {% do instance.environment.add_env("GRAMPSWEB_MEDIA_BASE_DIR", "/data/media") %}

  {% do instance.environment.add_env("GRAMPSWEB_SECRET_KEY", values.gramps-web.app_key) %}

  {% do instance.environment.add_env("GRAMPSWEB_CELERY_CONFIG__broker_url", "redis://default:%s@%s:6379/0"|format(values.gramps-web.redis_password, values.consts.redis_container_name)) %}
  {% do instance.environment.add_env("GRAMPSWEB_CELERY_CONFIG__result_backend", "redis://default:%s@%s:6379/0"|format(values.gramps-web.redis_password, values.consts.redis_container_name)) %}
  {% do instance.environment.add_env("GRAMPSWEB_RATELIMIT_STORAGE_URI", "redis://default:%s@%s:6379/1"|format(values.gramps-web.redis_password, values.consts.redis_container_name)) %}

  {% do instance.environment.add_env("GRAMPSWEB_SEARCH_INDEX_DB_URI", "sqlite:////data/search_index.db") %}
  {% do instance.environment.add_env("GRAMPSWEB_USER_DB_URI", "sqlite:////data/users.sqlite") %}
  {% do instance.environment.add_env("GRAMPSWEB_THUMBNAIL_CACHE_CONFIG__CACHE_DIR", "/data/thumbnail_cache") %}

  {% do instance.environment.add_user_envs(values.gramps-web.additional_envs) %}

  {% do instance.add_storage("/data", values.storage.data) %}
  {% do instance.add_storage("/tmp", tmp_config) %}

  {% for store in values.storage.additional_storage %}
    {% do instance.add_storage(store.mount_path, store) %}
  {% endfor %}

{% endfor %}

{% do c1.healthcheck.set_test("netcat", {"port": values.consts.internal_web_port}) %}
{% do c2.healthcheck.disable() %}
{% do c2.set_command(["celery -A gramps_webapi.celery worker --loglevel=INFO"]) %}

{% do perm_container.add_or_skip_action("tmp-gramps", tmp_config, perms_config) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if not values.network.host_network %}
  {% do c1.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}
{% endif %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do redis_container.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port.port_number}) %}

{{ tpl.render() | tojson }}

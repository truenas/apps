{% from "macros/global/perms/container.yaml.jinja" import perms_container %}

{% set adguard_container_name = "adguard" %}
{% set adguard_image = "adguard/adguardhome:v0.107.51" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% set work_path = "/opt/adguardhome/work" %}
{% set config_path = "/opt/adguardhome/conf" %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": config_path}), ix_volumes=ixVolumes)) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.work, **{"mount_path": work_path}), ix_volumes=ixVolumes)) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ixVolumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ adguard_container_name }}:
    image: {{ adguard_image }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.host_network or values.network.dhcp_enabled %}
    network_mode: host
    {% endif %}
    command:
      - --no-check-update
      - --host
      - "0.0.0.0"
      - --config
      - {{ "%s/AdGuardHome.yaml" | format(config_path) }}
      - --work-dir
      - {{ work_path }}
      - --port
      - "{{ values.network.web_port }}"
    {% set add_caps = ["NET_BIND_SERVICE","CHOWN","FOWNER","DAC_OVERRIDE"] %}
    {% if values.network.dhcp_enabled and add_caps.append("NET_ADMIN") %}{% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=add_caps) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.wget_test("http://localhost:%s/" | format(values.network.web_port)) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.adguard.additional_envs) | tojson }}
    {% if not values.network.host_network and not values.network.dhcp_enabled %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 53, "published": values.network.dns_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 53, "published": values.network.dns_port, "protocol": "udp"}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

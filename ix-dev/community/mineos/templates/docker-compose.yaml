{% set mineos_container_name = "mineos" %}
{% set mineos_image = "hexparrot/mineos:latest" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/var/games/minecraft"}), ix_volumes=values.ix_volumes)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ mineos_container_name }}:
    image: {{ mineos_image }}
    restart: unless-stopped
    stop_grace_period: {{ "%ds" | format(values.mineos.stop_grace_period) }}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: /etc/ssl/certs/mineos.key
      - source: public
        target: /etc/ssl/certs/mineos.crt
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(port=values.network.web_port, path="/admin/login.html", config={"scheme": "https" if values.network.use_https else "http"}) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "USER_UID": values.run_as.user,
      "GROUP_GID": values.run_as.group,
      "GROUP_NAME": values.mineos.username,
      "USER_NAME": values.mineos.username,
      "USER_PASSWORD": values.mineos.password,
      "SERVER_PORT": values.network.web_port,
      "USE_HTTPS": values.network.use_https,
    }, user=values.mineos.additional_envs) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    {% for port in values.network.additional_ports %}
      - {{ ix_lib.base.ports.get_port(port={"target": port, "published": port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": port, "published": port, "protocol": "udp"}) | tojson }}
    {% endfor %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

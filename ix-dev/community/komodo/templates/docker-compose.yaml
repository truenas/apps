{% set tpl = ix_lib.base.render.Render(values) %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

# Source: https://komo.do/docs/setup/postgres

# Postgre container
{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.komodo.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.komodo_postgre_name:, "postgre_image", pg_config, perm_container) %}

# FerretDB container
{% set ferretdb_container = tpl.add_container(values.consts.komodo_ferretdb_name, "ferretdb_image") %}
{% do ferretdb_container.depends.add_dependency(values.consts.komodo_postgre_name) %}
{% do ferretdb_container.environment.add_env("FERRETDB_POSTGRESQL_URL", "postgres://%s:%s@%s:5432/%s"|format(values.consts.db_user,values.komodo.db_password,values.consts.komodo_postgre_name,values.consts.db_name) %} 

# Core container
{% set core_container = tpl.add_container(values.consts.komodo_core_name, "image") %}
{% do core_container.depends.add_dependency(values.consts.komodo_ferretdb_name) %}
{% do core_container.ports.add_port(values.network.web_port, values.network.web_port) %}
{% do core_container.environment.add_env("KOMODO_DATABASE_URI", "mongodb://%s:%s@%s:5432/%s?authMechanism=PLAIN"|format(values.consts.db_user,values.komodo.db_password,values.consts.komodo_postgre_name,values.consts.db_name) %} 
{% do core_container.environment.add_env("KOMODO_PASSKEY", values.komodo.sync_passkey %}
{% do core_container.environment.add_env("KOMODO_FIRST_SERVER", "https://%s:8120"|format(values.consts.komodo_periphery_name) %}
{% do server_container.add_storage("%s/upload"|format(base_path), values.storage.core_repo_cache) %}
{% for store in values.storage.additional_storage %}
  {% do server_container.add_storage(store.mount_path, store) %}
{% endfor %}

{% do server_container.ports.add_port(values.network.web_port, values.network.web_port) %}

{% do server_container.environment.add_env("NODE_ENV", "production") %}
{% do server_container.environment.add_env("IMMICH_LOG_LEVEL", values.immich.log_level) %}
{% do server_container.environment.add_env("IMMICH_PORT", values.network.web_port) %}
{% do server_container.environment.add_env("DB_USERNAME", values.consts.db_user) %}
{% do server_container.environment.add_env("DB_PASSWORD", values.immich.db_password) %}
{% do server_container.environment.add_env("DB_HOSTNAME", values.consts.pgvecto_container_name) %}
{% do server_container.environment.add_env("DB_DATABASE_NAME", values.consts.db_name) %}
{% do server_container.environment.add_env("DB_PORT", "5432") %}
{% do server_container.environment.add_env("REDIS_HOSTNAME", values.consts.redis_container_name) %}
{% do server_container.environment.add_env("REDIS_PASSWORD", values.immich.redis_password) %}
{% do server_container.environment.add_env("REDIS_PORT", "6379") %}
{% do server_container.environment.add_env("REDIS_DBINDEX", "0") %}
{% do server_container.environment.add_user_envs(values.immich.additional_envs) %}

{% if values.immich.enable_ml %}
  {% set ml_container.x = tpl.add_container(values.consts.ml_container_name, values.immich.ml_image_selector) %}
  {% do ml_container.x.healthcheck.set_custom_test("python3 /usr/src/app/healthcheck.py") %}
  {% do ml_container.x.environment.add_env("NODE_ENV", "production") %}
  {% do ml_container.x.environment.add_env("IMMICH_LOG_LEVEL", values.immich.log_level) %}
  {% do ml_container.x.environment.add_env("IMMICH_PORT", values.consts.ml_port) %}
  {% do ml_container.x.environment.add_env("MACHINE_LEARNING_CACHE_FOLDER", values.consts.ml_cache_path) %}
  {% do ml_container.x.environment.add_env("TRANSFORMERS_CACHE", values.consts.ml_cache_path) %}
  {% if values.immich.hugging_face_endpoint %}
    {% do ml_container.x.environment.add_env("HF_ENDPOINT", values.immich.hugging_face_endpoint) %}
  {% endif %}
  {% do ml_container.x.environment.add_user_envs(values.immich.additional_envs) %}
  {% do ml_container.x.add_storage(values.consts.ml_cache_path, {"type": "anonymous"}) %}

  {% do server_container.depends.add_dependency(values.consts.ml_container_name, "service_healthy") %}
  {% do server_container.environment.add_env("IMMICH_MACHINE_LEARNING_ENABLED", "true") %}
  {% do server_container.environment.add_env("IMMICH_MACHINE_LEARNING_URL", "http://%s:%d"|format(values.consts.ml_container_name, values.consts.ml_port)) %}
{% endif %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do postgres.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do server_container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% if values.immich.enable_ml %}
    {% do ml_container.x.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endif %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

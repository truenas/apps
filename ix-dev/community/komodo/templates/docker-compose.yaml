{% set tpl = ix_lib.base.render.Render(values) %}

{% set core = tpl.add_container(values.consts.core_container_name, "image") %}
{% set periphery = tpl.add_container(values.consts.periphery_container_name, "periphery_image") %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.consts.run_as_user, "gid": values.consts.run_as_group, "mode": "check"} %}

{% set mongo_config = {
  "user": values.consts.db_user,
  "password": values.komodo.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.mongodb_data,
} %}
{% set mongo = tpl.deps.mongodb(values.consts.mongo_container_name, "mongo_image", mongo_config, perm_container) %}

{# Prevent Komodo from stopping itself with StopAllContainers #}
{% do core.labels.add_label("komodo.skip", "true") %}
{% do periphery.labels.add_label("komodo.skip", "true") %}
{% do mongo.container.labels.add_label("komodo.skip", "true") %}

{# {% do periphery.set_user(values.consts.run_as_user, values.consts.run_as_group) %} #}
{% do periphery.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "path": "/api/heartbeat"}) %}
{# TODO: check if we want to allow multiple passkeys #}
{% do periphery.environment.add_env("KOMODO_PASSKEYS", values.komodo.passkey) %}
{% do periphery.environment.add_env("PERIPHERY_SSL_ENABLED", true) %}
{% do periphery.environment.add_env("PERIPHERY_PORT", values.consts.internal_periphery_port) %}
{% do periphery.environment.add_user_envs(values.komodo.additional_envs) %}

{% do periphery.add_docker_socket(read_only=False) %}
{% do periphery.add_storage("/proc", {"type": "host_path", "host_path_config": {"path": "/proc", "read_only": False}}) %}

{# {% do core.set_user(values.consts.run_as_user, values.consts.run_as_group) %} #}
{% do core.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "path": "/api/heartbeat"}) %}
{% do core.depends.add_dependency(values.consts.mongo_container_name, "service_healthy") %}

{% do core.environment.add_env("KOMODO_PASSKEY", values.komodo.passkey) %}
{% do core.environment.add_env("KOMODO_JWT_SECRET", values.komodo.jwt_secret) %}
{% do core.environment.add_env("KOMODO_FIRST_SERVER", "https://%s:%d"|format(values.consts.periphery_container_name, values.consts.internal_periphery_port)) %}
{% do core.environment.add_env("KOMODO_PORT", values.network.web_port.port_number) %}
{% do core.environment.add_env("KOMODO_DATABASE_ADDRESS", mongo.get_url("host_port")) %}
{% do core.environment.add_env("KOMODO_DATABASE_USERNAME", values.consts.db_user) %}
{% do core.environment.add_env("KOMODO_DATABASE_PASSWORD", values.komodo.db_password) %}
{% do core.environment.add_env("KOMODO_DATABASE_DB_NAME", values.consts.db_name) %}
{% do core.environment.add_user_envs(values.komodo.additional_envs) %}

{% do core.add_port(values.network.web_port) %}

{% do core.add_storage("/repo-cache", values.storage.repo_cache) %}
{% do core.add_storage("/syncs", values.storage.syncs) %}

{# Note that the PERIPHERY_ROOT_DIRECTORY (container path) must be the SAME path as the host path #}
{% set periphery_host_path = tpl.funcs.get_host_path(values.storage.periphery_root) %}
{% do periphery.add_storage(periphery_host_path, values.storage.periphery_root) %}
{% do periphery.environment.add_env("PERIPHERY_ROOT_DIRECTORY", periphery_host_path) %}

{% for store in values.storage.additional_storage %}
  {% do core.add_storage(store.mount_path, store) %}
  {% do periphery.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do core.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do periphery.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do mongo.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port.port_number}) %}

{{ tpl.render() | tojson }}

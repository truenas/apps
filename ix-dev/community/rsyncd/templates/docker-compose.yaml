{% import "rsync_macros/rsyncd.conf" as rsyncd_conf %}

{# Stores storage items that contains info for volumes, vol mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"})) %}

{% for mod in values.rsyncd.rsync_modules if mod.enabled %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data={
    "type": "host_path",
    "mount_path": "%s/%s"|format(values.consts.module_base_path, mod.name),
    "host_path_config": {"path": mod.host_path}
  }, values=values)) %}
{% endfor %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

configs:
  rsyncd.conf:
    content: {{ rsyncd_conf.rsyncd_conf(values=values, ix_lib=ix_lib) | tojson }}

{# Containers #}
services:
  {{ values.consts.rsyncd_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    configs:
      - source: rsyncd.conf
        target: {{ values.consts.rsync_conf_path }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETUID", "SETGID", "SYS_CHROOT"]) %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("pgrep rsync") | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.rsyncd.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.rsync_port, "published": values.network.rsync_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("RSync Daemon") | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set app = tpl.add_container(values.consts.chatwoot_container_name, "image") %}
{% set sidekiq = tpl.add_container(values.consts.sidekiq_container_name, "image") %}
{% set migrations = tpl.add_container(values.consts.migrations_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.chatwoot.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.chatwoot.postgres_image_selector,
  pg_config, perm_container
) %}

{% set redis_config = {
  "password": values.chatwoot.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set containers = [app, sidekiq, migrations] %}
{% for c in containers %}
  {% do c.environment.add_env("NODE_ENV", "production") %}
  {% do c.environment.add_env("RAILS_ENV", "production") %}
  {% do c.environment.add_env("INSTALLATION_ENV", "docker") %}
  {% do c.environment.add_env("SECRET_KEY_BASE", values.chatwoot.secret_key_base) %}
  {% do c.environment.add_env("REDIS_URL", redis.get_url("redis")) %}
  {% do c.environment.add_env("REDIS_PASSWORD", values.chatwoot.redis_password) %}
  {% do c.environment.add_env("POSTGRES_HOST", values.consts.postgres_container_name) %}
  {% do c.environment.add_env("POSTGRES_USERNAME", values.consts.db_user) %}
  {% do c.environment.add_env("POSTGRES_PASSWORD", values.chatwoot.db_password) %}
  {% do c.environment.add_env("POSTGRES_DATABASE", values.consts.db_name) %}
  {% do c.environment.add_env("ACTIVE_STORAGE_SERVICE", "local") %}
  {% do c.environment.add_env("ENABLE_ACCOUNT_SIGNUP", values.chatwoot.enable_account_signup) %}
  {% do c.environment.add_env("FRONTEND_URL", values.chatwoot.frontend_url) %}

  {% do c.environment.add_user_envs(values.chatwoot.additional_envs) %}
  {% do c.add_storage("/app/storage", values.storage.data) %}

  {% for store in values.storage.additional_storage %}
    {% do c.add_storage(store.mount_path, store) %}
    {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
  {% endfor %}
{% endfor %}

{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}

{# Migrations #}
{% do migrations.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do migrations.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do migrations.restart.set_policy("on-failure", 1) %}
{% do migrations.healthcheck.disable() %}
{% do migrations.deploy.resources.set_profile("low") %}
{% do migrations.remove_devices() %}
{% do migrations.set_command(["bundle", "exec", "rails", "db:chatwoot_prepare"]) %}

{# Sidekiq #}
{% do sidekiq.healthcheck.set_custom_test("pgrep -f sidekiq") %}
{% do sidekiq.set_command(["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]) %}
{% do sidekiq.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do sidekiq.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do sidekiq.depends.add_dependency(values.consts.migrations_container_name, "service_completed_successfully") %}

{# Application #}
{% do app.healthcheck.set_test("wget", {"port": values.network.web_port.port_number, "path": "/api"}) %}
{% do app.set_command(["bundle", "exec", "rails", "s", "-p", values.network.web_port.port_number, "-b", "::"]) %}
{% do app.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do app.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do app.depends.add_dependency(values.consts.migrations_container_name, "service_completed_successfully") %}

{% do app.add_port(values.network.web_port) %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% for c in containers %}
    {% do c.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endfor %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

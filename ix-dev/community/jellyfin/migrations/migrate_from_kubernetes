import os
import sys
import json

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "TZ": config["TZ"],
        "jellyfin": {
            "additional_envs": config["jellyfinConfig"].get("additionalEnvs", []),
            "publish_server_url": config["jellyfinConfig"].get("publishServerUrl", ""),
        },
        "run_as": {
            "user": config["jellyfinRunAs"].get("user", 568),
            "group": config["jellyfinRunAs"].get("group", 568),
        },
        "network": {
            "host_network": config["jellyfinNetwork"].get("hostNetwork", False),
            "web_port": config["jellyfinNetwork"].get("webPort", 30013),
        },
        "storage": {
            "config": migrate_storage_item(config["jellyfinStorage"]["config"]),
            "cache": migrate_storage_item(config["jellyfinStorage"]["cache"]),
            "transcodes": migrate_storage_item(config["jellyfinStorage"]["transcodes"]),
            "additional_storage": [
                migrate_storage_item(item)
                for item in config["jellyfinStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    data = {
        "config": {
            "TZ": "Europe/Athens",
            "global": {
                "ixChartContext": {
                    "addNvidiaRuntimeClass": False,
                    "hasNFSCSI": True,
                    "hasSMBCSI": True,
                    "isInstall": True,
                    "isStopped": False,
                    "isUpdate": False,
                    "isUpgrade": False,
                    "kubernetes_config": {
                        "cluster_cidr": "172.16.0.0/16",
                        "cluster_dns_ip": "172.17.0.10",
                        "service_cidr": "172.17.0.0/16",
                    },
                    "nfsProvisioner": "nfs.csi.k8s.io",
                    "nvidiaRuntimeClassName": "nvidia",
                    "operation": "INSTALL",
                    "smbProvisioner": "smb.csi.k8s.io",
                    "storageClassName": "ix-storage-class-jellyfin",
                    "upgradeMetadata": {},
                }
            },
            "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "jellyfin/jellyfin",
                "tag": "10.9.8",
            },
            "ixCertificateAuthorities": {},
            "ixCertificates": {},
            "ixChartContext": {
                "addNvidiaRuntimeClass": False,
                "hasNFSCSI": True,
                "hasSMBCSI": True,
                "isInstall": True,
                "isStopped": False,
                "isUpdate": False,
                "isUpgrade": False,
                "kubernetes_config": {
                    "cluster_cidr": "172.16.0.0/16",
                    "cluster_dns_ip": "172.17.0.10",
                    "service_cidr": "172.17.0.0/16",
                },
                "nfsProvisioner": "nfs.csi.k8s.io",
                "nvidiaRuntimeClassName": "nvidia",
                "operation": "INSTALL",
                "smbProvisioner": "smb.csi.k8s.io",
                "storageClassName": "ix-storage-class-jellyfin",
                "upgradeMetadata": {},
            },
            "ixExternalInterfacesConfiguration": [],
            "ixExternalInterfacesConfigurationNames": [],
            "ixVolumes": [
                {
                    "hostPath": "/mnt/fastpool/ix-applications/releases/jellyfin/volumes/ix_volumes/config"
                },
                {
                    "hostPath": "/mnt/fastpool/ix-applications/releases/jellyfin/volumes/ix_volumes/cache"
                },
                {
                    "hostPath": "/mnt/fastpool/ix-applications/releases/jellyfin/volumes/ix_volumes/transcodes"
                },
            ],
            "jellyfinConfig": {
                "additionalEnvs": [],
                "publishServerUrl": "",
                "publishedServerUrl": "",
            },
            "jellyfinGPU": {
                "amd.com/gpu": 0,
                "gpu.intel.com/i915": 0,
                "nvidia.com/gpu": 0,
            },
            "jellyfinNetwork": {"hostNetwork": False, "webPort": 30013},
            "jellyfinRunAs": {"group": 568, "user": 568},
            "jellyfinStorage": {
                "additionalStorages": [],
                "cache": {
                    "ixVolumeConfig": {"aclEnable": False, "datasetName": "cache"},
                    "type": "ixVolume",
                },
                "config": {
                    "ixVolumeConfig": {"aclEnable": False, "datasetName": "config"},
                    "type": "ixVolume",
                },
                "transcodes": {
                    "ixVolumeConfig": {"aclEnable": False, "datasetName": "transcodes"},
                    "type": "ixVolume",
                },
            },
            "release_name": "jellyfin",
            "resources": {"limits": {"cpu": "4000m", "memory": "8Gi"}},
        }
    }
    print(json.dumps(migrate(data)))
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(json.dumps(migrate(json.loads(f.read()))))

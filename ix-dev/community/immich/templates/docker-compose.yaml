{% set tpl = ix_lib.base.render.Render(values) %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.immich.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.pgvecto_container_name, "pgvecto_image", pg_config, perm_container) %}
{% do postgres.container.environment.add_env("DB_STORAGE_TYPE", values.immich.db_storage_type) %}

{% set redis_config = {
  "password": values.immich.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set ml_container = namespace(x=None) %}

{% set server_container = tpl.add_container(values.consts.server_container_name, "image") %}
{% do server_container.set_user(values.run_as.user, values.run_as.group) %}
{% do server_container.healthcheck.set_custom_test("/usr/src/app/bin/immich-healthcheck") %}
{% do server_container.depends.add_dependency(values.consts.pgvecto_container_name, "service_healthy") %}
{% do server_container.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}

{% set base_path = "/usr/src/app/upload" %}
{% if values.storage.use_old_storage_config %}
  {% do server_container.add_storage("%s/upload"|format(base_path), values.storage.uploads) %}
  {% do perm_container.add_or_skip_action("uploads", values.storage.uploads, perms_config) %}

  {% do server_container.add_storage("%s/thumbs"|format(base_path), values.storage.thumbs) %}
  {% do perm_container.add_or_skip_action("thumbs", values.storage.thumbs, perms_config) %}

  {% do server_container.add_storage("%s/library"|format(base_path), values.storage.library) %}
  {% do perm_container.add_or_skip_action("library", values.storage.library, perms_config) %}

  {% do server_container.add_storage("%s/profile"|format(base_path), values.storage.profile) %}
  {% do perm_container.add_or_skip_action("profile", values.storage.profile, perms_config) %}

  {% do server_container.add_storage("%s/backups"|format(base_path), values.storage.backups) %}
  {% do perm_container.add_or_skip_action("backups", values.storage.backups, perms_config) %}

  {% do server_container.add_storage("%s/encoded-video"|format(base_path), values.storage.video) %}
  {% do perm_container.add_or_skip_action("video", values.storage.video, perms_config) %}
  {# TODO: Add warning and documentation #}
  {% do tpl.notes.add_warning(
    "The storage configuration you are using is deprecated and will be removed in a future version. Please migrate to the new storage configuration format.\n"
    "What you essentially have to do is to create a new dataset/directory, move your data there and then update the configuration by unchecking the 'Use old storage config' option.\n"
    "And pointing the 'Data Storage' to the new dataset/directory.\n"
    "For example if you create a new dataset at '/mnt/tank/immich'\n"
    "In this directory create 2 datasets/directories:\n"
    "/mnt/tank/immich/data and /mnt/tank/immich/postgres-data\n"
    "Now inside the /mnt/tank/immich/data directory create the following directories (NOT datasets):\n"
    "`mkdir -p /mnt/tank/immich/data/{uploads,thumbs,library,profile,backups,encoded-video}`\n"
    "Then you have to move your data from the old separate dataset/directories to the new ones.\n"
    "For example /mnt/tank/old-immich-data/uploads to /mnt/tank/immich/data/uploads.\n"
  ) %}
{% else %}
  {% do server_container.add_storage(base_path, values.storage.data) %}
  {% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}
{% endif %}

{% for store in values.storage.additional_storage %}
  {% do server_container.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% do server_container.add_port(values.network.web_port) %}

{% do server_container.environment.add_env("NODE_ENV", "production") %}
{% do server_container.environment.add_env("IMMICH_LOG_LEVEL", values.immich.log_level) %}
{% do server_container.environment.add_env("IMMICH_PORT", values.network.web_port.port_number) %}
{% do server_container.environment.add_env("DB_USERNAME", values.consts.db_user) %}
{% do server_container.environment.add_env("DB_PASSWORD", values.immich.db_password) %}
{% do server_container.environment.add_env("DB_HOSTNAME", values.consts.pgvecto_container_name) %}
{% do server_container.environment.add_env("DB_DATABASE_NAME", values.consts.db_name) %}
{% do server_container.environment.add_env("DB_PORT", "5432") %}
{% do server_container.environment.add_env("REDIS_HOSTNAME", values.consts.redis_container_name) %}
{% do server_container.environment.add_env("REDIS_PASSWORD", values.immich.redis_password) %}
{% do server_container.environment.add_env("REDIS_PORT", "6379") %}
{% do server_container.environment.add_env("REDIS_DBINDEX", "0") %}
{% do server_container.environment.add_user_envs(values.immich.additional_envs) %}

{% if values.immich.enable_ml %}
  {% set ml_container.x = tpl.add_container(values.consts.ml_container_name, values.immich.ml_image_selector) %}
  {% do ml_container.x.set_user(values.run_as.user, values.run_as.group) %}
  {% do ml_container.x.healthcheck.set_custom_test("python3 healthcheck.py") %}
  {% do ml_container.x.environment.add_env("NODE_ENV", "production") %}
  {% do ml_container.x.environment.add_env("IMMICH_LOG_LEVEL", values.immich.log_level) %}
  {% do ml_container.x.environment.add_env("IMMICH_PORT", values.consts.ml_port) %}
  {% do ml_container.x.environment.add_env("MACHINE_LEARNING_CACHE_FOLDER", values.consts.ml_cache_path) %}
  {% do ml_container.x.environment.add_env("TRANSFORMERS_CACHE", values.consts.ml_cache_path) %}
  {% do ml_container.x.environment.add_env("HF_HOME", values.consts.ml_cache_path) %}
  {% do ml_container.x.environment.add_env("MPLCONFIGDIR", "%s/matplotlib"|format(values.consts.ml_cache_path)) %}
  {% if values.immich.hugging_face_endpoint %}
    {% do ml_container.x.environment.add_env("HF_ENDPOINT", values.immich.hugging_face_endpoint) %}
  {% endif %}
  {% do ml_container.x.environment.add_user_envs(values.immich.additional_envs) %}
  {% set ml_cache_config = dict(values.storage.ml_cache, **{"volume_config": {"volume_name": "ml-cache"}}) %}
  {% do ml_container.x.add_storage(values.consts.ml_cache_path, ml_cache_config) %}
  {% do perm_container.add_or_skip_action("ml-cache", ml_cache_config, perms_config) %}

  {% do server_container.depends.add_dependency(values.consts.ml_container_name, "service_healthy") %}
  {% do server_container.environment.add_env("IMMICH_MACHINE_LEARNING_ENABLED", "true") %}
  {% do server_container.environment.add_env("IMMICH_MACHINE_LEARNING_URL", "http://%s:%d"|format(values.consts.ml_container_name, values.consts.ml_port)) %}
{% endif %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do server_container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% if values.immich.enable_ml %}
    {% do ml_container.x.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endif %}
{% endif %}

{% do tpl.portals.add(values.network.web_port) %}

{{ tpl.render() | tojson }}

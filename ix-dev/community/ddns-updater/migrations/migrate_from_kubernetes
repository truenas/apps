#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate_provider(item):
    if not item:
        return {}

    result = {
        "provider": item["provider"],
        "domain": item["domain"],
        "host": item["host"],
        "ip_version": item["ipVersion"],
    }
    match item["provider"]:
        case "aliyun":
            result["aliyun_access_key"] = item["aliyunAccessKey"]
            result["aliyun_secret_key"] = item["aliyunSecret"]
        case "allinkl":
            result["allinkl_username"] = item["allinklUsername"]
            result["allinkl_password"] = item["allinklPassword"]
        case "cloudflare":
            result["cloudflare_zone_id"] = item["cloudflareZoneID"]
            result["cloudflare_ttl"] = item["cloudflareTtl"]
            result["cloudflare_proxied"] = item["cloudflareProxied"]
            result["cloudflare_token"] = item["cloudflareToken"]
            result["cloudflare_user_service_key"] = item["cloudflareUserServiceKey"]
            result["cloudflare_email"] = item["cloudflareEmail"]
            result["cloudflare_api_key"] = item["cloudflareApiKey"]
        case "dd24":
            result["dd24_password"] = item["dd24Password"]
        case "ddnss":
            result["ddnss_username"] = item["ddnssUsername"]
            result["ddnss_password"] = item["ddnssPassword"]
            result["ddnss_dual_stack"] = item["ddnssDualStack"]
        case "desec":
            result["desec_token"] = item["desecToken"]
        case "digitalocean":
            result["digital_ocean_token"] = item["digitalOceanToken"]
        case "dnsomatic":
            result["dnsomatic_username"] = item["dnsOMaticUsername"]
            result["dnsomatic_password"] = item["dnsOMaticPassword"]
        case "dnspod":
            result["dnspod_token"] = item["dnsPodToken"]
        case "dondominio":
            result["dondominio_username"] = item["donDominioUsername"]
            result["dondominio_password"] = item["donDominioPassword"]
        case "dreamhost":
            result["dreamhost_key"] = item["dreamHostKey"]
        case "duckdns":
            result["duckdns_token"] = item["duckdnsToken"]
        case "dyn":
            result["dyn_client_key"] = item["dynClientKey"]
            result["dyn_username"] = item["dynUsername"]
        case "dynu":
            result["dynu_username"] = item["dynuUsername"]
            result["dynu_password"] = item["dynuPassword"]
            result["dynu_group"] = item["dynuGroup"]
        case "dynv6":
            result["dynv6_token"] = item["dynv6Token"]
        case "easydns":
            result["easydns_username"] = item["easyDnsUsername"]
            result["easydns_token"] = item["easyDnsToken"]
        case "freedns":
            result["freedns_token"] = item["freeDnsToken"]
        case "gandi":
            result["gandi_key"] = item["gandiKey"]
            result["gandi_ttl"] = item["gandiTtl"]
        case "gcp":
            result["gcp_project"] = item["gcpProject"]
            result["gcp_zone"] = item["gcpZone"]
            result["gcp_credentials"] = item["gcpCredentials"]
        case "godaddy":
            result["godaddy_key"] = item["godaddyKey"]
            result["godaddy_secret"] = item["godaddySecret"]
        case "goip":
            result["goip_username"] = item["goipUsername"]
            result["goip_password"] = item["goipPassword"]
        case "he":
            result["he_password"] = item["hePassword"]
        case "hetzner":
            result["hetzner_token"] = item["hetznerToken"]
            result["hetzner_zone_identifier"] = item["hetznerZoneIdentifier"]
            result["hetzner_ttl"] = item["hetznerTtl"]
        case "infomaniak":
            result["infomaniak_username"] = item["infomaniakUsername"]
            result["infomaniak_password"] = item["infomaniakPassword"]
        case "inwx":
            result["inwx_username"] = item["inwxUsername"]
            result["inwx_password"] = item["inwxPassword"]
        case "ionos":
            result["ionos_api_key"] = item["ionosApiKey"]
        case "linode":
            result["linode_token"] = item["linodeToken"]
        case "luadns":
            result["luadns_token"] = item["luadnsToken"]
            result["luadns_email"] = item["luadnsEmail"]
        case "namecheap":
            result["namecheap_password"] = item["namecheapPassword"]
        case "name.com":
            result["namecom_username"] = item["namecomUsername"]
            result["namecom_token"] = item["namecomToken"]
            result["namecom_ttl"] = item["namecomTtl"]
        case "netcup":
            result["netcup_api_key"] = item["netcupApiKey"]
            result["netcup_password"] = item["netcupPassword"]
            result["netcup_customer_number"] = item["netcupCustomerNumber"]
        case "njalla":
            result["njalla_key"] = item["njallaKey"]
        case "noip":
            result["noip_username"] = item["noipUsername"]
            result["noip_password"] = item["noipPassword"]
        case "nowdns":
            result["nowdns_username"] = item["nowdnsUsername"]
            result["nowdns_password"] = item["nowdnsPassword"]
        case "opendns":
            result["opendns_username"] = item["opendnsUsername"]
            result["opendns_password"] = item["opendnsPassword"]
        case "ovh":
            result["ovh_mode"] = item["ovhMode"]
            result["ovh_username"] = item["ovhUsername"]
            result["ovh_password"] = item["ovhPassword"]
            result["ovh_api_endpoint"] = item["ovhApiEndpoint"]
            result["ovh_app_key"] = item["ovhAppKey"]
            result["ovh_app_secret"] = item["ovhAppSecret"]
            result["ovh_consumer_key"] = item["ovhConsumerKey"]
        case "porkbun":
            result["porkbun_api_key"] = item["porkbunApiKey"]
            result["porkbun_secret_api_key"] = item["porkbunSecretApiKey"]
            result["porkbun_ttl"] = item["porkbunTtl"]
        case "selfhost.de":
            result["selfhostde_username"] = item["selfhostdeUsername"]
            result["selfhostde_password"] = item["selfhostdePassword"]
        case "servercow":
            result["servercow_username"] = item["servercowUsername"]
            result["servercow_password"] = item["servercowPassword"]
            result["servercow_ttl"] = item["servercowTtl"]
        case "spdyn":
            result["spdyn_token"] = item["spdynToken"]
            result["spdyn_username"] = item["spdynUsername"]
            result["spdyn_password"] = item["spdynPassword"]
        case "strato":
            result["strato_password"] = item["stratoPassword"]
        case "variomedia":
            result["variomedia_password"] = item["variomediaPassword"]
            result["variomedia_email"] = item["variomediaEmail"]
        case "zoneedit":
            result["zoneedit_username"] = item["zoneeditUsername"]
            result["zoneedit_token"] = item["zoneeditToken"]

    return result


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "TZ": config["TZ"],
        "ddns": {
            "additional_envs": config["ddnsConfig"].get("additionalEnvs", []),
            "period": config["ddnsConfig"].get("period", "5m"),
            "update_cooldown_period": config["ddnsConfig"].get(
                "updateCooldownPeriod", "5m"
            ),
            "backup_period": config["ddnsConfig"].get("backupPeriod", "24h"),
            "http_timeout": config["ddnsConfig"].get("httpTimeout", "10s"),
            "public_dns_timeout": config["ddnsConfig"].get("publicIpDnsTimeout", "3s"),
            "shoutrrr_addresses": config["ddnsConfig"].get("shoutrrrAddresses", []),
            "public_ip_dns_providers": [
                {"provider": i["provider"]}
                for i in config["ddnsConfig"].get("publicIpDnsProviders", [])
            ],
            "public_ip_http_providers": config["ddnsConfig"].get(
                "publicIpHttpProviders", []
            ),
            "public_ipv4_http_providers": config["ddnsConfig"].get(
                "publicIpv4HttpProviders", []
            ),
            "public_ipv6_http_providers": config["ddnsConfig"].get(
                "publicIpv6HttpProviders", []
            ),
            "public_ip_fetchers": [
                {"provider": i["provider"]}
                for i in config["ddnsConfig"].get("publicIpFetchers", [])
            ],
            "config": [
                migrate_provider(i) for i in config["ddnsConfig"].get("config", [])
            ],
        },
        "run_as": {
            "user": config["ddnsRunAs"].get("user", 568),
            "group": config["ddnsRunAs"].get("group", 568),
        },
        "network": {
            "web_port": config["ddnsNetwork"].get("webPort", 30037),
            "host_network": config["ddnsNetwork"].get("hostNetwork", False),
        },
        "storage": {
            "data": migrate_storage_item(config["ddnsStorage"]["data"]),
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/root"}),
  values=values, perm_opts={"mount_path": "/mnt/rust_desk/data", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/rust_desk/tmp", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/rust_desk/dir_%s"|format(loop.index0), "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% set relays = namespace(items=[values.consts.rust_desk_relay_container_name]) %}
{% for relay in values.rust_desk.additional_relay_servers %}
  {% do relays.items.append(relay) %}
{% endfor %}

{# Containers #}
services:
  {{ values.consts.rust_desk_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    entrypoint:
      - hbbs
    command:
      - -r
      - "{{ relays.items | join(',') }}"
      {% if values.rust_desk.allow_only_encrypted_connections %}
      - -k
      - _
      {% endif %}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {"disable": true}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.rust_desk.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 21115, "published": values.network.nat_type_test_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 21116, "published": values.network.id_reg_hole_punch_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": 21116, "published": values.network.id_reg_hole_punch_port, "protocol": "udp"}) | tojson }}
      {% if values.network.enable_web_clients %}
      - {{ ix_lib.base.ports.get_port(port={"target": 21118, "published": values.network.server_web_clients_port}) | tojson }}
      {% endif %}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.rust_desk_relay_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    entrypoint:
      - hbbr
    {% if values.rust_desk.allow_only_encrypted_connections %}
    command:
      - -k
      - _
    {% endif %}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {"disable": true}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.rust_desk.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 21117, "published": values.network.relay_port}) | tojson }}
      {% if values.network.enable_web_clients %}
      - {{ ix_lib.base.ports.get_port(port={"target": 21119, "published": values.network.relay_web_clients_port}) | tojson }}
      {% endif %}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("rust_desk") | tojson }}

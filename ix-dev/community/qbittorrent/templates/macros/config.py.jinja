{% macro config_py(file = "", items = []) -%}
#!/usr/bin/env python3
import argparse
from configparser import ConfigParser

def parse_key(key: str) -> tuple[str, str]:
    """Parse key into section and option."""
    if '__' not in key:
        raise ValueError("Key must contain '__' to separate section and option")

    cfg = key.split('__')
    if len(cfg) < 2:
        raise ValueError("Key must have at least a section and option")

    section = cfg[0]
    option = '\\'.join(cfg[1:])
    return section, option

def update_config(config_file: str, key: str, value: str) -> None:
    """Update configuration file with the specified key and value."""
    # Initialize config parser
    c = ConfigParser()
    c.optionxform = str  # Preserve case sensitivity
    c.read(config_file)

    section, option = parse_key(key)

    # Create section if it doesn't exist
    if section not in c:
        c[section] = {}

    # Update the value
    c[section][option] = value

    # Save the changes
    with open(config_file, 'w') as f:
        c.write(f)
    print(f'Config updated: [{section}] {option} = {value}')

def main():
    try:
        {%- for item in items %}
        update_config("{{ file }}", "{{ item[0] }}", "{{ item[1] }}")
        {%- endfor %}
    except ValueError as e:
        print(f"Error: {e}")
        exit(1)

if __name__ == "__main__":
    main()
{% endmacro %}

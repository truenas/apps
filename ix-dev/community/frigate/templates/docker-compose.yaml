{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": "/config"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.media, **{"mount_path": "/media"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.cache, **{"mount_path": "/tmp/cache"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ values.consts.frigate_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name=values.frigate.image_selector) }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources, [{"host_device": values.consts.usb_bus}] if values.frigate.mount_usb_bus else []) | tojson }}
    shm_size: {{ "%dM" | format(values.frigate.shm_size_mb | default(30)) }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(port=values.consts.internal_no_auth_port, path="/api") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={}, user=values.frigate.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_web_port, "published": values.network.web_port}) | tojson }}
      {% if values.network.enable_no_auth %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_no_auth_port, "published": values.network.no_auth_port}) | tojson }}
      {% endif %}
      {% if values.network.enable_rtsp %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_rtsp_port, "published": values.network.rtsp_port}) | tojson }}
      {% endif %}
      {% if values.network.enable_webrtc %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_webrtc_port, "published": values.network.webrtc_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.internal_webrtc_port, "published": values.network.webrtc_port, "protocol": "udp"}) | tojson }}
      {% endif %}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

{% set portals = namespace(items=[{"port": values.consts.internal_web_port if values.network.host_network else values.network.web_port, "scheme": "https"}]) %}
{% if values.network.enable_no_auth %}
  {% do portals.items.append({"name": "Web UI (No Auth)", "port": values.consts.internal_no_auth_port if values.network.host_network else values.network.no_auth_port}) %}
{% endif %}
x-portals: {{ ix_lib.base.metadata.get_portals(portals.items) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Frigate") | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.radicale_container_name, "image") %}
{% set scheme = "https" if values.network.certificate_id else "http" %}

{% do c1.add_caps(["CHOWN", "SETUID", "SETGID", "KILL"]) %}
{% do c1.set_init(true) %}
{% do c1.healthcheck.set_test("curl", {"port": values.network.web_port.port_number, "scheme": scheme}) %}

{% set cmd = namespace(x=[
  "/venv/bin/radicale",
  "--config", "/config/config",
  "--hosts", "0.0.0.0:%d"|format(values.network.web_port.port_number),
  "--server-ssl" if values.network.certificate_id else "--no-server-ssl",
]) %}

{% if values.network.certificate_id %}
  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c1.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c1.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}

  {% do cmd.x.extend(["--server-certificate", values.consts.ssl_cert_path]) %}
  {% do cmd.x.extend(["--server-key", values.consts.ssl_key_path]) %}
{% endif %}

{% do c1.set_command(cmd.x) %}
{% do c1.environment.add_user_envs(values.radicale.additional_envs) %}

{% do c1.add_port(values.network.web_port) %}

{% do c1.add_storage("/data", values.storage.data) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% do tpl.portals.add(values.network.web_port, {"scheme": scheme}) %}

{{ tpl.render() | tojson }}

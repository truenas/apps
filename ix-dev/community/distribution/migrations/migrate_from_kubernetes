#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "distribution": {
            "http_secret": get_value_from_secret(
                k8s_secrets, "distribution", "REGISTRY_HTTP_SECRET"
            ),
            "basic_auth_users": [
                {"user": i["user"], "password": i["pass"]}
                for i in config["distributionConfig"].get("basicAuthUsers", [])
            ],
            "additional_envs": config["distributionConfig"].get("additionalEnvs", []),
        },
        "run_as": {
            "user": config["distributionRunAs"].get("user", 568),
            "group": config["distributionRunAs"].get("group", 568),
        },
        "network": {
            "api_port": config["distributionNetwork"].get("apiPort", 32400),
            "certificate_id": config["distributionNetwork"].get("certificateID", ""),
            "host_network": config["distributionNetwork"].get("hostNetwork", False),
        },
        "storage": {
            "use_filesystem_backend": config["distributionStorage"].get(
                "useFilesystemBackend", True
            ),
            **(
                {"data": (migrate_storage_item(config["distributionStorage"]["data"]))}
                if config["distributionStorage"].get("useFilesystemBackend", True)
                else {}
            ),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["distributionStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

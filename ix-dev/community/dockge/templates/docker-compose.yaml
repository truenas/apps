{% set dockge_container_name = "dockge" %}
{% set dockge_image = "louislam/dockge:1.4.2" %}

{# Stores storage items that contains info for volumes, vol mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% set data_path = "/app/data" %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": data_path}), ix_volumes=values.ixVolumes)) %}

{# Note that the DOCKGE_STACKS_DIR (container path) must be the SAME path as the host path #}
{% set stacks_host_path = ix_lib.base.storage.host_path(data=values.storage.stacks, ix_volumes=values.ixVolumes) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.stacks, **{"mount_path": stacks_host_path}), ix_volumes=values.ixVolumes)) %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{# Docker socket #}
{% set socket_path = "/var/run/docker.sock" %}
{% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(
  data={"type": "host_path", "mount_path": socket_path, "host_path_config": {"path": socket_path, "create_host_path": false} },
)) %}

{% for store in values.storage.additional_storage %}
  {% set _ = storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=ixVolumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% set ssl_key_path = "/app/ssl/key.pem" %}
{% set ssl_cert_path = "/app/ssl/cert.pem" %}
{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ixCertificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ixCertificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ dockge_container_name }}:
    user: "0:0"
    image: {{ dockge_image }}
    restart: unless-stopped
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ ssl_key_path }}
      - source: public
        target: {{ ssl_cert_path }}
    {% endif %}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "KILL", "SETGID", "SETUID", "SETPCAP", "SETFCAP"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(network.dns_opts) | tojson }}
    {% endif %}
    {% set test = "/app/extra/healthcheck" %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app=dict({
      "NODE_ENV": "production",
      "DOCKGE_PORT": values.network.web_port,
      "DOCKGE_STACKS_DIR": stacks_host_path,
      "DOCKGE_DATA_DIR": data_path
    }, **{"DOCKGE_SSL_KEY": ssl_key_path, "DOCKGE_SSL_CERT": ssl_cert_path} if values.network.certificate_id else {}
    ),user=values.dockge.additional_envs) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

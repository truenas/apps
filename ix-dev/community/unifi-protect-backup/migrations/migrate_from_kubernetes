#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "TZ": config["TZ"],
        "unifi_protect_backup": {
            "additional_envs": config["upbConfig"].get("additionalEnvs", []),
            "username": config["upbConfig"]["unifiProtectUsername"],
            "password": config["upbConfig"]["unifiProtectPassword"],
            "address": config["upbConfig"]["unifiProtectAddress"],
            "port": config["upbConfig"]["unifiProtectPort"],
            "ssl_verify": config["upbConfig"]["unifiProtectVerifySsl"],
            "skip_missing": config["upbConfig"]["skipMissing"],
            "ignore_cameras": config["upbConfig"].get("ignoreCameras", []),
            "detection_types": config["upbConfig"].get("detectionTypes", []),
            "rclone_destination": config["upbConfig"]["rcloneDestination"],
            "rclone_args": config["upbConfig"].get("rcloneArgs", []),
            "rclone_purge_args": config["upbConfig"].get("rclonePurgeArgs", []),
        },
        "run_as": {
            "user": config["upbID"].get("user", 568),
            "group": config["upbID"].get("group", 568),
        },
        "storage": {
            "config": migrate_storage_item(config["upbStorage"]["config"]),
            "data": migrate_storage_item(config["upbStorage"]["data"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["upbStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

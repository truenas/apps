{% set minecraft_container_name = "minecraft" %}
{% set minecraft_images = {
  "j8_image": "itzg/minecraft-server:2024.6.1-java8",
  "j8_gce_image": "itzg/minecraft-server:2024.6.1-java8-graalvm-ce",
  "j8_j9_image": "itzg/minecraft-server:2024.6.1-java8-openj9",
  "j8_jdk_image": "itzg/minecraft-server:2024.6.1-java8-jdk",
  "j11_image": "itzg/minecraft-server:2024.6.0-java11",
  "j11_j9_image": "itzg/minecraft-server:2024.2.2-java11-openj9",
  "j11_jdk_image": "itzg/minecraft-server:2024.4.0-java11-jdk",
  "j17_image": "itzg/minecraft-server:2024.6.0-java17",
  "j17_j9_image": "itzg/minecraft-server:2024.2.2-java17-openj9",
  "j17_jdk_image": "itzg/minecraft-server:2024.6.0-java17-jdk",
  "j17_gce_image": "itzg/minecraft-server:2023.8.3-java17-graalvm-ce",
  "j17_alpine_image": "itzg/minecraft-server:2024.6.0-java17-alpine",
  "j19_image": "itzg/minecraft-server:2023.3.0-java19",
  "j21_image": "itzg/minecraft-server:2024.4.1-java21",
  "j21_g_image": "itzg/minecraft-server:2024.4.1-java21-graalvm",
  "j21_alpine_image": "itzg/minecraft-server:2024.4.1-java21-alpine",
} %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/data"}), ix_volumes=values.ix_volumes)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, ix_volumes=values.ix_volumes)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Containers #}
services:
  {{ minecraft_container_name }}:
    image: {{ minecraft_images[values.minecraft.image_selector] }}
    restart: unless-stopped
    tty: true
    stdin_open: true
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test="mc-health", start_period=120) | tojson }}
    {% set app_env = {
      "GUI": "FALSE",
      "EULA": values.minecraft.eula|string|upper,
      "SERVER_PORT": values.network.server_port,
      "VERSION": values.minecraft.version,
      "TYPE": values.minecraft.type,
      "MOTD": values.minecraft.motd,
      "DIFFICULTY": values.minecraft.difficulty,
      "MODE": values.minecraft.mode,
      "SERVER_NAME": values.minecraft.server_name,
      "MAX_PLAYERS": values.minecraft.max_players,
      "MAX_WORLD_SIZE": values.minecraft.max_world_size,
      "ALLOW_NETHER": values.minecraft.allow_nether|string|upper,
      "ANNOUNCE_PLAYER_ACHIEVMENTS": values.minecraft.announce_player_achievements|string|upper,
      "ENABLE_COMMAND_BLOCK": values.minecraft.enable_command_block|string|upper,
      "FORCE_GAMEMODE": values.minecraft.force_gamemode|string|upper,
      "GENERATE_STRUCTURES": values.minecraft.generate_structures|string|upper,
      "HARDCORE": values.minecraft.hardcore|string|upper,
      "MAX_BUILD_HEIGHT": values.minecraft.max_build_height,
      "SPAWN_ANIMALS": values.minecraft.spawn_animals|string|upper,
      "SPAWN_MONSTERS": values.minecraft.spawn_monsters|string|upper,
      "SPAWN_NPCS": values.minecraft.spawn_npcs|string|upper,
      "SPAWN_PROTECTION": values.minecraft.spawn_protection|string|upper,
      "VIEW_DISTANCE": values.minecraft.view_distance,
      "PVP": values.minecraft.pvp|string|upper,
      "LEVEL_TYPE": values.minecraft.level_type,
      "ALLOW_FLIGHT": values.minecraft.allow_flight|string|upper,
      "ONLINE_MODE": values.minecraft.online_mode|string|upper,
      "MAX_TICK_TIME": values.minecraft.max_tick_time,
    } %}
    {% if values.minecraft.seed and app_env.update({"SEED": values.minecraft.seed}) %}{% endif %}
    {% if values.minecraft.ops and app_env.update({"OPS": join(values.minecraft.ops, ",")}) %}{% endif %}
    {% if values.minecraft.whitelist and app_env.update({"WHITELIST": join(values.minecraft.whitelist, ",")}) %}{% endif %}
    {% if values.minecraft.rcon_enabled %}
      {% do app_env.update({
        "ENABLE_RCON": values.minecraft.rcon_enabled|string|upper,
        "RCON_PORT": values.network.rcon_port,
        "RCON_PASSWORD": values.minecraft.rcon_password,
      }) %}
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.minecraft.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.server_port, "published": values.network.server_port}) | tojson }}
      {% if values.minecraft.rcon_enabled %}
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.rcon_port, "published": values.network.rcon_port}) | tojson }}
      {% endif %}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

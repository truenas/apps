#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item
from migration_helpers.kubernetes_secrets import get_value_from_secret


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    k8s_secrets = values.get("release_secrets", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "roundcube": {
            "db_password": get_value_from_secret(
                k8s_secrets, "postgres-creds", "POSTGRES_PASSWORD"
            ),
            "default_host": config["roundcubeConfig"]["defaultHost"],
            "default_port": config["roundcubeConfig"]["defaultPort"],
            "smtp_server": config["roundcubeConfig"]["smtpServer"],
            "smtp_port": config["roundcubeConfig"]["smtpPort"],
            "skin": config["roundcubeConfig"]["skin"],
            "plugins": config["roundcubeConfig"].get("plugins", []),
            "aspell_dicts": config["roundcubeConfig"].get("aspellDicts", []),
            "upload_max_size": config["roundcubeConfig"]["uploadMaxSize"],
            "additional_envs": config["roundcubeConfig"].get("additionalEnvs", []),
        },
        "network": {
            "web_port": config["roundcubeNetwork"].get("webPort", 31007),
        },
        "storage": {
            "html": migrate_storage_item(config["roundcubeStorage"]["html"]),
            "config": migrate_storage_item(config["roundcubeStorage"]["config"]),
            "temps": migrate_storage_item(config["roundcubeStorage"]["temps"]),
            "postgres_data": migrate_storage_item(config["roundcubeStorage"]["pgData"]),
            "additional_storage": [
                migrate_storage_item(item, include_read_only=True)
                for item in config["roundcubeStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{% set tpl = ix_lib.base.render.Render(values) %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.firefly_iii.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, "postgres_image", pg_config, perm_container) %}

{% set redis_config = {
  "password": values.firefly_iii.redis_password,
  "volume": {"type": "temporary", "volume_config": {"volume_name": "redis-data"}},
} %}
{% set redis = tpl.deps.redis(values.consts.redis_container_name, "redis_image", redis_config, perm_container) %}

{% set app_url = values.firefly_iii.app_url.rstrip("/") %}
{% set static_cron_token = tpl.funcs.secure_string(32) %}

{% set c1 = tpl.add_container(values.consts.firefly_iii_container_name, "image") %}
{% set cron = tpl.add_container(values.consts.firefly_iii_cron_container_name, "alpine_image") %}
{% set importer = namespace(x=None) %}

{% do c1.set_user(0, 0) %}
{% do c1.add_caps(["CHOWN", "FOWNER", "SETUID", "SETGID"]) %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.redis_container_name, "service_healthy") %}
{% do c1.healthcheck.set_test("curl", {"port": 8080, "path": "/health"}) %}

{% do c1.ports.add_port(values.network.web_port, 8080) %}

{% do c1.environment.add_env("DB_CONNECTION", "pgsql") %}
{% do c1.environment.add_env("DB_HOST", values.consts.postgres_container_name) %}
{% do c1.environment.add_env("DB_PORT", 5432) %}
{% do c1.environment.add_env("DB_DATABASE", values.consts.db_name) %}
{% do c1.environment.add_env("DB_USERNAME", values.consts.db_user) %}
{% do c1.environment.add_env("DB_PASSWORD", values.firefly_iii.db_password) %}
{% do c1.environment.add_env("CACHE_DRIVER", "redis") %}
{% do c1.environment.add_env("SESSION_DRIVER", "redis") %}
{% do c1.environment.add_env("REDIS_HOST", values.consts.redis_container_name) %}
{% do c1.environment.add_env("REDIS_PASSWORD", values.firefly_iii.redis_password) %}
{% do c1.environment.add_env("REDIS_PORT", 6379) %}
{% do c1.environment.add_env("REDIS_USERNAME", "default") %}
{% do c1.environment.add_env("REDIS_DB", 0) %}
{% do c1.environment.add_env("REDIS_CACHE_DB", 1) %}
{% do c1.environment.add_env("APP_URL", app_url) %}
{% do c1.environment.add_env("APP_KEY", values.firefly_iii.app_key) %}
{% do c1.environment.add_env("STATIC_CRON_TOKEN", static_cron_token) %}
{% do c1.environment.add_user_envs(values.firefly_iii.additional_envs) %}

{% do c1.add_storage("/var/www/html/storage/upload", values.storage.uploads) %}
{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% do cron.deploy.resources.set_profile("low") %}
{% do cron.add_caps(["SETUID", "SETGID"]) %}
{% do cron.depends.add_dependency(values.consts.firefly_iii_container_name, "service_healthy") %}
{% do cron.healthcheck.set_custom_test("pidof busybox > /dev/null") %}
{% do cron.environment.add_env("CRON_TOKEN", static_cron_token) %}
{% do cron.set_entrypoint(["sh", "-c"]) %}
{% set cmd = [
  'echo "0 3 * * * wget -qO- http://%s:8080/api/v1/cron/$CRON_TOKEN" | crontab -'|format(values.consts.firefly_iii_container_name),
  '[[ $? -eq 0 ]] || { echo "Failed to set cron job"; exit 1; }',
  "crond -f -L /dev/stdout"
]|join("\n") %}
{% do cron.set_command([cmd]) %}

{% if values.firefly_iii.enable_importer %}
  {% set importer.x = tpl.add_container(values.consts.firefly_iii_importer_container_name, "importer_image") %}

  {% do importer.x.set_user(0, 0) %}
  {% do importer.x.add_caps(["CHOWN", "FOWNER", "SETUID", "SETGID"]) %}
  {% do importer.x.depends.add_dependency(values.consts.firefly_iii_container_name, "service_healthy") %}
  {% do importer.x.healthcheck.set_test("curl", {"port": 8080, "path": "/health"}) %}

  {% do importer.x.environment.add_env("FIREFLY_III_URL", "http://%s:8080"|format(values.consts.firefly_iii_container_name)) %}
  {% do importer.x.environment.add_env("EXPECT_SECURE_URL", false) %}
  {% do importer.x.environment.add_env("VANITY_URL", app_url) %}
  {% do importer.x.environment.add_user_envs(values.firefly_iii.additional_importer_envs) %}

  {% do importer.x.ports.add_port(values.network.importer_port, 8080) %}
{% endif %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do cron.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do redis.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% if values.firefly_iii.enable_importer %}
    {% do importer.x.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endif %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}
{% if values.firefly_iii.enable_importer %}
  {% do tpl.portals.add_portal({"name": "Importer", "port": values.network.importer_port}) %}
{% endif %}

{{ tpl.render() | tojson }}

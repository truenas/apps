{% from "macros/caddyfile.conf.jinja" import caddyfile %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% if values.windmill.web_host.startswith("https://") or values.windmill.web_host.startswith("http://") %}
  {% do tpl.funcs.fail("Expected [windmill.web_host] to not start with [http(s)://]") %}
{% endif %}
{% if values.windmill.web_host.endswith("/") %}
  {% do tpl.funcs.fail("Expected [windmill.web_host] to not end with [/]") %}
{% endif %}
{% if ":" in values.windmill.web_host %}
  {% do tpl.funcs.fail("Expected [windmill.web_host] to not contain port [:###]") %}
{% endif %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.windmill.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.postgres_data
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  values.windmill.postgres_image_selector,
  pg_config, perm_container
) %}

{# Windmill Server Container #}
{% set c_server = tpl.add_container(values.consts.windmill_server_container_name, "image") %}
{% do c_server.set_user(0, 0) %}
{% do c_server.add_caps(["SETUID", "SETGID", "DAC_OVERRIDE", "FOWNER", "CHOWN"]) %}
{% do c_server.healthcheck.set_test("wget", {"port": 8000, "path": "/"}) %}

{% do c_server.environment.add_env("DATABASE_URL", postgres.get_url("postgres")) %}
{% do c_server.environment.add_env("MODE", "server") %}
{# TZ is already defined automatically from the library #}
{% do c_server.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_server.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_server.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}
{% do perm_container.add_or_skip_action("worker_logs", values.storage.worker_logs, perms_config) %}

{# Windmill Worker Container #}
{% set c_worker = tpl.add_container(values.consts.windmill_worker_container_name, "image") %}
{% do c_worker.set_user(0, 0) %}
{% do c_worker.add_caps(["SETUID", "SETGID", "DAC_OVERRIDE", "FOWNER", "CHOWN"]) %}
{% do c_worker.healthcheck.disable() %}

{% do c_worker.environment.add_env("DATABASE_URL", postgres.get_url("postgres")) %}
{% do c_worker.environment.add_env("MODE", "worker") %}
{% do c_worker.environment.add_env("WORKER_GROUP", "default") %}
{% do c_worker.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_worker.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_worker.add_storage("/tmp/windmill/cache", values.storage.worker_cache) %}
{% do perm_container.add_or_skip_action("worker_cache", values.storage.worker_cache, perms_config) %}

{% do c_worker.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}

{% if values.worker.mount_docker_socket %}
{% do c_worker.add_docker_socket(read_only=False) %}
{% endif %}

{# Commented out due to missing resources attribute
{% do c_worker.resources.set_limits({"cpu": values.resources.limits.worker_cpus, "memory": values.resources.limits.worker_memory}) %}
#}

{# Windmill Worker Native Container #}
{% set c_worker_native = tpl.add_container(values.consts.windmill_worker_native_container_name, "image") %}
{% do c_worker_native.set_user(0, 0) %}
{% do c_worker_native.add_caps(["SETUID", "SETGID", "DAC_OVERRIDE", "FOWNER", "CHOWN"]) %}
{% do c_worker_native.healthcheck.disable() %}

{% do c_worker_native.environment.add_env("DATABASE_URL", postgres.get_url("postgres")) %}
{% do c_worker_native.environment.add_env("MODE", "worker") %}
{% do c_worker_native.environment.add_env("WORKER_GROUP", "native") %}
{% do c_worker_native.environment.add_env("NUM_WORKERS", values.worker.native_num_workers) %}
{% do c_worker_native.environment.add_env("SLEEP_QUEUE", 200) %}
{% do c_worker_native.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_worker_native.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_worker_native.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}

{# Windmill Worker Reports Container #}
{% if values.windmill.enable_report_workers %}
{% set c_worker_reports = tpl.add_container(values.consts.windmill_worker_reports_container_name, "image") %}
{# required to let the worker install dependencies on startup #}
{% do c_worker_reports.set_user(0, 0) %}
{% do c_worker_reports.add_caps(["SETUID", "SETGID", "DAC_OVERRIDE", "FOWNER", "CHOWN"]) %}
{% do c_worker_reports.healthcheck.disable() %}

{% do c_worker_reports.environment.add_env("DATABASE_URL", postgres.get_url("postgres")) %}
{% do c_worker_reports.environment.add_env("MODE", "worker") %}
{% do c_worker_reports.environment.add_env("WORKER_GROUP", "reports") %}
{% do c_worker_reports.environment.add_env("NUM_WORKERS", values.worker.reports_num_workers) %}
{% do c_worker_reports.environment.add_env("SLEEP_QUEUE", 200) %}
{% do c_worker_reports.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_worker_reports.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_worker_reports.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}

{% endif %}

{# Commented out due to missing resources attribute
{% do c_worker_native.resources.set_limits({"cpu": values.resources.limits.worker_cpus, "memory": values.resources.limits.worker_memory}) %}
#}

{# LSP Container #}
{% set c_lsp = tpl.add_container(values.consts.lsp_container_name, "lsp_image") %}
{% do c_lsp.set_user(values.run_as.user, values.run_as.group) %}
{% do c_lsp.healthcheck.set_test("tcp", {"port": 3001}) %}

{% do c_lsp.add_storage("/pyls/.cache", values.storage.lsp_cache) %}
{% do perm_container.add_or_skip_action("lsp_cache", values.storage.lsp_cache, perms_config) %}

{# Caddy Container #}
{% set c_caddy = tpl.add_container(values.consts.caddy_container_name, "caddy_image") %}
{% do c_caddy.healthcheck.set_test("wget", {"port": 80, "path": "/"}) %}

{% do c_caddy.environment.add_env("BASE_URL", values.windmill.base_url) %}
{% do c_caddy.environment.add_env("ADDRESS", values.windmill.address) %}

{% do c_caddy.depends.add_dependency(values.consts.windmill_server_container_name, "service_healthy") %}
{% do c_caddy.depends.add_dependency(values.consts.lsp_container_name, "service_started") %}

{% do c_caddy.add_storage("/data", values.storage.caddy_data) %}
{% do perm_container.add_or_skip_action("caddy_data", values.storage.caddy_data, perms_config) %}

{% do c_caddy.configs.add("Caddyfile", caddyfile(values), "/etc/caddy/Caddyfile") %}

{% do c_caddy.ports.add_port(values.network.web_port.port_number, 80) %}
{% do c_caddy.ports.add_port(values.network.smtp_port.port_number, 25) %}

{% do c_caddy.add_caps(["NET_BIND_SERVICE", "CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}

{# Add additional storage to containers #}
{% for store in values.storage.additional_storage %}
  {% do c_server.add_storage(store.mount_path, store) %}
  {% do c_worker.add_storage(store.mount_path, store) %}
  {% do c_worker_native.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c_server.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_worker.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_worker_native.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_lsp.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_caddy.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port.port_number}) %}

{{ tpl.render() | tojson }}

{% set tpl = ix_lib.base.render.Render(values) %}

{% if values.windmill.web_host.startswith("https://") or values.windmill.web_host.startswith("http://") %}
  {% do tpl.funcs.fail("Expected [windmill.web_host] to not start with [http(s)://]") %}
{% endif %}
{% if values.windmill.web_host.endswith("/") %}
  {% do tpl.funcs.fail("Expected [windmill.web_host] to not end with [/]") %}
{% endif %}
{% if ":" in values.windmill.web_host %}
  {% do tpl.funcs.fail("Expected [windmill.web_host] to not contain port [:###]") %}
{% endif %}

{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.consts.db_user,
  "password": values.windmill.db_password,
  "database": values.consts.db_name,
  "volume": values.storage.db_data,
} %}
{% set postgres = tpl.deps.postgres(
  values.consts.postgres_container_name,
  "postgres_image",
  pg_config, perm_container
) %}

{% set proto = "https" if values.network.certificate_id else "http" %}
{% set database_url = "postgres://" + values.consts.db_user + ":" + values.windmill.db_password + "@" + values.consts.postgres_container_name + "/" + values.consts.db_name + "?sslmode=disable" %}
{% set wm_image = "ghcr.io/windmill-labs/windmill-ee:main" if values.optional.enterprise_edition else "ghcr.io/windmill-labs/windmill:main" %}

{# Windmill Server Container #}
{% set c_server = tpl.add_container(values.consts.windmill_server_container_name, "image") %}
{% do c_server.set_user(values.run_as.user, values.run_as.group) %}
{% do c_server.healthcheck.set_test("wget", {"port": 8000, "path": "/api/health", "scheme": "http"}) %}

{% do c_server.environment.add_env("DATABASE_URL", database_url) %}
{% do c_server.environment.add_env("MODE", "server") %}
{% do c_server.environment.add_env("TZ", values.TZ) %}
{% do c_server.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_server.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_server.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}
{% do perm_container.add_or_skip_action("worker_logs", values.storage.worker_logs, {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"}) %}

{% do c_server.expose.add_port(8000) %}
{% do c_server.expose.add_port(2525) %}

{# Windmill Worker Container #}
{% set c_worker = tpl.add_container(values.consts.windmill_worker_container_name, "image") %}
{% do c_worker.set_user(values.run_as.user, values.run_as.group) %}

{% do c_worker.environment.add_env("DATABASE_URL", database_url) %}
{% do c_worker.environment.add_env("MODE", "worker") %}
{% do c_worker.environment.add_env("WORKER_GROUP", "default") %}
{% do c_worker.environment.add_env("TZ", values.TZ) %}
{% do c_worker.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_worker.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_worker.add_storage("/tmp/windmill/cache", values.storage.worker_cache) %}
{% do perm_container.add_or_skip_action("worker_cache", values.storage.worker_cache, {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"}) %}

{% do c_worker.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}

{% if values.worker.mount_docker_socket %}
{% do c_worker.add_storage("/var/run/docker.sock", {"type": "host_path", "host_path_config": {"path": "/var/run/docker.sock"}}) %}
{% endif %}

{% do c_worker.resources.set_limits({"cpu": values.resources.limits.worker_cpus, "memory": values.resources.limits.worker_memory}) %}
{% do c_worker.scale.set_replicas(values.worker.replicas) %}

{# Windmill Worker Native Container #}
{% set c_worker_native = tpl.add_container(values.consts.windmill_worker_native_container_name, "image") %}
{% do c_worker_native.set_user(values.run_as.user, values.run_as.group) %}

{% do c_worker_native.environment.add_env("DATABASE_URL", database_url) %}
{% do c_worker_native.environment.add_env("MODE", "worker") %}
{% do c_worker_native.environment.add_env("WORKER_GROUP", "native") %}
{% do c_worker_native.environment.add_env("NUM_WORKERS", values.worker.native_num_workers) %}
{% do c_worker_native.environment.add_env("SLEEP_QUEUE", "200") %}
{% do c_worker_native.environment.add_env("TZ", values.TZ) %}
{% do c_worker_native.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_worker_native.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_worker_native.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}

{% do c_worker_native.resources.set_limits({"cpu": values.resources.limits.worker_cpus, "memory": values.resources.limits.worker_memory}) %}
{% do c_worker_native.scale.set_replicas(values.worker.native_replicas) %}

{# Windmill Indexer Container (Optional) #}
{% if values.optional.enable_indexer %}
{% set c_indexer = tpl.add_container(values.consts.windmill_indexer_container_name, "image") %}
{% do c_indexer.set_user(values.run_as.user, values.run_as.group) %}

{% do c_indexer.environment.add_env("PORT", "8002") %}
{% do c_indexer.environment.add_env("DATABASE_URL", database_url) %}
{% do c_indexer.environment.add_env("MODE", "indexer") %}
{% do c_indexer.environment.add_env("TZ", values.TZ) %}
{% do c_indexer.environment.add_user_envs(values.windmill.additional_envs) %}

{% do c_indexer.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}

{% do c_indexer.add_storage("/tmp/windmill/search", values.storage.windmill_index) %}
{% do perm_container.add_or_skip_action("windmill_index", values.storage.windmill_index, {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"}) %}

{% do c_indexer.add_storage("/tmp/windmill/logs", values.storage.worker_logs) %}

{% do c_indexer.expose.add_port(8002) %}
{% endif %}

{# LSP Container #}
{% set c_lsp = tpl.add_container(values.consts.lsp_container_name, "lsp_image") %}
{% do c_lsp.set_user(values.run_as.user, values.run_as.group) %}

{% do c_lsp.add_storage("/pyls/.cache", values.storage.lsp_cache) %}
{% do perm_container.add_or_skip_action("lsp_cache", values.storage.lsp_cache, {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"}) %}

{% do c_lsp.expose.add_port(3001) %}

{# Multiplayer Container (Optional) #}
{% if values.optional.enable_multiplayer %}
{% set c_multiplayer = tpl.add_container(values.consts.multiplayer_container_name, "multiplayer_image") %}
{% do c_multiplayer.set_user(values.run_as.user, values.run_as.group) %}

{% do c_multiplayer.expose.add_port(3002) %}
{% endif %}

{# Caddy Container #}
{% set c_caddy = tpl.add_container(values.consts.caddy_container_name, "caddy_image") %}

{% do c_caddy.environment.add_env("BASE_URL", values.windmill.base_url) %}
{% do c_caddy.environment.add_env("ADDRESS", values.windmill.address) %}

{% do c_caddy.depends.add_dependency(values.consts.windmill_server_container_name, "service_healthy") %}
{% do c_caddy.depends.add_dependency(values.consts.lsp_container_name, "service_started") %}
{% if values.optional.enable_multiplayer %}
{% do c_caddy.depends.add_dependency(values.consts.multiplayer_container_name, "service_started") %}
{% endif %}
{% if values.optional.enable_indexer %}
{% do c_caddy.depends.add_dependency(values.consts.windmill_indexer_container_name, "service_started") %}
{% endif %}

{% do c_caddy.add_storage("/data", values.storage.caddy_data) %}
{% do perm_container.add_or_skip_action("caddy_data", values.storage.caddy_data, {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"}) %}

{% do c_caddy.configs.add("Caddyfile", "Caddyfile", "/etc/caddy/Caddyfile") %}

{% do c_caddy.ports.add_port(values.network.web_port, 80) %}
{% do c_caddy.ports.add_port(values.network.smtp_port, 25) %}

{% if values.network.certificate_id %}
  {% set cert = values.ix_certificates[values.network.certificate_id] %}
  {% do c_caddy.configs.add("private", cert.privatekey, values.consts.ssl_key_path) %}
  {% do c_caddy.configs.add("public", cert.certificate, values.consts.ssl_cert_path) %}
{% endif %}

{# Add additional storage to containers #}
{% for store in values.storage.additional_storage %}
  {% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}
  {% do c_server.add_storage(store.mount_path, store) %}
  {% do c_worker.add_storage(store.mount_path, store) %}
  {% do c_worker_native.add_storage(store.mount_path, store) %}
  {% if values.optional.enable_indexer %}
  {% do c_indexer.add_storage(store.mount_path, store) %}
  {% endif %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{# Add labels to containers #}
{% for label in values.labels %}
  {% for container in label.containers %}
    {% if container == "windmill_server" %}
      {% do c_server.labels.add(label.key, label.value) %}
    {% elif container == "windmill_worker" %}
      {% do c_worker.labels.add(label.key, label.value) %}
    {% elif container == "windmill_worker_native" %}
      {% do c_worker_native.labels.add(label.key, label.value) %}
    {% elif container == "windmill_indexer" and values.optional.enable_indexer %}
      {% do c_indexer.labels.add(label.key, label.value) %}
    {% elif container == "lsp" %}
      {% do c_lsp.labels.add(label.key, label.value) %}
    {% elif container == "multiplayer" and values.optional.enable_multiplayer %}
      {% do c_multiplayer.labels.add(label.key, label.value) %}
    {% elif container == "caddy" %}
      {% do c_caddy.labels.add(label.key, label.value) %}
    {% elif container == "postgres" %}
      {% do postgres.container.labels.add(label.key, label.value) %}
    {% endif %}
  {% endfor %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c_server.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_worker.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do c_worker_native.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% if values.optional.enable_indexer %}
  {% do c_indexer.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endif %}
  {% do c_lsp.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% if values.optional.enable_multiplayer %}
  {% do c_multiplayer.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% endif %}
  {% do c_caddy.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port, "scheme": proto}) %}

{{ tpl.render() | tojson }}

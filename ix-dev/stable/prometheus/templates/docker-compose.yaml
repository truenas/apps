{% from "macros/init.sh" import init %}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set setup = tpl.add_container(values.consts.init_container_name, "image") %}

{% do setup.set_user(values.run_as.user, values.run_as.group) %}
{% do setup.healthcheck.disable() %}
{% do setup.remove_devices() %}
{% do setup.restart.set_policy("on-failure", 1) %}
{% do setup.deploy.resources.set_profile("low") %}
{% do setup.configs.add("init.sh", init(values), "/init.sh", "0755") %}
{% do setup.set_entrypoint(["/bin/sh", "-c", "/init.sh"]) %}

{% set c1 = tpl.add_container(values.consts.prometheus_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do c1.set_user(values.run_as.user, values.run_as.group) %}

{% do c1.healthcheck.set_test("wget", {"port": values.network.web_port, "path": "/-/healthy"}) %}
{% do c1.depends.add_dependency(values.consts.init_container_name, "service_completed_successfully") %}

{% set cmd = namespace(x=[
  "--web.listen-address=0.0.0.0:%d"|format(values.network.web_port),
  "--storage.tsdb.path=%s"|format(values.consts.data_path),
  "--config.file=%s/prometheus.yml"|format(values.consts.config_path),
  "--storage.tsdb.retention.time=%s"|format(values.prometheus.retention_time),
]) %}
{% if values.prometheus.retention_size %}
  {% do cmd.x.append("--storage.tsdb.retention.size=%s"|format(values.prometheus.retention_size)) %}
{% endif %}
{% if values.prometheus.wal_compression %}
  {% do cmd.x.append("--storage.tsdb.wal-compression") %}
{% endif %}
{% for arg in values.prometheus.additional_args %}
  {% do cmd.x.append(arg) %}
{% endfor %}

{% do c1.set_command(cmd.x) %}

{% do c1.environment.add_user_envs(values.prometheus.additional_envs) %}
{% do c1.ports.add_port(values.network.web_port, values.network.web_port) %}

{% do c1.add_storage(values.consts.config_path, values.storage.config) %}
{% do setup.add_storage(values.consts.config_path, values.storage.config) %}
{% do perm_container.add_or_skip_action("config", values.storage.config, perms_config) %}
{% do c1.add_storage(values.consts.data_path, values.storage.data) %}
{% do perm_container.add_or_skip_action("data", values.storage.data, perms_config) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

{% from "macros/config.yaml.jinja" import default_config, default_recorder %}
{% from "macros/config.sh.jinja" import config_script %}
{% set tpl = ix_lib.base.render.Render(values) %}

{% set c1 = tpl.add_container(values.consts.home_assistant_container_name, "image") %}
{% set init = tpl.add_container(values.consts.init_container_name, "yq_image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}

{% set pg_config = {
  "user": values.home_assistant.db_user,
  "password": values.home_assistant.db_password,
  "database": values.home_assistant.db_name,
  "volume": values.storage.postgres_data,
} %}
{% set postgres = tpl.deps.postgres(values.consts.postgres_container_name, "postgres_image", pg_config, perm_container) %}

{% do init.set_user(0, 0) %}
{% do init.add_caps(["CHOWN", "FOWNER", "DAC_OVERRIDE"]) %}
{% do init.healthcheck.disable() %}
{% do init.restart.set_policy("on-failure", 1) %}
{% do init.deploy.resources.set_profile("low") %}

{% do init.configs.add("empty.default", "{}", "/default/init/empty.default") %}
{% do init.configs.add("configuration.default", default_config(), "/default/init/configuration.default") %}
{% do init.configs.add("recorder.default", default_recorder(postgres.get_url("postgresql")), "/default/init/recorder.default") %}
{% do init.configs.add("script.sh", config_script(values, postgres.get_url("postgresql")), "/default/init/script.sh", "0755") %}

{% do init.set_entrypoint(["/bin/sh", "/default/init/script.sh"]) %}

{% do c1.set_user(0, 0) %}
{% do c1.depends.add_dependency(values.consts.postgres_container_name, "service_healthy") %}
{% do c1.depends.add_dependency(values.consts.init_container_name, "service_completed_successfully") %}
{% do c1.add_caps(["CHOWN", "FOWNER", "DAC_OVERRIDE", "NET_BIND_SERVICE", "NET_RAW"]) %}

{% for device in values.home_assistant.devices %}
  {% do c1.devices.add_device(device.host_device, device.container_device) %}
{% endfor %}

{% do c1.healthcheck.set_test("wget", {"port": values.consts.internal_web_port, "path": "/manifest.json"}) %}
{% do c1.environment.add_user_envs(values.home_assistant.additional_envs) %}

{% do c1.ports.add_port(values.network.web_port, values.consts.internal_web_port) %}

{% do c1.add_storage(values.consts.config_path, values.storage.config) %}
{% do init.add_storage(values.consts.config_path, values.storage.config) %}
{% do c1.add_storage("/media", values.storage.media) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do postgres.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add_portal({"port": values.network.web_port}) %}

{{ tpl.render() | tojson }}

#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.dns_config import migrate_dns_config
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    dhcp_enabled = config["piholeNetwork"].get("dhcp", {}).get("enabled", False)
    new_values = {
        "TZ": config["TZ"],
        "pihole": {
            "additional_envs": config["piholeConfig"].get("additionalEnvs", []),
            "web_password": config["piholeConfig"]["webPassword"],
        },
        "network": {
            "host_network": config["piholeNetwork"].get("hostNetwork", dhcp_enabled),
            "web_port": config["piholeNetwork"].get("webPort", 30013),
            **({"dns_port": 53} if not dhcp_enabled else {}),
            "dns_opts": migrate_dns_config(config["podOptions"].get("dnsConfig", {})),
            "dhcp_enabled": dhcp_enabled,
            **(
                {
                    "dhcp_config": {
                        "start": config["piholeNetwork"]["dhcp"]["start"],
                        "end": config["piholeNetwork"]["dhcp"]["end"],
                        "gateway": config["piholeNetwork"]["dhcp"]["gateway"],
                    }
                }
                if dhcp_enabled
                else {}
            ),
        },
        "storage": {
            "config": migrate_storage_item(config["piholeStorage"]["config"]),
            "dnsmasq": migrate_storage_item(config["piholeStorage"]["dnsmasq"]),
            "additional_storage": [
                migrate_storage_item(item)
                for item in config["piholeStorage"]["additionalStorages"]
            ],
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set pg_storage_items = namespace(items=[]) %}
{% set redis_storage_items = namespace(items=[]) %}
{% set nginx_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set pg_volume_mounts = namespace(items=[]) %}
{% set redis_volume_mounts = namespace(items=[]) %}
{% set nginx_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do redis_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/redis/tmp", "mode": "check", "uid": values.consts.redis_run_user, "gid": values.consts.redis_run_group}
)) %}
{% do redis_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/bitnami/redis/data"},
  perm_opts={"mount_path": "/mnt/redis/data", "mode": "check", "uid": values.consts.redis_run_user, "gid": values.consts.redis_run_group}
)) %}
{% for item in redis_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and redis_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "temporary", "mount_path": "/tmp"},
  perm_opts={"mount_path": "/mnt/postgres/tmp", "mode": "check", "uid": values.consts.pg_run_user, "gid": values.consts.pg_run_group}
)) %}
{% do pg_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}),
  values=values, perm_opts={"mount_path": "/mnt/postgres/data", "mode": "check", "uid": values.consts.pg_run_user, "gid": values.consts.pg_run_group,}
)) %}
{% for item in pg_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and pg_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.storage.is_data_in_the_same_volume %}
  {% set data_host_path = ix_lib.base.storage.host_path(values.storage.data) %}
  {% set html_host_path = ix_lib.base.storage.host_path(values.storage.html) %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": values.nextcloud.data_dir_path, "host_path": "%s/data"|format(data_host_path)}), values=values)) %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.html, **{"mount_path": "/var/www/html", "host_path_config": {"path": "%s/html"|format(html_host_path)} }), values=values)) %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.html, **{"mount_path": "/var/www/html/config", "host_path_config": {"path": "%s/config"|format(html_host_path)} }), values=values)) %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.html, **{"mount_path": "/var/www/html/custom_apps", "host_path_config": {"path": "%s/custom_apps"|format(html_host_path)} }), values=values)) %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.html, **{"mount_path": "/var/www/html/themes", "host_path_config": {"path": "%s/themes"|format(html_host_path)} }), values=values)) %}
{% else %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.html, **{"mount_path": "/var/www/html"}), values=values)) %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": values.nextcloud.data_dir_path}), values=values)) %}
{% endif %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% do nginx_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "anonymous", "mount_path": "/tmp"})) %}
{% for item in nginx_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and nginx_volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

configs:
{% if values.network.certificate_id %}
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
  {% set port = namespace(x=":$$server_port") %}
  {% if values.network.nginx.use_different_access_port %}
    {% set port.x = ":%d"|format(values.network.nginx.external_access_port) %}
  {% endif %}
  {% if port.x == ":443" %}
    {% set port.x = "" %}
  {% endif %}
  nginx.conf:
    content: |
      events {}
      http {
        server {
          listen              {{ values.network.web_port }} ssl;
          listen              [::]:{{ values.network.web_port }} ssl;
          http2               on;

          # Redirect HTTP to HTTPS
          error_page 497 301 =307 https://$$host{{ port.x }}$$request_uri;

          ssl_certificate     {{ values.consts.ssl_cert_path }};
          ssl_certificate_key {{ values.consts.ssl_key_path }};

          client_max_body_size {{ values.nextcloud.php_upload_limit }}G;
          add_header Strict-Transport-Security "max-age=15552000; includeSubDomains; preload" always;
          location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
          }

          location = /.well-known/carddav {
            return 301 $$scheme://$$host{{ port.x }}/remote.php/dav;
          }

          location = /.well-known/caldav {
            return 301 $$scheme://$$host{{ port.x }}/remote.php/dav;
          }

          location / {
            proxy_pass http://{{ values.consts.nextcloud_container_name }}:80;
            proxy_http_version                 1.1;
            proxy_cache_bypass                 $$http_upgrade;
            proxy_request_buffering            off;

            # Proxy headers
            proxy_set_header Upgrade           $$http_upgrade;
            proxy_set_header Connection        "upgrade";
            proxy_set_header Host              $$http_host;
            proxy_set_header X-Real-IP         $$remote_addr;
            proxy_set_header X-Forwarded-For   $$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host  $$host;
            proxy_set_header X-Forwarded-Port  {{ port.x | default("443", true) | replace(":", "") }};

            # Proxy timeouts
            proxy_connect_timeout              {{ values.network.nginx.proxy_timeout }}s;
            proxy_send_timeout                 {{ values.network.nginx.proxy_timeout }}s;
            proxy_read_timeout                 {{ values.network.nginx.proxy_timeout }}s;
          }
        }
      }
{% endif %}
  opcache.ini:
    content: |
      opcache.memory_consumption={{ values.nextcloud.op_cache_memory_consumption }}
  php.ini:
    content: |
      max_execution_time={{ values.nextcloud.max_execution_time }}
  limitrequestbody.conf:
    content: |
      {% set bytes_gb = 1024 * 1024 * 1024 %}
      LimitRequestBody {{ values.nextcloud.php_upload_limit * bytes_gb }}
  ix-update-hosts-script.sh:
    content: |
      #!/bin/bash
      set -e
      config_file="/var/www/html/config/config.php"
      {# Reason for sed: https://github.com/nextcloud/server/issues/44924 #}
      echo "Updating database and redis host in config.php"
      sed -i "s/\('dbhost' => '\)[^']*postgres:5432',/\1{{ values.consts.postgres_container_name }}:5432',/" "$$config_file"
      occ config:system:set redis host --value="{{ values.consts.redis_container_name }}"
  occ:
    content: |
      #!/bin/bash
      uid="$$(id -u)"
      gid="$$(id -g)"
      if [ "$$uid" = '0' ]; then
        user='www-data'
        group='www-data'
      else
        user="$$uid"
        group="$$gid"
      fi
      run_as() {
        if [ "$$(id -u)" = 0 ]; then
          su -p "$$user" -s /bin/bash -c "php /var/www/html/occ $$(printf '%q ' "$$@")"
        else
          /bin/bash -c "php /var/www/html/occ $$(printf '%q ' "$$@")"
        fi
      }
      run_as "$$@"

{% set dockerfile_inline = namespace(x=[
  "FROM %s"|format(ix_lib.base.utils.get_image(images=values.images, name="image")),
]) %}
{% if values.nextcloud.apt_packages %}
  {% do dockerfile_inline.x.append("RUN apt update || { echo \"Failed to update apt cache. Exiting.\"; exit 1; }") %}
  {% for cmd in values.nextcloud.apt_packages %}
    {% do dockerfile_inline.x.append("RUN apt install -y --no-install-recommends %s || { echo \"Failed to install [%s]. Exiting.\"; exit 1; }"|format(cmd, cmd)) %}
  {% endfor %}
  {% for cmd in values.nextcloud.apt_packages if values.consts.packages[cmd] %}
    {% for pkg in values.consts.packages[cmd].additional_apt %}
      {% do dockerfile_inline.x.append("RUN apt install -y --no-install-recommends %s"|format(pkg)) %}
    {% endfor %}
    {% for pkg in values.consts.packages[cmd].pecl %}
      {% do dockerfile_inline.x.append("RUN pecl install %s"|format(pkg)) %}
    {% endfor %}
    {% for pkg in values.consts.packages[cmd].docker_php_ext %}
      {% do dockerfile_inline.x.append("RUN docker-php-ext-enable %s"|format(pkg)) %}
    {% endfor %}
    {% for pkg in values.consts.packages[cmd].ldd %}
      {% do dockerfile_inline.x.append("RUN ldd \"$(php -r 'echo ini_get(\"extension_dir\");')\"/%s"|format(pkg)) %}
    {% endfor %}
  {% endfor %}
{% endif %}
{% set dockerfile_inline.x = dockerfile_inline.x|join("\n") %}

{# Containers #}
services:
  {{ values.consts.nextcloud_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image_with_hashed_data(images=values.images, name="image", data=dockerfile_inline.x) }}
    build:
      tags:
        {# Creating a unique tag based on the dockerfile_inline data, this ensures that if there is any change, it will rebuild the image #}
        - {{ ix_lib.base.utils.get_image_with_hashed_data(images=values.images, name="image", data=dockerfile_inline.x) }}
      dockerfile_inline: {{ dockerfile_inline.x | tojson }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    configs:
      - source: occ
        target: /usr/local/bin/occ
        mode: 0755
      - source: limitrequestbody.conf
        # https://github.com/nextcloud/docker/issues/1796
        target: /etc/apache2/conf-enabled/limitrequestbody.conf
      - source: php.ini
        target: /usr/local/etc/php/conf.d/nextcloud-z-99.ini
      - source: opcache.ini
        target: /usr/local/etc/php/conf.d/opcache-z-99.ini
      - source: ix-update-hosts-script.sh
        target: /docker-entrypoint-hooks.d/before-starting/ix-update-hosts-script.sh
        mode: 0755
    depends_on:
      {{ values.consts.postgres_container_name }}:
        condition: service_healthy
      {{ values.consts.redis_container_name }}:
        condition: service_healthy
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% set nc_caps = ix_lib.base.security.get_caps(add=["CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID", "NET_BIND_SERVICE", "NET_RAW"]) %}
    cap_add: {{ nc_caps.add | tojson }}
    cap_drop: {{ nc_caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.curl_test(port=80, path="/status.php", config={"headers": [["Host", "localhost"]]}) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    {% set nc_app_env = {
      "NEXTCLOUD_DATA_DIR": values.nextcloud.data_dir_path,
      "PHP_UPLOAD_LIMIT": "%dG"|format(values.nextcloud.php_upload_limit),
      "PHP_MEMORY_LIMIT": "%dM"|format(values.nextcloud.php_memory_limit),
      "NEXTCLOUD_ADMIN_USER": values.nextcloud.admin_user,
      "NEXTCLOUD_ADMIN_PASSWORD": values.nextcloud.admin_password,
      "REDIS_HOST_PORT": 6379,
      "REDIS_HOST": values.consts.redis_container_name,
      "REDIS_HOST_PASSWORD": values.nextcloud.redis_password,
      "POSTGRES_PASSWORD": values.nextcloud.db_password,
      "POSTGRES_HOST": "%s:5432"|format(values.consts.postgres_container_name),
      "POSTGRES_DB": values.consts.db_name,
      "POSTGRES_USER": values.nextcloud.db_user,
    } %}
    {% set trusted_domains = namespace(x=["127.0.0.1", "localhost", values.consts.nextcloud_container_name]) %}
    {% if values.nextcloud.host %}
      {% do trusted_domains.x.append(
        values.nextcloud.host if ":" in values.nextcloud.host
        else "%s:%d"|format(values.nextcloud.host, values.network.web_port)
      ) %}
    {% endif %}
    {% do nc_app_env.update({"NEXTCLOUD_TRUSTED_DOMAINS": trusted_domains.x|unique|list|join(" ")}) %}
    {% if values.nextcloud.certificate_id %}
      {% do nc_app_env.update({
        "APACHE_DISABLE_REWRITE_IP": "1",
        "OVERWRITEPROTOCOL": "https",
        "TRUSTED_PROXIES": (["127.0.0.1", nginx_container_name])|unique|list|join(" "),
      }) %}
      {% if values.nextcloud.host %}
        {% set host = namespace(value="%s:%d"|format(values.nextcloud.host, values.network.web_port)) %}
        {% if ":" in values.nextcloud.host %}
          {% set host.value = values.nextcloud.host %}
        {% elif values.network.nginx.use_different_access_port %}
          {% set host.value = "%s:%d"|format(values.nextcloud.host, values.network.nginx.external_access_port) %}
        {% endif %}
        {% do nc_app_env.update({"OVERWRITEHOST": host.value}) %}
      {% endif %}
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app=nc_app_env, user=values.nextcloud.additional_envs, values=values) | tojson }}
    {% if not values.network.certificate_id %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 80, "published": values.network.web_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

  {# See later if we want allow running custom commands on cron. #}
  {{ values.consts.cron_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image_with_hashed_data(images=values.images, name="image", data=dockerfile_inline.x) }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    entrypoint:
      - /bin/sh
      - -c
    command:
      - |
        echo "{{ values.nextcloud.schedule }} php -f /var/www/html/cron.php" > /var/spool/cron/crontabs/www-data || { echo "Failed to create crontab"; exit 1; }
        /cron.sh || { echo "Failed to run cron"; exit 1; }
    configs:
      - source: occ
        target: /usr/local/bin/occ
        mode: 0755
      - source: limitrequestbody.conf
        target: /etc/apache2/conf-enabled/limitrequestbody.conf
      - source: php.ini
        target: /usr/local/etc/php/conf.d/nextcloud-z-99.ini
      - source: opcache.ini
        target: /usr/local/etc/php/conf.d/opcache-z-99.ini
    cap_add: {{ nc_caps.add | tojson }}
    cap_drop: {{ nc_caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    depends_on:
      {{ values.consts.nextcloud_container_name }}:
        condition: service_healthy
    environment: {{ ix_lib.base.environment.envs(app=nc_app_env, user=values.nextcloud.additional_envs, values=values) | tojson }}
    {% set cron_test = "pidof busybox > /dev/null" %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(cron_test) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% set resource_without_gpus = ix_lib.base.utils.copy_dict(values.resources) %}
  {% do resource_without_gpus.pop("gpus", None) %}

{% if values.network.certificate_id %}
  {{ values.consts.nginx_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="nginx_image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(resource_without_gpus) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(resource_without_gpus) | tojson }}
    {% set nginx_caps = ix_lib.base.security.get_caps(add=["NET_BIND_SERVICE", "CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID", "NET_RAW"]) %}
    cap_add: {{ nginx_caps.add | tojson }}
    cap_drop: {{ nginx_caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    configs:
      - source: nginx.conf
        target: /etc/nginx/nginx.conf
        mode: 0600
      - source: private
        target: {{ values.consts.ssl_key_path }}
      - source: public
        target: {{ values.consts.ssl_cert_path }}
    depends_on:
      {{ values.consts.nextcloud_container_name }}:
        condition: service_healthy
    {% set nginx_test = ix_lib.base.healthchecks.curl_test(port=values.network.web_port, path="/status.php", config={"scheme": "https", "headers": [["Host", "localhost"]]}) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(nginx_test) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    volumes: {{ nginx_volume_mounts.items | tojson }}
{% endif %}

{% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
{% endif %}

  {{ values.consts.redis_container_name }}: {{ ix_lib.base.redis.redis_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="redis_image"),
    "volumes": redis_volume_mounts.items,
    "user": values.consts.redis_run_user, "group": values.consts.redis_run_group,
    "password": values.nextcloud.redis_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      }
    }
  }) | tojson }}

  {{ values.consts.postgres_container_name }}: {{ ix_lib.base.postgres.pg_container(data={
    "image": ix_lib.base.utils.get_image(images=values.images, name="postgres_image"),
    "volumes": pg_volume_mounts.items,
    "user": values.consts.pg_run_user, "group": values.consts.pg_run_group,
    "db_user": values.nextcloud.db_user, "db_name": values.consts.db_name,
    "db_password": values.nextcloud.db_password,
    "dns_opts": values.network.dns_opts, "resources": resource_without_gpus,
    "depends_on": {
      values.consts.perms_container_name: {
        "condition": "service_completed_successfully"
      }
    }
  }) | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "scheme": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("nextcloud") | tojson }}

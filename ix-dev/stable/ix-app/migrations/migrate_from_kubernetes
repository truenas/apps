#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources, transform_memory
from migration_helpers.dns_config import migrate_dns_config


def get_image_pull_policy(pp):
    pp_map = {
        "IfNotPresent": "missing",
        "Always": "always",
        "Never": "never",
    }
    return pp_map.get(pp, "missing")


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    portal = config.get("portalDetails", {})

    volumes = [
        {
            "type": "host_path",
            "mount_path": v["mountPath"],
            "read_only": v.get("readOnly", False),
            "host_path_config": {
                "path": v["hostPath"],
            },
        }
        for v in config.get("hostPathVolumes", [])
    ]

    volumes.extend(
        {
            "type": "ix_volume",
            "mount_path": v["mountPath"],
            "ix_volume_config": {"dataset_name": v["datasetName"]},
        }
        for v in config.get("volumes", [])
    )

    volumes.extend(
        {
            "type": "tmpfs",
            "mount_path": v["mountPath"],
            "tmpfs_config": {"size": transform_memory(v["sizeLimit"])},
        }
        for v in config.get("emptyDirVolumes", [])
    )

    old_resources = {}
    if config.get("enableResourceLimits", False):
        old_resources = {
            "limits": {
                "cpu": config.get("cpuLimit", "4000m"),
                "memory": config.get("memLimit", "8Gi"),
            }
        }

    new_resources = migrate_resources(
        old_resources, config.get("gpuConfiguration", {}), values.get("gpu_choices", {})
    )
    new_resources["enable_resource_limits"] = config.get("enableResourceLimits", False)

    tz = "Etc/UTC"
    envs = []
    for env in config.get("containerEnvironmentVariables", []):
        if env.get("name") == "TZ":
            tz = env.get("value")
        else:
            envs.append(env)

    new_values = {
        "TZ": tz,
        # Image Configuration
        "image": {
            "repository": config["image"]["repository"],
            "tag": config["image"].get("tag", ""),
            "pull_policy": get_image_pull_policy(config["image"].get("pullPolicy", "")),
        },
        # Container Configuration
        "entrypoint": config.get("containerCommand", []),
        "command": config.get("containerArgs", []),
        "envs": envs,
        "tty": config.get("tty", False),
        "stdin": config.get("stdin", False),
        "restart_policy": "no",
        # Kubernetes by default removes any built-in healthchecks
        # and relies on its own system for those. So for smooth migration
        # we disable the built-in healthcheck and user can later change it
        "disable_builtin_healthcheck": True,
        # Network Configuration
        "host_network": config.get("hostNetwork", False),
        "ports": [
            {
                "target": p["containerPort"],
                "published": p["nodePort"],
                "protocol": "udp" if p.get("protocol", "TCP") == "UDP" else "tcp",
            }
            for p in config.get("portForwardingList", [])
        ],
        "dns_config": {
            "nameservers": config.get("dnsConfig", {}).get("nameservers", []),
            "searches": config.get("dnsConfig", {}).get("searches", []),
            "options": migrate_dns_config(config.get("dnsConfig", {})),
        },
        # Security Context Configuration
        "privileged": config["securityContext"].get("privileged", False),
        "capabilities": {"add": config["securityContext"].get("capabilities", [])},
        "run_as_custom_user": config["securityContext"].get("enableRunAsUser", False),
        "run_as": {
            "user": config["securityContext"].get("runAsUser", 568),
            "group": config["securityContext"].get("runAsGroup", 568),
        },
        # Storage Configuration
        "storage": volumes,
        # Resource Reservation
        "resources": new_resources,
        # Portal Configuration
        "portals": (
            [
                {
                    "name": portal.get("portalName", "Web UI"),
                    "scheme": portal.get("protocol", "http"),
                    "use_node_ip": portal.get("useNodeIP", True),
                    "host": portal.get("host", "0.0.0.0"),
                    "port": portal.get("port", 15000),
                    "path": "/",
                }
            ]
            if config.get("enableUIPortal", False)
            else []
        ),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))

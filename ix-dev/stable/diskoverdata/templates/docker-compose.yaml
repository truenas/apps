{% from "diskover_macros/crontab" import crontab %}
{% from "diskover_macros/setup-cron.sh" import setup_cron %}
{% from "diskover_macros/fix-nginx.sh" import fix_nginx %}

{% set tpl = ix_lib.base.render.Render(values) %}

{% set es_password = tpl.funcs.secure_string(32) %}

{% set c1 = tpl.add_container(values.consts.diskover_data_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set es_config = {"password": es_password, "node_name": "diskoverdata", "port": values.consts.elastic_port, "volume": values.storage.es_data} %}
{% set es = tpl.deps.elasticsearch(values.consts.elastic_search_container_name, "elastic_search_image", es_config, perm_container) %}

{% do c1.set_user(0, 0) %}
{% do c1.add_caps(["CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID", "NET_BIND_SERVICE"]) %}
{% do c1.healthcheck.set_test("wget", {"port": values.consts.internal_web_port, "path": "/login.php"}) %}

{% do c1.configs.add("fix_nginx.sh", fix_nginx(), "/etc/cont-init.d/60-fix-nginx", "0700") %}
{% do c1.configs.add("setup_cron.sh", setup_cron(values), "/custom-cont-init.d/60-inject-cron", "0700") %}
{% do c1.configs.add("crontab", crontab(values), values.consts.cron_file_path) %}
{% do c1.depends.add_dependency(values.consts.elastic_search_container_name, "service_healthy") %}

{% do c1.environment.add_env("ES_HOST", values.consts.elastic_search_container_name) %}
{% do c1.environment.add_env("ES_PORT", values.consts.elastic_port) %}
{% do c1.environment.add_env("ES_USER", values.consts.elastic_basic_auth_user) %}
{% do c1.environment.add_env("ES_PASS", es_password) %}
{% do c1.environment.add_env("ES_HTTPS", false) %}
{% do c1.environment.add_user_envs(values.diskover_data.additional_envs) %}

{% if not values.network.host_network %}
  {% do c1.add_port(values.network.web_port, {"container_port": values.consts.internal_web_port}) %}
{% endif %}

{% do c1.add_storage("/config", values.storage.config) %}
{% do c1.add_storage("/data", values.storage.data) %}

{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mount_path, store) %}
{% endfor %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do es.container.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port, {"path": "/login.php", "port": values.consts.internal_web_port if values.network.host_network else None}) %}
{% do tpl.notes.set_body(values.consts.notes_body) %}

{{ tpl.render() | tojson }}

{% import "diskover_macros/crontab" as crontab %}
{% import "diskover_macros/setup-cron.sh" as setup_cron %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{% set es_storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{% set es_volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}
{% set es_password = ix_lib.base.utils.secure_string(32) %}

{% do es_storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% do es_storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.es_data, **{"mount_path": "/usr/share/elasticsearch/data"}), values=values,
  perm_opts={"mount_path": "/mnt/diskover_data/es_data", "mode": "check", "uid": values.consts.elastic_run_as_user, "gid": values.consts.elastic_run_as_group}
)) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.config, **{"mount_path": "/config"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": "/data"}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% for item in es_storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and es_volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

configs:
  crontab:
    content: {{ crontab.crontab(values) | tojson }}
  setup_cron_sh:
    content: {{ setup_cron.setup_cron(values) | tojson }}

{# Containers #}
services:
  {{ values.consts.elastic_search_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="elastic_search_image") }}
    user: {{ "%d:%d" | format(values.consts.elastic_run_as_user, values.consts.elastic_run_as_group) }}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app={
      "ELASTIC_PASSWORD": es_password,
      "http.port": values.consts.elastic_port,
      "discovery.type": "single-node",
      "node.name": "diskoverdata",
    }, user=[], values=values) | tojson }}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% set test = ix_lib.base.healthchecks.curl_test(port=values.consts.elastic_port, path="/_cluster/health", config={
      "headers": [("Authorization", ix_lib.base.utils.basic_auth_header(values.consts.elastic_basic_auth_user, es_password))]
    }) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    volumes: {{ es_volume_mounts.items | tojson }}

  {{ values.consts.diskover_data_container_name }}:
    user: "0:0"
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    configs:
      - source: crontab
        target: {{ values.consts.cron_file_path }}
      - source: setup_cron_sh
        # We add this after (60) the diskoverdata's script
        # that configures the crontab.
        target: /etc/cont-init.d/60-inject-cron
        mode: 0700
    depends_on:
      {{ values.consts.elastic_search_container_name }}:
        condition: service_healthy
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.wget_test(port=80, path="/login.php") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "ES_HOST": values.consts.elastic_search_container_name,
      "ES_PORT": values.consts.elastic_port,
      "ES_USER": values.consts.elastic_basic_auth_user,
      "ES_PASSWORD": es_password,
      "ES_HTTPS": false,
    }, user=values.diskover_data.additional_envs, values=values) | tojson }}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": 80, "published": values.network.web_port}) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "path": "/login.php"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Diskover Data", body=values.consts.notes_body) | tojson }}

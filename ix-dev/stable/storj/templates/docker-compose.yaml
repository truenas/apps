{% from "macros/init.sh" import init %}
{% from "macros/entrypoint.sh" import entrypoint %}

{% set tpl = ix_lib.base.render.Render(values) %}

{% if not tpl.funcs.url_to_dict(values.storj.domain_address).port %}
  {% do tpl.funcs.fail("Domain address must include a port, but got [%s]"|format(values.storj.domain_address)) %}
{% endif %}

{% if values.storj.wallets | length != values.storj.wallets | unique | list | length %}
  {% do tpl.funcs.fail("Wallets must be unique, but got [%s]"|format(values.storj.wallets | join(","))) %}
{% endif %}

{% set c1 = tpl.add_container(values.consts.storj_container_name, "image") %}
{% set setup = tpl.add_container(values.consts.init_container_name, "image") %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{% do setup.add_caps(["CHOWN", "DAC_OVERRIDE", "FOWNER"]) %}
{% do setup.setup_as_helper(profile="", disable_network=false) %}
{% do setup.configs.add("init.sh", init(values), "/init.sh", "0755") %}
{% do setup.set_entrypoint(["/bin/sh", "-c", "/init.sh"]) %}

{% do c1.healthcheck.disable() %}
{% do c1.depends.add_dependency(values.consts.init_container_name, "service_started") %}
{% do c1.set_grace_period(values.storj.stop_grace_period) %}
{% do c1.configs.add("entrypoint.sh", entrypoint(values), "/entrypoint.sh", "0755") %}
{% do c1.set_entrypoint(["/bin/sh", "-c", "/entrypoint.sh"]) %}

{% for c in [c1, setup] %}
  {% do c.set_user(values.run_as.user, values.run_as.group) %}
  {% do c.environment.add_env("STORJ_CONSOLE_ADDRESS", "0.0.0.0:%d" | format(values.network.web_port.port_number)) %}
  {% do c.environment.add_env("EMAIL", values.storj.email) %}
  {% do c.environment.add_env("STORAGE", "%dGB" | format(values.storj.storage_size_gb)) %}
  {% do c.environment.add_env("ADDRESS", values.storj.domain_address) %}
  {% do c.environment.add_env("WALLET", values.storj.wallet_address|string) %}
  {% do c.environment.add_env("RUN_PARAMS", "--operator.wallet-features=%s"|format(values.storj.wallets | join(",") if values.storj.wallets else "")) %}
  {% do c.environment.add_user_envs(values.storj.additional_envs) %}

  {% do c.add_storage("/tmp", {"type": "anonymous"}) %}
  {% do c.add_storage(values.consts.identity_tool_dir_files, tpl.funcs.temp_config("identity-tools-tmp")) %}
  {% do c.add_storage(values.consts.identity_dir, values.storage.identity) %}
  {% do c.add_storage(values.consts.config_dir, values.storage.data) %}

  {% for store in values.storage.additional_storage %}
    {% do c.add_storage(store.mount_path, store) %}
  {% endfor %}
{% endfor %}

{% do perm_container.add_or_skip_action("identity-tools-tmp", tpl.funcs.temp_config("identity-tools-tmp"), perms_config) %}
{% do perm_container.add_or_skip_action("identity", values.storage.identity, perms_config) %}
{% do perm_container.add_or_skip_action("config", values.storage.data, perms_config) %}
{% for store in values.storage.additional_storage %}
  {% do perm_container.add_or_skip_action(store.mount_path, store, perms_config) %}
{% endfor %}

{% if not values.network.host_network %}
  {% do c1.add_port(values.network.web_port) %}
  {% do c1.add_port(values.network.p2p_port, {"container_port": values.consts.container_p2p_port}) %}
  {% do c1.add_port(values.network.p2p_port, {"container_port": values.consts.container_p2p_port, "protocol": "udp"}) %}
{% endif %}

{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
  {% do setup.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{% do tpl.portals.add(values.network.web_port, {"port": values.consts.container_web_port if values.network.host_network else None}) %}

{{ tpl.render() | tojson }}

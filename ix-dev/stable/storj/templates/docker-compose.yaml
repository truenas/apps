{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the perms container volume mounts #}
{% set perms_mounts = namespace(items=[]) %}
{# Stores the perms container dirs #}
{% set perms_dirs = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.identity, **{"mount_path": values.consts.identity_dir}),
  values=values, perm_opts={"mount_path": "/mnt/storj/identity", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.data, **{"mount_path": values.consts.config_dir}),
  values=values, perm_opts={"mount_path": "/mnt/storj/data", "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type": "anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values,
    perm_opts={"mount_path": "/mnt/storj/dir_%s"|format(loop.index0), "mode": "check", "uid": values.run_as.user, "gid": values.run_as.group}
  )) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
  {% if item.perms_item and (perms_dirs.items.append(item.perms_item.perm_dir), perms_mounts.items.append(item.perms_item.vol_mount)) %}{% endif %}
{% endfor %}

{% if values.storj.wallets | length != values.storj.wallets | unique | list | length %}
  {% do ix_lib.base.utils.throw_error("Wallets must be unique, but got [%s]"|format(values.storj.wallets | join(","))) %}
{% endif %}

{% set app_env = {
  "EMAIL": values.storj.email,
  "STORAGE": values.storj.storage_size_gb,
  "ADDRESS": "%s:%s"|format(values.storj.domain_address, values.network.p2p_port),
  "WALLET": values.storj.wallet_address|string,
} %}

{# Containers #}
services:
  {{ values.consts.init_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    {% if perms_dirs.items %}
    depends_on:
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app=dict(app_env, **{"AUTH_TOKEN": values.storj.auth_token|string}), user=values.storj.additional_envs, values=values) | tojson }}
    entrypoint:
      - sh
      - -c
    command:
      - |
        {% set id_tool_dir = "/tmp/identity-tool" %}
        {% set id_path = values.consts.identity_dir %}
        {% set flags = "--identity-dir %s"|format(id_path) %}
        {% set url = "https://github.com/storj/storj/releases/latest/download/identity_linux_amd64.zip" %}
        echo "Checking for identity certificate..."
        if ! [ -f "{{ id_path }}/ca.cert" ] && ! [ -f "{{ id_path }}/identity.cert" ]; then
          echo "Downloading identity generator tool..."; mkdir -p {{ id_tool_dir }}
          [ -w {{ id_path }} ] || { echo "Identity directory is not writable."; exit 1; }
          wget -q -O {{ id_tool_dir }}/identity_linux_amd64.zip {{ url }} || { echo "Failed to download identity generator tool."; exit 1; }
          unzip -o {{ id_tool_dir }}/identity_linux_amd64.zip -d {{ id_tool_dir }} || { echo "Failed to unzip identity generator tool."; exit 1; }
          chmod +x {{ id_tool_dir }}/identity || { echo "Failed to make identity generator tool executable."; exit 1; }

          echo "Generating identity certificate..."
          {{ id_tool_dir }}/identity create storagenode {{ flags }}
          if [ ! -f "{{ id_path }}/storagenode/ca.cert" ] && [ ! -f "{{ id_path }}/storagenode/identity.cert" ]; then
            echo "Failed to generate identity certificate."
            exit 1
          fi
          echo "Identity certificate generated successfully."

          echo "Identity generated successfully at {{ id_path }}"
          ls -lh {{ id_path }}

          echo "Authorizing identity certificate..."
          {{ id_tool_dir }}/identity authorize storagenode {{ flags }} $${AUTH_TOKEN} || { echo "Failed to authorize identity certificate."; exit 1; }

          echo "Storagenode identity certificate generated successfully."
        else
          echo "Identity certificate already exists. Skipping..."
        fi

        echo "Checking if Storj is already setup..."
        if ! [ -f {{ values.consts.config_dir }}/config.yaml ]; then
          echo "Setting up Storj"
          export SETUP="true"
          /entrypoint
        else
          echo "Storj is already setup. Skipping..."
        fi
    volumes: {{ volume_mounts.items | tojson }}

  {{ values.consts.storj_container_name }}:
    user: {{ "%d:%d" | format(values.run_as.user, values.run_as.group) }}
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    stop_grace_period: {{ "%ds" | format(values.storj.stop_grace_period) }}
    {% if values.storj.wallets %}
    command:
      - --operator.wallet-features={{ values.storj.wallets | join(",") }}
    {% endif %}
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    depends_on:
      {{ values.consts.init_container_name }}:
        condition: service_completed_successfully
    {% if perms_dirs.items %}
      {{ values.consts.perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    cap_drop: {{ ix_lib.base.security.get_caps().drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck:
      disable: true
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.storj.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.container_web_port, "published": values.network.web_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.container_p2p_port, "published": values.network.p2p_port}) | tojson }}
      - {{ ix_lib.base.ports.get_port(port={"target": values.consts.container_p2p_port, "published": values.network.p2p_port, "protocol": "udp"}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

  {% if perms_dirs.items %}
  {{ values.consts.perms_container_name }}: {{ ix_lib.base.permissions.perms_container(items=perms_dirs.items, volumes=perms_mounts.items) | tojson }}
  {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Storj") | tojson }}

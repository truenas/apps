{% set photoprism_image = "photoprism/photoprism:240531" %}

{# Stores storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}
{# Stores the container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.import, **{"mount_path": values.consts.import_path}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.storage, **{"mount_path": values.consts.storage_path}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.originals, **{"mount_path": values.consts.originals_path}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}

{% for store in values.storage.additional_storage %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{% if values.network.certificate_id %}
configs:
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ values.consts.photoprism_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% if values.network.certificate_id %}
    configs:
      - source: private
        target: {{ "%s/%s" | format(values.consts.ssl_base_path, values.consts.ssl_key_name) }}
      - source: public
        target: {{ "%s/%s" | format(values.consts.ssl_base_path, values.consts.ssl_cert_name) }}
    {% endif %}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "FOWNER", "DAC_OVERRIDE", "SETGID", "SETUID", "KILL"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts() | tojson }}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("photoprism status") | tojson }}
    {% set app_env = {
      "PHOTOPRISM_HTTP_PORT": values.network.web_port,
      "PHOTOPRISM_ADMIN_PASSWORD": values.photoprism.admin_password,
      "PHOTOPRISM_PUBLIC": values.photoprism.public,
      "PHOTOPRISM_UID": values.run_as.uid,
      "PHOTOPRISM_GID": values.run_as.gid,
      "PHOTOPRISM_values.consts.STORAGE_PATH": values.consts.storage_path,
      "PHOTOPRISM_values.consts.IMPORT_PATH": values.consts.import_path,
      "PHOTOPRISM_values.consts.ORIGINALS_PATH": values.consts.originals_path,
    } %}
    {% if values.photoprism.site_url and app_env.update({"PHOTOPRISM_SITE_URL": values.photoprism.site_url}) %}{% endif %}
    {% if values.network.certificate_id %}
      {% if not values.photoprism.site_url and ix_lib.base.utils.throw_error("Expected [photoprism.site_url] to be set when [network.certificate_id] is be set") %}{% endif %}
      {% do app_env.update({
        "PHOTOPRISM_DISABLE_TLS": false,
        "PHOTOPRISM_TLS_CERT": values.consts.ssl_cert_name,
        "PHOTOPRISM_TLS_KEY": values.consts.ssl_key_name,
      }) %}
    {% endif %}
    environment: {{ ix_lib.base.environment.envs(app=app_env, user=values.photoprism.additional_envs,values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    {% endif %}
    volumes: {{ volume_mounts.items | tojson }}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "scheme": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Photoprism") | tojson }}

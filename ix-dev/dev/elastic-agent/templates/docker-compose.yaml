{% set tpl = ix_lib.base.render.Render(values) %}

{# Determine the image to use based on flavor and hardened settings #}
{% if values.elastic_agent.flavor == "basic" %}
  {% if values.elastic_agent.hardened %}
    {% set image_key = "basic_hardened_image" %}
  {% else %}
    {% set image_key = "basic_image" %}
  {% endif %}
{% elif values.elastic_agent.flavor == "server" %}
  {% if values.elastic_agent.hardened %}
    {% set image_key = "server_hardened_image" %}
  {% else %}
    {% set image_key = "server_image" %}
  {% endif %}
{% elif values.elastic_agent.flavor == "complete" %}
  {% if values.elastic_agent.hardened %}
    {% set image_key = "complete_hardened_image" %}
  {% else %}
    {% set image_key = "complete_image" %}
  {% endif %}
{% endif %}

{# Update image tag if custom version is specified #}
{% set image_config = values.images[image_key] %}
{% if values.elastic_agent.version != "9.1.1" %}
  {% set _ = image_config.update({"tag": values.elastic_agent.version}) %}
{% endif %}

{% set c1 = tpl.add_container(values.consts.elastic_agent_container_name, image_key) %}
{% set perm_container = tpl.deps.perms(values.consts.perms_container_name) %}
{% set perms_config = {"uid": values.run_as.user, "gid": values.run_as.group, "mode": "check"} %}

{# Set user and group #}
{% do c1.set_user(values.run_as.user, values.run_as.group) %}

{# Set healthcheck to check if elastic-agent process is running #}
{% do c1.healthcheck.set_custom_test("test -d /usr/share/elastic-agent/state") %}

{# Set network mode #}
{% if values.network.host_network %}
  {% do c1.set_network_mode("host") %}
{% endif %}

{# Set command to use container subcommand #}
{% do c1.set_command(["elastic-agent", "container"]) %}

{# Set environment variables for Fleet enrollment #}
{% if values.fleet.enroll %}
  {% do c1.environment.add_env("FLEET_ENROLL", "1") %}
  {% do c1.environment.add_env("FLEET_URL", values.fleet.url) %}
  {% do c1.environment.add_env("FLEET_ENROLLMENT_TOKEN", values.fleet.enrollment_token) %}
{% endif %}

{# Set environment variables for Fleet Server #}
{% if values.fleet.server_enable %}
  {% do c1.environment.add_env("FLEET_SERVER_ENABLE", "true") %}
  {% do c1.environment.add_env("FLEET_SERVER_ELASTICSEARCH_HOST", values.fleet.elasticsearch_host) %}
  {% do c1.environment.add_env("FLEET_SERVER_SERVICE_TOKEN", values.fleet.service_token) %}
{% endif %}

{# Set state path environment variable #}
{% do c1.environment.add_env("STATE_PATH", values.consts.state_path) %}

{# Add user-defined environment variables #}
{% do c1.environment.add_user_envs(values.elastic_agent.additional_envs) %}

{# Add state storage #}
{% do c1.add_storage(values.consts.state_path, values.storage.state) %}
{% do perm_container.add_or_skip_action("state", values.storage.state, perms_config) %}

{# Add additional storage volumes #}
{% for store in values.storage.additional_storage %}
  {% do c1.add_storage(store.mountPath, store) %}
  {% do perm_container.add_or_skip_action(store.mountPath, store, perms_config) %}
{% endfor %}

{# Add permissions container if needed #}
{% if perm_container.has_actions() %}
  {% do perm_container.activate() %}
  {% do c1.depends.add_dependency(values.consts.perms_container_name, "service_completed_successfully") %}
{% endif %}

{{ tpl.render() | tojson }}

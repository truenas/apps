{# Stores Syncthing storage items that contains info for volumes, vol mounts, perms dirs and perms mounts #}
{% set storage_items = namespace(items=[]) %}
{# Stores the Syncthing container volume mounts #}
{% set volume_mounts = namespace(items=[]) %}
{# Stores the top level volumes #}
{% set volumes = namespace(items={}) %}

{% do storage_items.items.append(ix_lib.base.storage.storage_item(data=dict(values.storage.home, **{"mount_path": values.consts.home_path}), values=values)) %}
{% do storage_items.items.append(ix_lib.base.storage.storage_item(data={"type":"anonymous", "mount_path": "/tmp"})) %}
{% for store in values.storage.additional_storage %}
  {% if store.type == "cifs" and store.cifs_config.migration_mode %}
    {% do store.update({"read_only": true}) %}
    {% do store.cifs_config.update({"options": ["noperm", "cifsacl", "vers=3.0"]}) %}
  {% endif %}
  {% do storage_items.items.append(ix_lib.base.storage.storage_item(data=store, values=values)) %}
{% else %}
  {% do ix_lib.base.utils.throw_error("Expected at least one storage item to be set for Syncthing") %}
{% endfor %}

{# Add each item to the above lists #}
{% for item in storage_items.items %}
  {% if item.vol and volumes.items.update(item.vol) %}{% endif %}
  {% if item.vol_mount and volume_mounts.items.append(item.vol_mount) %}{% endif %}
{% endfor %}

{# Configs #}
configs:
  logo-horizontal-svg:
    content: {{ values.consts.logo_horizontal_svg | tojson }}
{% if values.network.certificate_id %}
  private:
    content: {{ values.ix_certificates[values.network.certificate_id].privatekey | tojson }}
  public:
    content: {{ values.ix_certificates[values.network.certificate_id].certificate | tojson }}
{% endif %}

{# Containers #}
services:
  {{ values.consts.syncthing_container_name }}:
    image: {{ ix_lib.base.utils.get_image(images=values.images, name="image") }}
    user: "0:0"
    restart: unless-stopped
    deploy:
      resources: {{ ix_lib.base.resources.resources(values.resources) | tojson }}
    devices: {{ ix_lib.base.resources.get_devices(values.resources) | tojson }}
    {% set caps = ix_lib.base.security.get_caps(add=["CHOWN", "DAC_OVERRIDE", "FOWNER", "SETGID", "SETUID", "SETFCAP", "SETPCAP", "SYS_ADMIN"]) %}
    cap_add: {{ caps.add | tojson }}
    cap_drop: {{ caps.drop | tojson }}
    security_opt: {{ ix_lib.base.security.get_sec_opts(remove=["no-new-privileges"]) | tojson }}
    {% if values.network.host_network %}
    network_mode: host
    {% endif %}
    {% if values.network.dns_opts %}
    dns_opt: {{ ix_lib.base.network.dns_opts(values.network.dns_opts) | tojson }}
    {% endif %}
    configs:
      - source: logo-horizontal-svg
        target: {{ values.consts.logo_horizontal_svg_path }}
    {% if values.network.certificate_id %}
      - source: private
        target: {{ "%s/config/https-key.pem" | format(values.consts.home_path) }}
      - source: public
        target: {{ "%s/config/https-cert.pem" | format(values.consts.home_path) }}
    {% endif %}
    {% set test = ix_lib.base.healthchecks.wget_test(port=values.network.web_port, path="/rest/noauth/health") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    volumes: {{ volume_mounts.items | tojson }}
    environment: {{ ix_lib.base.environment.envs(app={
      "PCAP": ["cap_sys_admin", "cap_chown", "cap_dac_override", "cap_fowner"]|join(",") + "+ep",
      "STNOUPGRADE": true,
      "STGUIADDRESS": "0.0.0.0:%d" | format(values.network.web_port),
      "STGUIASSETS": "/var/truenas/assets/gui",
    }, user=values.syncthing.additional_envs, values=values) | tojson }}
    {% if not values.network.host_network %}
    ports:
      - {{ ix_lib.base.ports.get_port(port={"target": values.network.web_port, "published": values.network.web_port}) | tojson }}
    {% endif %}

{% if volumes.items %}
volumes: {{ volumes.items | tojson }}
{% endif %}

x-portals: {{ ix_lib.base.metadata.get_portals([{"port": values.network.web_port, "scheme": "https" if values.network.certificate_id else "http"}]) | tojson }}
x-notes: {{ ix_lib.base.metadata.get_notes("Syncthing") | tojson }}

{% from "macros/global/perms/container.yaml.jinja" import perms_container %}

{% set _ = ix_lib.enterprise.minio.data.validate(data = {
  'multi_mode': app_minio.multi_mode,
  'storage': app_storage,
}) %}

{% set pg_container_name = "postgres" %}
{% set logsearch_container_name = "logsearch" %}
{% set minio_container_name = "minio" %}
{% set minio_perms_container_name = "minio_perms" %}
{% set pg_perms_container_name = "pg_perms" %}

{% set pg_user = "logsearch" %}
{% set pg_database = "logsearch" %}

{% set log_auth_token = ix_lib.base.utils.secure_string(16) %}
{% set log_audit_token = ix_lib.base.utils.secure_string(16) %}

{# Configs #}
{% if app_network.certificate_id %}
configs:
  private:
    content: {{ ixCertificates[app_network.certificate_id].privatekey | tojson }}
  public:
    content: {{ ixCertificates[app_network.certificate_id].certificate | tojson }}
{% endif %}

{% set minio_vols = namespace(volumes=[]) %}
{% for dir in app_storage.data_dirs %}
  {% set _ = minio_vols.volumes.append(dir.mount_path) %}
{% endfor %}

{# Volumes #}
{% set vols = namespace(volumes={}) %}
{% for dir in app_storage.data_dirs %}
  {% set vols.volumes = dict(vols.volumes, **ix_lib.base.storage.vol(dir)) %}
{% endfor %}
{% if app_logsearch.enabled %}
  {% set vols.volumes = dict(vols.volumes, **ix_lib.base.storage.vol(app_logsearch.postgres_data)) %}
{% endif %}

{% if vols.volumes %}
volumes: {{ vols.volumes | tojson }}
{% endif %}

{# Permissions #}
{% set minio_perms = namespace(vols=[]) %}
{% for dir in app_storage.data_dirs %}
  {% if dir.type in ["ix_volume", "host_path", "volume"] and dir.auto_permissions %}
    {% set _ = minio_perms.vols.append(ix_lib.base.storage.vol_mount(dict(dir, **{"mount_path": "/mnt/directories/data%s" | format(loop.index)}), ixVolumes)) %}
  {% endif %}
{% endfor %}

{# Containers #}
services:
  {{ minio_container_name }}:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    user: {{ "%s:%s" | format(app_minio.user, app_minio.group) }}
    {% if app_network.certificate_id %}
    configs:
      - source: private
        target: /.minio/certs/private.key
      - source: public
        target: /.minio/certs/public.crt
    {% endif %}
    command:
      - server
      - --address
      - {{ ":%d" | format(app_network.api_port) }}
      - --console-address
      - {{ ":%d" | format(app_network.console_port) }}
    {% if app_network.certificate_id %}
      - --certs-dir
      - /.minio/certs
    {% endif %}
    {% if app_minio.logging.quiet %}
      - --quiet
    {% endif %}
    {% if app_minio.logging.anonymous %}
      - --anonymous
    {% endif %}
    {% if app_logsearch.enabled %}
    links:
      - {{ logsearch_container_name }}
    {% endif %}
    {% if app_logsearch.enabled or minio_perms.vols %}
    depends_on:
      {% if minio_perms.vols %}
      {{ minio_perms_container_name }}:
        condition: service_completed_successfully
      {% endif %}
      {% if app_logsearch.enabled %}
      {{ logsearch_container_name }}:
        condition: service_healthy
      {% endif %}
    {% endif %}
    {% set test = "mc ready --insecure health" %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    volumes:
    {% for dir in app_storage.data_dirs %}
      - {{ ix_lib.base.storage.vol_mount(dict(dir), ixVolumes) }}
    {% endfor %}
    environment:
      {% set proto = "https" if app_network.certificate_id else "http" %}
      MC_HOST_health: {{ "%s://localhost:%d" | format(proto, app_network.api_port) }}
      MINIO_ROOT_USER: {{ app_minio.access_key }}
      MINIO_ROOT_PASSWORD: {{ app_minio.secret_key }}
      MINIO_VOLUMES: {{ multi_mode_items if multi_mode_items else minio_vols.volumes | join(' ') }}
    {% if app_network.server_url %}
      MINIO_SERVER_URL: {{ app_network.server_url }}
    {% endif %}
    {% if app_network.console_url %}
      MINIO_BROWSER_REDIRECT_URL: {{ app_network.console_url }}
    {% endif %}
    {% if app_logsearch.enabled %}
      MINIO_AUDIT_WEBHOOK_ENABLE_ix_logsearch: "on"
      MINIO_AUDIT_WEBHOOK_ENDPOINT_ix_logsearch: {{ "http://%s:8080/api/ingest?token=%s" | format(logsearch_container_name, log_audit_token) }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_audit_token }}
      MINIO_LOG_QUERY_URL: {{ "http://%s:8080" | format(logsearch_container_name) }}
    {% endif %}

  {% if minio_perms.vols %}
  {{ minio_perms_container_name }}:
    {{ perms_container("check", app_minio.user, app_minio.group, "") | indent(4) }}
    volumes:
      {% for store in minio_perms.vols %}
      - {{ store | tojson }}
      {% endfor %}
  {% endif %}

{% if app_logsearch.enabled %}
  {# Logsearch container #}
  {{ logsearch_container_name }}:
    image: minio/operator:v4.5.8
    user: {{ "%s:%s" | format(app_minio.user, app_minio.group) }}
    entrypoint: ["/logsearchapi"]
    links:
      - {{ pg_container_name }}
    depends_on:
      {{ pg_container_name }}:
        condition: service_healthy
    {% set test = ix_lib.base.healthchecks.curl_test("http://localhost:8080/status") %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    environment:
      LOGSEARCH_DISK_CAPACITY_GB: {{ app_logsearch.disk_capacity_gb }}
      LOGSEARCH_PG_CONN_STR: {{ ix_lib.base.postgres.pg_url("postgresql", pg_container_name, pg_user, app_logsearch.postgres_password, pg_database) }}
      LOGSEARCH_AUDIT_AUTH_TOKEN: {{ app_logsearch.audit_auth_token }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ app_logsearch.log_query_auth_token }}

  {# Postgres container #}
  {{ pg_container_name }}:
    image: postgres:15
    user: 999:999
    environment: {{ ix_lib.base.postgres.pg_env(pg_user, app_logsearch.postgres_password, pg_database) | tojson }}
    {% set test = ix_lib.base.healthchecks.pg_test(pg_user, pg_database) %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(test) | tojson }}
    {% if app_logsearch.postgres_data.auto_permissions %}
    depends_on:
      {{ pg_perms_container_name }}:
        condition: service_completed_successfully
    {% endif %}
    volumes:
      - {{ ix_lib.base.storage.vol_mount(dict(app_logsearch.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}), ixVolumes) }}
  {% if app_logsearch.postgres_data.auto_permissions %}
  {{ pg_perms_container_name }}:
    {{ perms_container("check", 999, 999, "") | indent(4) }}
    volumes:
      - {{ ix_lib.base.storage.vol_mount(dict(app_logsearch.postgres_data, **{"mount_path": "/mnt/directories/data"}), ixVolumes) }}
  {% endif %}
{% endif %}

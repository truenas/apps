{% from "macros/global/permissions.yaml.jinja" import permissions_container %}

{{ ix_lib.enterprise.minio.data.validate(data = {
  'multi_mode': minio.multi_mode,
  'storage': storage,
}) }}

{% set pg_database = "logsearch" %}
{% set pg_user = "logsearch" %}
{% set minio_network = "minio_internal" %}

{% set log_auth_token = ix_lib.base.utils.secure_string(16) %} {# Random string #}
{% set log_audit_token = ix_lib.base.utils.secure_string(16) %} {# Random string #}

{% set minio_vols = namespace(items=[]) %}
{% set perm_paths = namespace(items=[]) %}

{% if network.certificate_id %}
configs:
  private:
    content: |
      {{ ixCertificates[network.certificate_id].privatekey | indent(6) }}
  public:
    content: |
      {{ ixCertificates[network.certificate_id].certificate | indent(6) }}
{% endif %}

{# Get paths to apply permissions to #}
{% for store in storage.data %}
  {%- if store.auto_permissions %}
  {% set perm_paths.items = perm_paths.items +
    [{
      'host_path': ix_lib.base.utils.get_host_path(data=store, ix_volumes=ixVolumes),
      'mount_path': store.mount_path, 'uid': ix_lib.base.permissions.validate_id(minio.user),
      'gid': ix_lib.base.permissions.validate_id(minio.group)
    }]
  %}
  {% endif %}
{% endfor %}
{% if logsearch.enabled and logsearch.postgres_data.auto_permissions %}
  {% set perm_paths.items = perm_paths.items +
    [{
      'host_path': ix_lib.base.utils.get_host_path(data=logsearch.postgres_data, ix_volumes=ixVolumes),
      'mount_path': '/data/pgdata', 'uid': ix_lib.base.permissions.validate_id(logsearch.postgres_data.user),
      'gid': ix_lib.base.permissions.validate_id(logsearch.postgres_data.group)
    }]
  %}
{% endif %}

services:
  {% if perm_paths.items %}
    {{- permissions_container(paths=perm_paths.items) | indent(2) }}
  {% endif %}
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    user: {{ "%s:%s" | format(minio.user, minio.group) }}
    ports:
      - {{ "%d:%d" | format(network.api_port, network.api_port) }}
      - {{ "%d:%d" | format(network.console_port, network.console_port) }}
    deploy:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.resources(resources)) | indent(6) }}
    {% if network.certificate_id %}
    configs:
      - source: private
        target: /.minio/certs/private.key
      - source: public
        target: /.minio/certs/public.crt
    {% endif %}
    command:
      - server
      - --address
      - {{ ":%d" | format(network.api_port) }}
      - --console-address
      - {{ ":%d" | format(network.console_port) }}
      {% if network.certificate_id %}
      - --certs-dir
      - /.minio/certs
      {% endif %}
      {% if minio.logging.anonymous %}
      - --anonymous
      {% endif %}
      {% if minio.logging.quiet %}
      - --quiet
      {% endif %}
    volumes:
      {% for store in storage.data %}
        {% set minio_vols.items = minio_vols.items + [store.mount_path] %}
      - {{ "%s:%s" | format(ix_lib.base.utils.get_host_path(data=store, ix_volumes=ixVolumes), ix_lib.base.validations.validate_path(store.mount_path)) }}
      {% endfor %}
    environment:
      MINIO_ROOT_USER: {{ minio.access_key }}
      MINIO_ROOT_PASSWORD: {{ minio.secret_key  }}
      {% if multi_mode %}
      MINIO_VOLUMES: {{ minio_vols.items | join(' ') }}
      {% else %}
      MINIO_VOLUMES: {{ minio_vols.items | join(' ') }}
      {% endif %}
      {% if network.server_url %}
      MINIO_SERVER_URL: {{ network.server_url }}
      {% endif %}
      {% if network.console_url %}
      MINIO_BROWSER_REDIRECT_URL: {{ network.console_url }}
      {% endif %}
      {% if logsearch.enabled %}
      MINIO_AUDIT_WEBHOOK_ENABLE_ix_logsearch: "on"
      MINIO_AUDIT_WEBHOOK_ENDPOINT_ix_logsearch: {{ "http://logsearch:8080/api/ingest?token=%s" | format(log_audit_token) }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_auth_token }}
      MINIO_LOG_QUERY_URL: http://logsearch:8080
      {% endif %}
      MC_HOST_health: {{ "%s://localhost:%d" | format("https" if network.certificate_id else "http", network.api_port) }}
    healthcheck:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.health_check(test = "mc ready --insecure --debug health")) | indent(6) }}
    {% if perm_paths.items or logsearch.enabled %}
    depends_on:
      {% if perm_paths.items %}
      permissions:
        condition: service_completed_successfully
      {% endif %}
      {% if logsearch.enabled %}
      logsearch:
        condition: service_healthy
      {% endif %}
    {% endif %}
    {% if logsearch.enabled %}
    links:
      - logsearch
    {% endif %}

  {% if logsearch.enabled %}
  logsearch:
    image: minio/operator:v4.5.8
    user: {{ "%s:%s" | format(minio.user, minio.group) }}
    links:
      - postgres
    entrypoint: /logsearchapi
    deploy:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.resources(resources))| indent(6) }}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.health_check(ix_lib.base.snippets.curl_test("http://localhost:8080/status"))) | indent(6) }}
    environment:
      LOGSEARCH_DISK_CAPACITY_GB: {{ logsearch.disk_capacity_gb }}
      LOGSEARCH_PG_CONN_STR: postgresql://{{ pg_user }}:{{ logsearch.postgres_password }}@postgres:5432/{{ pg_database }}?sslmode=disable
      LOGSEARCH_AUDIT_AUTH_TOKEN: {{ log_audit_token }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_auth_token }}

  postgres:
    image: postgres:15
    user: {{ ix_lib.base.snippets.postgres_run_as() }}
    {% if perm_paths.items %}
    depends_on:
      permissions:
        condition: service_completed_successfully
    {% endif %}
    deploy:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.resources(resources)) | indent(6) }}
    healthcheck:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.health_check(ix_lib.base.snippets.pg_test(user = pg_user, db=pg_database))) | indent(6) }}
    environment:
      {{ ix_lib.base.utils.to_yaml(ix_lib.base.snippets.postgres_environment(user = pg_user, db = pg_database, password = logsearch.postgres_password)) | indent(6) }}
    volumes:
      - {{ "%s:/var/lib/postgresql/data" | format(ix_lib.base.utils.get_host_path(data=logsearch.postgres_data, ix_volumes=ixVolumes)) }}
  {% endif %}

{#
TODO: add function for container that runs a pg backup on a schedule. Nice read
https://wbarillon.medium.com/the-proper-and-easiest-way-to-set-cron-jobs-docker-version-1ef213578ad
#}
{# TODO: make a postgres snippet #}

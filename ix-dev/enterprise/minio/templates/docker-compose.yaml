{% from "macros/global/perms/container.yaml.jinja" import perms_container %}

{% set _ = ix_lib.enterprise.minio.data.validate(data = {
  'multi_mode': minio.multi_mode,
  'storage': storage,
}) %}

{% if network.certificate_id %}
configs:
  private:
    content: |
      {{ ixCertificates[network.certificate_id].privatekey | indent(6) }}
  public:
    content: |
      {{ ixCertificates[network.certificate_id].certificate | indent(6) }}
{% endif %}

{% set pg_database = "logsearch" %}
{% set pg_user = "logsearch" %}
{% set log_auth_token = ix_lib.base.utils.secure_string(16) %}
{% set log_audit_token = ix_lib.base.utils.secure_string(16) %}
{% set minio_vols = namespace(items=[]) %}
{% set auto_permissions_list = storage.data | map(attribute='auto_permissions') %}
{% set minio_perms = auto_permissions_list | select('equalto', True) | list | length > 0 %}

services:
{% if logsearch.enabled %}
  {# Logsearch API #}
  logsearch:
    image: minio/operator:v4.5.8
    user: {{ "%s:%s" | format(minio.user, minio.group) }}
    links:
      - postgres
    entrypoint: /logsearchapi
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck: {{ ix_lib.base.healthchecks.check_health(ix_lib.base.healthchecks.curl_test("http://localhost:8080/status")) }}
    environment: {{ ix_lib.base.env.envs({
      "LOGSEARCH_DISK_CAPACITY_GB": logsearch.disk_capacity_gb,
      "LOGSEARCH_PG_CONN_STR": ix_lib.base.postgres.pg_url("postgresql", "postgres", pg_user, logsearch.postgres_password, pg_database),
      "LOGSEARCH_AUDIT_AUTH_TOKEN": log_audit_token,
      "MINIO_LOG_QUERY_AUTH_TOKEN": log_auth_token,
    }) }}

  {# Postgres #}
  postgres:
    image: postgres:15
    user: "999:999"
    {% if logsearch.postgres_data.auto_permissions %}
    depends_on:
      pg_perms:
        condition: service_completed_successfully
    {% endif %}
    environment: {{ ix_lib.base.postgres.pg_env(pg_user, logsearch.postgres_password, pg_database) }}
    volumes:
      - {{ ix_lib.base.storage.vol_mount(dict(logsearch.postgres_data, **{"mount_path": "/var/lib/postgresql/data"}), ix_volumes=ixVolumes) }}
    healthcheck: {{ ix_lib.base.healthchecks.check_health(ix_lib.base.healthchecks.pg_test(pg_user, pg_database)) }}

  {# Postgres Permissions #}
  {% if logsearch.postgres_data.auto_permissions %}
  pg_perms:
    {{ perms_container("check", "999", "999", "") | indent(4) }}
    volumes:
      - {{ ix_lib.base.storage.vol_mount(dict(logsearch.postgres_data, **{"mount_path": "/mnt/directories/data"}), ix_volumes=ixVolumes) }}
  {% endif %}
{% endif %}

{% if minio_perms %}
  {# MinIO Permissions #}
  minio_perms:
    {{ perms_container("check", minio.user, minio.group, "") | indent(4) }}
    volumes:
      {% for store in storage.data if store.auto_permissions %}
      - {{ ix_lib.base.storage.vol_mount(dict(store, **{"mount_path": "/mnt/directories/data%s" | format(loop.index)}), ix_volumes=ixVolumes) }}
      {% endfor %}
{% endif %}

  {# MinIO #}
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    user: {{ "%s:%s" | format(minio.user, minio.group) }}
    ports:
      - {{ ix_lib.base.ports.port(network.api_port) }}
      - {{ ix_lib.base.ports.port(network.console_port) }}
    {% if network.certificate_id %}
    configs:
      - source: private
        target: /.minio/certs/private.key
      - source: public
        target: /.minio/certs/public.crt
    {% endif %}
    command:
      - server
      - --address
      - {{ ":%d" | format(network.api_port) }}
      - --console-address
      - {{ ":%d" | format(network.console_port) }}
      {% if network.certificate_id %}
      - --certs-dir
      - /.minio/certs
      {% endif %}
      {% if minio.logging.anonymous %}
      - --anonymous
      {% endif %}
      {% if minio.logging.quiet %}
      - --quiet
      {% endif %}
    volumes:
      {% for store in storage.data %}
        {% set minio_vols.items = minio_vols.items + [store.mount_path] %}
      - {{ ix_lib.base.storage.vol_mount(store, ix_volumes=ixVolumes) }}
      {% endfor %}
    {% if logsearch.enabled or minio_perms %}
    depends_on:
      {% if minio_perms %}
      minio_perms:
        condition: service_completed_successfully
      {% endif %}
      {% if logsearch.enabled %}
      logsearch:
        condition: service_healthy
      {% endif %}
    {% endif %}
    healthcheck: {{ ix_lib.base.healthchecks.check_health("mc ready --insecure --debug health") }}
    {% if logsearch.enabled %}
    links:
      - logsearch
    {% endif %}
    {% set dev_env = {
      "MINIO_ROOT_USER": minio.access_key,
      "MINIO_ROOT_PASSWORD": minio.secret_key,
      "MINIO_VOLUMES": multi_mode.items | join(' ') if multi_mode else minio_vols.items | join(' '),
      "MC_HOST_health": "%s://localhost:%d" | format("https" if network.certificate_id else "http", network.api_port),
    } %}
    {% if network.server_url and dev_env.update({"MINIO_SERVER_URL": network.server_url}) %}{% endif %}
    {% if network.console_url and dev_env.update({"MINIO_BROWSER_REDIRECT_URL": network.console_url}) %}{% endif %}
    {% if logsearch.enabled and dev_env.update({
        "MINIO_AUDIT_WEBHOOK_ENABLE_ix_logsearch": "on",
        "MINIO_AUDIT_WEBHOOK_ENDPOINT_ix_logsearch": "http://logsearch:8080/api/ingest?token=%s" | format(log_audit_token),
        "MINIO_LOG_QUERY_AUTH_TOKEN": log_auth_token,
        "MINIO_LOG_QUERY_URL": "http://logsearch:8080",
    }) %}{% endif %}
    environment: {{ ix_lib.base.env.envs(dev_env) }}

{% set volumes = ix_lib.base.storage.volumes(
  logsearch.postgres_data if logsearch.enabled else {},
  storage.data
) %}
{% if volumes %}
volumes: {{ volumes }}
{% endif %}

{% set pg_database = "minio" %}
{% set pg_user = "minio" %}
{% set log_auth_token = secure_string(16) %}
{% set log_audit_token = secure_string(16) %}
{% set minio_network = "minio_internal" %}

services:
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    user: {{ "%s:%s"|format(data.minio.user, data.minio.group) }}
    networks:
      - {{ minio_network }}
    {# TODO: #}
    ports:
      - {{ "%d:%d"|format(data.network.api_port, data.network.api_port) }}
      - {{ "%d:%d"|format(data.network.console_port, data.network.console_port) }}
    command:
      - server
      - --address
      - {{ ":%d"|format(data.network.api_port) }}
      - --console-address
      - {{ ":%d"|format(data.network.console_port) }}
      {% if data.network.certificateID is defined %}
      - --certs-dir
      - /.minio/certs
      {% endif %}
      {% if data.minio.logging.anonymous %}
      - --anonymous
      {% endif %}
      {% if data.minio.logging.quiet %}
      - --quiet
      {% endif %}
    volumes:
      {# TODO: #}
      - /mnt/test1/minio:/data
    environment:
      MINIO_ROOT_USER: {{ data.minio.access_key }}
      MINIO_ROOT_PASSWORD: {{ data.minio.secret_key  }}
      {# TODO: #}
      MINIO_VOLUMES: /data
      {% if data.minio.server_url %}
      MINIO_SERVER_URL: {{ data.minio.server_url }}
      {% endif %}
      {% if data.minio.console_url %}
      MINIO_BROWSER_REDIRECT_URL: {{ data.minio.console_url }}
      {% endif %}
      {% if data.minio.logsearch.enabled %}
      MINIO_AUDIT_WEBHOOK_ENABLE_ix_logsearch: "on"
      MINIO_AUDIT_WEBHOOK_ENDPOINT_ix_logsearch: {{ "http://logsearch:8080/api/ingest?token=%s"|format(log_audit_token) }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_auth_token }}
      MINIO_LOG_QUERY_URL: http://logsearch:8080
      {% endif %}
      MC_HOST_health: {{ "http://localhost:%d"|format(data.network.api_port) }}
    healthcheck:
      {{ health_check(test="mc ready health")|indent(6) }}
    {% if data.minio.logsearch.enabled %}
    depends_on:
      logsearch:
        condition: service_healthy
    {% endif %}

  {% if data.minio.logsearch.enabled %}
  logsearch:
    image: minio/operator:v4.5.8
    user: {{ "%s:%s"|format(data.minio.user, data.minio.group) }}
    networks:
      - {{ minio_network }}
    entrypoint: /logsearchapi
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      {{ health_check(curl_test("http://localhost:8080/status"))|indent(6) }}
    environment:
      LOGSEARCH_DISK_CAPACITY_GB: {{ data.minio.logsearch.disk_capacity_gb }}
      LOGSEARCH_PG_CONN_STR: postgresql://{{ pg_user }}:{{ data.minio.logsearch.postgres_password }}@postgres:5432/{{ pg_database }}?sslmode=disable
      LOGSEARCH_AUDIT_AUTH_TOKEN: {{ log_audit_token }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_auth_token }}


  postgres:
    image: postgres:15
    user: {{ postgres_run_as() }}
    networks:
      - {{ minio_network }}
    healthcheck:
      {{ health_check(pg_test(user=pg_user, db=pg_database))|indent(6) }}
    environment:
      {{ postgres_environment(user=pg_user, db=pg_database,
        password=data.minio.logsearch.postgres_password) }}
    {# TODO: #}
    volumes:
      - postgres:/var/lib/postgresql/data
  {% endif %}

{#
TODO: add function for container that runs a pg backup on a schedule. Nice read
https://wbarillon.medium.com/the-proper-and-easiest-way-to-set-cron-jobs-docker-version-1ef213578ad
#}

{# TODO: make a postgres snippet #}

networks:
  minio_internal: {}

{# TODO: #}
volumes:
  postgres: {}

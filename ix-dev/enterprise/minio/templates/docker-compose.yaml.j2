{{ validate(data) }}

{% set pg_database = "logsearch" %}
{% set pg_user = "logsearch" %}
{% set minio_network = "minio_internal" %}

{% set log_auth_token = secure_string(16) %} {# Random string #}
{% set log_audit_token = secure_string(16) %} {# Random string #}

{% set minio_vols = namespace(items=[]) %}

networks:
  {{ minio_network }}: {}

{% if data.network.certificate_id %}
configs:
  private:
    content: |
      {{ data.ixCertificates[data.network.certificate_id].privatekey | indent(6) }}
  public:
    content: |
      {{ data.ixCertificates[data.network.certificate_id].certificate | indent(6) }}
{% endif %}
services:
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    user: {{ "%s:%s" | format(data.minio.user, data.minio.group) }}
    networks:
      - {{ minio_network }}
    ports:
      - {{ "%d:%d" | format(data.network.api_port, data.network.api_port) }}
      - {{ "%d:%d" | format(data.network.console_port, data.network.console_port) }}
    deploy:
      {{ resources(data.resources) | to_yaml | indent(6) }}
    {% if data.network.certificate_id %}
    configs:
      - source: private
        target: /.minio/certs/private.key
      - source: public
        target: /.minio/certs/public.crt
    {% endif %}
    command:
      - server
      - --address
      - {{ ":%d" | format(data.network.api_port) }}
      - --console-address
      - {{ ":%d" | format(data.network.console_port) }}
      {% if data.network.certificate_id %}
      - --certs-dir
      - /.minio/certs
      {% endif %}
      {% if data.minio.logging.anonymous %}
      - --anonymous
      {% endif %}
      {% if data.minio.logging.quiet %}
      - --quiet
      {% endif %}
    volumes:
      {% for store in data.storage.data %}
        {% set minio_vols.items = minio_vols.items + [store.mount_path] %}
        {{ host_path_with_perms(data = store, perms = {'user': data.minio.user, 'group': data.minio.group}) }}
      - {{ "%s:%s" | format(store.host_path_config.path, store.mount_path) }}
      {% endfor %}
    environment:
      MINIO_ROOT_USER: {{ data.minio.access_key }}
      MINIO_ROOT_PASSWORD: {{ data.minio.secret_key  }}
      {% if data.multi_mode %}
      MINIO_VOLUMES: {{ minio_vols.items | join(' ') }}
      {% else %}
      MINIO_VOLUMES: {{ minio_vols.items | join(' ') }}
      {% endif %}
      {% if data.network.server_url %}
      MINIO_SERVER_URL: {{ data.network.server_url }}
      {% endif %}
      {% if data.network.console_url %}
      MINIO_BROWSER_REDIRECT_URL: {{ data.network.console_url }}
      {% endif %}
      {% if data.logsearch.enabled %}
      MINIO_AUDIT_WEBHOOK_ENABLE_ix_logsearch: "on"
      MINIO_AUDIT_WEBHOOK_ENDPOINT_ix_logsearch: {{ "http://logsearch:8080/api/ingest?token=%s" | format(log_audit_token) }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_auth_token }}
      MINIO_LOG_QUERY_URL: http://logsearch:8080
      {% endif %}
      MC_HOST_health: {{ "%s://localhost:%d" | format("https" if data.network.certificate_id else "http", data.network.api_port) }}
    healthcheck:
      {{ health_check(test = "mc ready --insecure --debug health") | to_yaml | indent(6) }}
    {% if data.logsearch.enabled %}
    depends_on:
      logsearch:
        condition: service_healthy
    {% endif %}

  {% if data.logsearch.enabled %}
  logsearch:
    image: minio/operator:v4.5.8
    user: {{ "%s:%s" | format(data.minio.user, data.minio.group) }}
    networks:
      - {{ minio_network }}
    entrypoint: /logsearchapi
    deploy:
      {{ resources(data.resources) | to_yaml | indent(6) }}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      {{ health_check(curl_test("http://localhost:8080/status")) | to_yaml | indent(6) }}
    environment:
      LOGSEARCH_DISK_CAPACITY_GB: {{ data.logsearch.disk_capacity_gb }}
      LOGSEARCH_PG_CONN_STR: postgresql://{{ pg_user }}:{{ data.logsearch.postgres_password }}@postgres:5432/{{ pg_database }}?sslmode=disable
      LOGSEARCH_AUDIT_AUTH_TOKEN: {{ log_audit_token }}
      MINIO_LOG_QUERY_AUTH_TOKEN: {{ log_auth_token }}

  postgres:
    image: postgres:15
    user: {{ postgres_run_as() }}
    networks:
      - {{ minio_network }}
    deploy:
      {{ resources(data.resources) | to_yaml | indent(6) }}
    healthcheck:
      {{ health_check(pg_test(user = pg_user, db=pg_database)) | to_yaml | indent(6) }}
    environment:
      {{ postgres_environment(user = pg_user, db = pg_database, password = data.logsearch.postgres_password) | to_yaml | indent(6) }}
    volumes:
      {{ host_path_with_perms(data = data.logsearch.postgres_data, perms = {'user': postgres_uid(), 'group': postgres_gid()}) }}
      - {{ "%s:/var/lib/postgresql/data" | format(data.logsearch.postgres_data.host_path_config.path) }}
  {% endif %}

{#
TODO: add function for container that runs a pg backup on a schedule. Nice read
https://wbarillon.medium.com/the-proper-and-easiest-way-to-set-cron-jobs-docker-version-1ef213578ad
#}
{# TODO: make a postgres snippet #}

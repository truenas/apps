{% set pg_database = "minio" %}
{% set pg_user = "minio" %}

services:
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    user: {{ "%s:%s"|format(data.minio.user, data.minio.group) }}
    networks:
      - minio_internal
    command:
      - server
      - --address
      - {{ ":%d"|format(data.network.api_port) }}
      - --console-address
      - {{ ":%d"|format(data.network.console_port) }}
      {% if data.network.certificateID is defined %}
      - --certs-dir
      - /.minio/certs
      {% endif %}
      {% if data.minio.logging.anonymous %}
      - --anonymous
      {% endif %}
      {% if data.minio.logging.quiet %}
      - --quiet
      {% endif %}
    environment:
      MINIO_ROOT_USER: {{ data.minio.access_key }}
      MINIO_ROOT_PASSWORD: {{ data.minio.secret_key  }}
      MINIO_VOLUMES: {# TODO: #}
      {% if data.minio.server_url %}
      MINIO_SERVER_URL: {{ data.minio.server_url }}
      {% endif %}
      {% if data.minio.console_url %}
      MINIO_BROWSER_REDIRECT_URL: {{ data.minio.console_url }}
      {% endif %}
      {% if data.minio.logsearch.enabled %}
      MINIO_AUDIT_WEBHOOK_ENABLE_ix_logsearch: "on"
      {# TODO: generate the token, can it be dynamic? #}
      MINIO_AUDIT_WEBHOOK_ENDPOINT_ix_logsearch: {{ "http://logsearch:8000/api/ingest?token=%s"|format("TODO:THE TOKEN") }}
      {# TODO: generate the token, can it be dynamic? #}
      MINIO_LOG_QUERY_AUTH_TOKEN: TODO:THE TOKEN
      MINIO_LOG_QUERY_URL: http://logsearch:8000
      {% endif %}
    {% if data.minio.logsearch.enabled %}
    depends_on:
      logsearch:
        condition: service_healthy
    {% endif %}
    healthcheck:
      test: 'curl --silent --fail http://localhost:{{ data.network.api_port }}/minio/health/live'
      {{ healthcheck_timeouts() }}

  {% if data.minio.logsearch.enabled %}
  logsearch:
    image: minio/operator:v4.5.8
    user: {{ "%s:%s"|format(data.minio.user, data.minio.group) }}
    networks:
      - minio_internal
    entrypoint: /logsearchapi
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      LOGSEARCH_DISK_CAPACITY_GB: {{ data.minio.logsearch.disk_capacity_gb }}
      LOGSEARCH_PG_CONN_STR: postgresql://{{ pg_user }}:{{ data.minio.logsearch.postgres_password }}@postgres:5432/{{ pg_database }}?sslmode=disable
      LOGSEARCH_AUDIT_AUTH_TOKEN: TODO:THE TOKEN
      MINIO_LOG_QUERY_AUTH_TOKEN: TODO:THE TOKEN
    healthcheck:
      test: 'curl --silent --fail http://localhost:8000/status'
      {{ healthcheck_timeouts() }}

  postgres:
    image: postgres:15
    user: 999:999
    networks:
      - minio_internal
    healthcheck:
      test: 'pg_isready -h 127.0.0.1 -p 5432 -d {{ pg_database }} -U {{ pg_user }}'
      {{ healthcheck_timeouts(
        start_period=5, retries=3
      ) }}
    environment:
      POSTGRES_USER: {{ pg_user }}
      POSTGRES_PASSWORD: {{ data.minio.logsearch.postgres_password }}
      POSTGRES_DB: {{ pg_database }}
  {% endif %}

{#
TODO: add function for container that runs a pg backup on a schedule. Nice read
https://wbarillon.medium.com/the-proper-and-easiest-way-to-set-cron-jobs-docker-version-1ef213578ad
#}

networks:
  minio_internal: {}

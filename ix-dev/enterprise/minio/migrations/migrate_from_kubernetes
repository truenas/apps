#!/usr/bin/python3

import os
import sys
import yaml

from migration_helpers.resources import migrate_resources
from migration_helpers.storage import migrate_storage_item


def migrate(values):
    config = values.get("helm_secret", {}).get("config", {})
    if not config:
        raise ValueError("No config found in values")

    new_values = {
        "minio": {
            "credentials": {
                "access_key": config["minioCreds"]["rootUser"],
                "secret_key": config["minioCreds"]["rootPass"],
            },
            "logging": {
                "quiet": config["minioLogging"]["quiet"],
                "anonymous": config["minioLogging"]["anonymous"],
            },
            "multi_mode": {
                "enabled": config["enableMultiMode"],
                "entries": config.get("minioMultiMode", []),
            },
        },
        "run_as": {
            "user": config["minioRunAs"].get("user", 568),
            "group": config["minioRunAs"].get("group", 568),
        },
        "network": {
            "api_port": config["minioNetwork"]["apiPort"],
            "console_port": config["minioNetwork"]["webPort"],
            "host_network": config["minioNetwork"]["hostNetwork"],
            "certificate_id": config["minioNetwork"].get("certificateID", None),
            "server_url": config["minioNetwork"]["serverUrl"],
            "console_url": config["minioNetwork"]["consoleUrl"],
        },
        "storage": {
            "data_dirs": [migrate_storage_item(item) for item in config["minioStorage"]]
        },
        "resources": migrate_resources(config["resources"]),
    }

    return new_values


if __name__ == "__main__":
    if len(sys.argv) != 2:
        exit(1)

    if os.path.exists(sys.argv[1]):
        with open(sys.argv[1], "r") as f:
            print(yaml.dump(migrate(yaml.safe_load(f.read()))))
